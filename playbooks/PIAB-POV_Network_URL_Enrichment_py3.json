{
    "blockly": false,
    "blockly_xml": "<xml></xml>",
    "category": "Proof of Value",
    "coa": {
        "data": {
            "clean": true,
            "code_block": "",
            "description": "Sub-Playbook that filters artifacts for URLs, Domains, and IP Addresses. Uses whois API, URLScan.io and PassiveTotal to enrich indicators. If a malicious URL is discovered the artifact is updated and HUD card pinned to show the category and other information",
            "hash": "bf11b1f92208cab8f08283d93673cdda88ae5e01",
            "joint": {
                "cells": [
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "68cb0896-95ef-4eae-bc37-e2fdab7269fd",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "df885407-c165-4b96-aa7d-0d97a439594c",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "f4473aae-559f-49f6-95be-38978ac7bdce",
                            "selector": ".port-body[type=\"input\"]"
                        },
                        "type": "link",
                        "z": 3
                    },
                    {
                        "0": "S",
                        "1": "T",
                        "2": "A",
                        "3": "R",
                        "4": "T",
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "ref-x": 33,
                                "ref-y": 8,
                                "text": "START"
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.icon image": {
                                "ref-x": 13,
                                "xlink:href": "/inc/coa/img/block_icon_start.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            }
                        },
                        "block_code": "def on_start(container):\n    phantom.debug('on_start() called')\n    \n    # call 'filter_Indicators' block\n    filter_Indicators(container=container)\n\n    return",
                        "callback_code": "# read-only block view not available",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "",
                        "connection_type": "",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "",
                        "description": "",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "df885407-c165-4b96-aa7d-0d97a439594c",
                        "inPorts": [],
                        "join_code": "# read-only block view not available",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 16,
                        "line_start": 8,
                        "name": "",
                        "notes": "",
                        "number": 0,
                        "order": 1,
                        "outPorts": [
                            "out"
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": -500,
                            "y": 20
                        },
                        "previous_function": "",
                        "previous_name": "",
                        "show_number": true,
                        "size": {
                            "height": 54,
                            "width": 80
                        },
                        "status": "",
                        "title": "START",
                        "type": "coa.StartEnd",
                        "warn": false,
                        "z": 255
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "89491621-bdc2-4122-b588-f56bacc4cc0c",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "1bbf16c4-bf1f-4315-a510-0c40e6b5a681",
                            "port": "out-1",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "19f6ee78-c324-4559-b3d2-dfd845bce128",
                            "selector": ".port-body[type=\"input\"]"
                        },
                        "type": "link",
                        "z": 288
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "ca918fc4-a73d-4c39-b6b1-9817cbe2b8e8",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "19f6ee78-c324-4559-b3d2-dfd845bce128",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "ad179bb0-4f77-4ce1-abbc-4c794cedb42c",
                            "selector": ".port-body[type=\"input\"]"
                        },
                        "type": "link",
                        "z": 316
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "6dd41470-159c-435a-9097-1802bc11127e",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "ad179bb0-4f77-4ce1-abbc-4c794cedb42c",
                            "port": "out-2",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(2) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "1dadb27c-e8b7-4196-8589-4da62781ee60",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 319
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "ac8f4715-4203-4e2e-9755-0e81e2ce5dce",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "6342db74-e3c4-42fb-bfa9-74f64061c314",
                            "port": "out-1",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "87f4ba0a-8915-4b7c-8532-38c50d6bd7a1",
                            "selector": ".port-body[type=\"input\"]"
                        },
                        "type": "link",
                        "z": 327
                    },
                    {
                        "0": "E",
                        "1": "N",
                        "2": "D",
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".title": {
                                "text": "END"
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.icon image": {
                                "xlink:href": "/inc/coa/img/block_icon_end.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            }
                        },
                        "block_code": "def on_finish(container, summary):\n    phantom.debug('on_finish() called')\n    # This function is called after all actions are completed.\n    # summary of all the action and/or all details of actions\n    # can be collected here.\n\n    # summary_json = phantom.get_summary()\n    # if 'result' in summary_json:\n        # for action_result in summary_json['result']:\n            # if 'action_run_id' in action_result:\n                # action_results = phantom.get_action_results(action_run_id=action_result['action_run_id'], result_data=False, flatten=False)\n                # phantom.debug(action_results)\n\n    return",
                        "callback_code": "# read-only block view not available",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "detonateUrl",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "",
                        "description": "",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "e46e228c-6b58-417f-a7c1-de1484603ce5",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "# read-only block view not available",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 547,
                        "line_start": 534,
                        "name": "",
                        "notes": "",
                        "number": 0,
                        "order": 21,
                        "outPorts": [],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 1240,
                            "y": 320
                        },
                        "previous_function": "",
                        "previous_name": "",
                        "show_number": true,
                        "size": {
                            "height": 54,
                            "width": 80
                        },
                        "status": "",
                        "title": "END",
                        "type": "coa.StartEnd",
                        "warn": false,
                        "z": 331
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "649bc5d9-2be4-4478-9bf5-dc7dd60cfb68",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "ad179bb0-4f77-4ce1-abbc-4c794cedb42c",
                            "port": "out-1",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "9d03ea2f-c41e-49d6-9701-b7a190f93da2",
                            "selector": ".port-body[type=\"input\"]"
                        },
                        "type": "link",
                        "z": 338
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "7369f5ae-95f1-48d6-b0ef-7d9e029f40bf",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "9d03ea2f-c41e-49d6-9701-b7a190f93da2",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "fb988c90-2d4b-4a1e-a451-b47aa0403847",
                            "selector": ".port-body[type=\"input\"]"
                        },
                        "type": "link",
                        "z": 347
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "a5079170-1322-4e37-a3c6-195c233128e6",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "fb988c90-2d4b-4a1e-a451-b47aa0403847",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "798f292f-38e8-45d5-8525-bc7017e6875e",
                            "selector": ".port-body[type=\"input\"]"
                        },
                        "type": "link",
                        "z": 352
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#637282",
                                "transform": "rotate(45 30 70)"
                            },
                            ".inPorts>.port-0>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".number": {
                                "text": 5
                            },
                            ".outPorts>.port-0": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                },
                                "ref-x": 83,
                                "ref-y": 40
                            },
                            ".outPorts>.port-0>.port-body": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                }
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            }
                        },
                        "block_code": "def is_whitelisted_url(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None):\n    phantom.debug('is_whitelisted_url() called')\n\n    # check for 'if' condition 1\n    matched = phantom.decision(\n        container=container,\n        conditions=[\n            [\"custom_list:whitelisted_urls\", \"not in\", \"filtered-data:filter_Indicators:condition_1:artifact:*.cef.requestURL\"],\n        ])\n\n    # call connected blocks if condition 1 matched\n    if matched:\n        FilterNoisyURLs(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function)\n        return\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "",
                        "connection_type": "",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "is_whitelisted_url",
                        "description": "",
                        "hasElse": false,
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "1bbf16c4-bf1f-4315-a510-0c40e6b5a681",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 79,
                        "line_start": 62,
                        "name": "decision",
                        "notes": "Do not lookup whitelisted URLs",
                        "number": 5,
                        "order": 5,
                        "outPorts": [
                            "out-1"
                        ],
                        "outputs": [
                            {
                                "conditions": [
                                    {
                                        "comparison": "not in",
                                        "data_type": "",
                                        "param": "custom_list:whitelisted_urls",
                                        "value": "filtered-data:filter_Indicators:condition_1:artifact:*.cef.requestURL"
                                    }
                                ],
                                "display": "If",
                                "logic": "and",
                                "type": "if"
                            }
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": -260,
                            "y": 0
                        },
                        "previous_function": "",
                        "previous_name": "is_whitelisted_url",
                        "show_number": true,
                        "size": {
                            "height": 82,
                            "width": 82
                        },
                        "state": "decision",
                        "status": "",
                        "type": "coa.Decision",
                        "warn": "",
                        "z": 375
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773",
                                "transform": "rotate(45 30 70)"
                            },
                            ".inPorts>.port-0>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".number": {
                                "text": 1
                            },
                            ".outPorts>.port-0": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                },
                                "ref-x": 83,
                                "ref-y": 40
                            },
                            ".outPorts>.port-0>.port-body": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                }
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1
                            }
                        },
                        "block_code": "def filter_Indicators(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None):\n    phantom.debug('filter_Indicators() called')\n\n    # collect filtered artifact ids for 'if' condition 1\n    matched_artifacts_1, matched_results_1 = phantom.condition(\n        container=container,\n        conditions=[\n            [\"artifact:*.cef.requestURL\", \"!=\", \"\"],\n        ],\n        name=\"filter_Indicators:condition_1\")\n\n    # call connected blocks if filtered artifacts or results\n    if matched_artifacts_1 or matched_results_1:\n        is_whitelisted_url(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function, filtered_artifacts=matched_artifacts_1, filtered_results=matched_results_1)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "",
                        "connection_type": "",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "filter_Indicators",
                        "description": "",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "f4473aae-559f-49f6-95be-38978ac7bdce",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 33,
                        "line_start": 16,
                        "name": "filter",
                        "notes": "",
                        "number": 1,
                        "order": 2,
                        "outPorts": [
                            "out-1"
                        ],
                        "outputs": [
                            {
                                "conditions": [
                                    {
                                        "comparison": "!=",
                                        "data_type": "",
                                        "param": "artifact:*.cef.requestURL",
                                        "value": ""
                                    }
                                ],
                                "display": "If",
                                "logic": "and",
                                "type": "if"
                            }
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": -380,
                            "y": 0
                        },
                        "previous_function": "",
                        "previous_name": "filter_Indicators",
                        "show_number": true,
                        "size": {
                            "height": 82,
                            "width": 82
                        },
                        "state": "filter",
                        "status": "",
                        "type": "coa.Filter",
                        "warn": false,
                        "z": 381
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "f31b74a2-7498-42ab-a750-f2ceb6e1fddc",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "f4473aae-559f-49f6-95be-38978ac7bdce",
                            "port": "out-1",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "1bbf16c4-bf1f-4315-a510-0c40e6b5a681",
                            "port": "in",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 388
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".functionBlock": {
                                "text": "FilterNoisyURLs"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "custom function"
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 1
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn_grey.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            }
                        },
                        "block_code": "def FilterNoisyURLs(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None):\n    phantom.debug('FilterNoisyURLs() called')\n    filtered_artifacts_data_1 = phantom.collect2(container=container, datapath=['filtered-data:filter_Indicators:condition_1:artifact:*.cef'])\n    filtered_artifacts_item_1_0 = [item[0] for item in filtered_artifacts_data_1]\n\n    FilterNoisyURLs__requestURLsforExternalLookup = None\n    FilterNoisyURLs__numURLs = None\n    FilterNoisyURLs__removedURLs = None\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n\n    # Write your custom code here...\n    nonMatchedArtifacts = []\n    ignoredArtifacts = []\n    phantom.debug(filtered_artifacts_item_1_0)\n    import re\n    from urllib.parse import urlparse\n    success_wlist, message, urls = phantom.get_list(list_name='whitelisted_urls')\n    success_top500, message, top500urls = phantom.get_list(list_name='top500')\n\n    if success_wlist and success_top500:\n        for artifact in filtered_artifacts_item_1_0:\n            phantom.debug('Processing Artifact: {}'.format(artifact))\n            requestURL = urlparse(artifact['requestURL']).netloc\n            phantom.debug('requestURL before you fuck with it: {}'.format(requestURL))\n            if re.match('www\\.', requestURL):\n                requestURL = '.'.join(requestURL.split('.')[1:])\n                \n            phantom.debug('requestURL after you fuck with it: {}'.format(requestURL))\n            isNotInCustomList = 0\n            willIgnore = 0\n            \n            # Check if the domain is in the whitelisted URLs list - Ignore if so\n            for url in urls:\n                str=url[0]\n                if str == None:\n                    continue\n                \n                if re.search(requestURL, str):\n                    #phantom.debug('matching URL found: {} against {}'.format(requestURL,str))\n                    phantom.debug('[+] Match Found (Whitelisted URL) - Will NOT be added - Finished Checking {}'.format(requestURL))\n                    ignoredArtifacts.append(artifact['requestURL'])\n                    willIgnore = 1\n                    break\n\n            # Do not check anymore - this URL will NOT be processed down the line        \n            if willIgnore == 1:\n                continue\n\n            if willIgnore == 0:\n                phantom.debug('[+] No Match found in the whitelisted URLS for: {}'.format(requestURL))\n                \n            # Now check the top500 list and ignore if found here.\n            phantom.debug('[+] Checking top500 Loop for requestURL: {}'.format(requestURL))\n            for top500url in top500urls:\n                str=top500url[0]\n                if str == None:\n                    continue\n                    \n                if re.search(requestURL, str):\n                    phantom.debug('[+] Match Found (top 500 Domain) - Will NOT be added - Finished Checking {}'.format(requestURL))\n                    ignoredArtifacts.append(artifact['requestURL'])\n                    willIgnore = 1\n                    break\n\n            if willIgnore == 0:\n                nonMatchedArtifacts.append(artifact['requestURL'])\n                phantom.debug('adding {} to the list'.format(artifact['requestURL']))\n\n    phantom.debug('finished with: {}'.format(nonMatchedArtifacts))\n    FilterNoisyURLs__requestURLsforExternalLookup = nonMatchedArtifacts\n    FilterNoisyURLs__numURLs = len(nonMatchedArtifacts)\n    FilterNoisyURLs__removedURLs = ignoredArtifacts\n    phantom.debug('Ignored URLs: {}'.format(FilterNoisyURLs__removedURLs))\n    phantom.debug('Passing out : {} URLs'.format(FilterNoisyURLs__numURLs))\n\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n\n    phantom.save_run_data(key='FilterNoisyURLs:requestURLsforExternalLookup', value=json.dumps(FilterNoisyURLs__requestURLsforExternalLookup))\n    phantom.save_run_data(key='FilterNoisyURLs:numURLs', value=json.dumps(FilterNoisyURLs__numURLs))\n    phantom.save_run_data(key='FilterNoisyURLs:removedURLs', value=json.dumps(FilterNoisyURLs__removedURLs))\n    decision_9(container=container)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "",
                        "connection_type": "",
                        "customCodeEndLineOffset": 9,
                        "customCodeStartLine": 12,
                        "custom_callback": "",
                        "custom_code": "def FilterNoisyURLs(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None):\n    phantom.debug('FilterNoisyURLs() called')\n    filtered_artifacts_data_1 = phantom.collect2(container=container, datapath=['filtered-data:filter_Indicators:condition_1:artifact:*.cef'])\n    filtered_artifacts_item_1_0 = [item[0] for item in filtered_artifacts_data_1]\n\n    FilterNoisyURLs__requestURLsforExternalLookup = None\n    FilterNoisyURLs__numURLs = None\n    FilterNoisyURLs__removedURLs = None\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n\n    # Write your custom code here...\n    nonMatchedArtifacts = []\n    ignoredArtifacts = []\n    phantom.debug(filtered_artifacts_item_1_0)\n    import re\n    from urllib.parse import urlparse\n    success_wlist, message, urls = phantom.get_list(list_name='whitelisted_urls')\n    success_top500, message, top500urls = phantom.get_list(list_name='top500')\n\n    if success_wlist and success_top500:\n        for artifact in filtered_artifacts_item_1_0:\n            phantom.debug('Processing Artifact: {}'.format(artifact))\n            requestURL = urlparse(artifact['requestURL']).netloc\n            phantom.debug('requestURL before you fuck with it: {}'.format(requestURL))\n            if re.match('www\\.', requestURL):\n                requestURL = '.'.join(requestURL.split('.')[1:])\n                \n            phantom.debug('requestURL after you fuck with it: {}'.format(requestURL))\n            isNotInCustomList = 0\n            willIgnore = 0\n            \n            # Check if the domain is in the whitelisted URLs list - Ignore if so\n            for url in urls:\n                str=url[0]\n                if str == None:\n                    continue\n                \n                if re.search(requestURL, str):\n                    #phantom.debug('matching URL found: {} against {}'.format(requestURL,str))\n                    phantom.debug('[+] Match Found (Whitelisted URL) - Will NOT be added - Finished Checking {}'.format(requestURL))\n                    ignoredArtifacts.append(artifact['requestURL'])\n                    willIgnore = 1\n                    break\n\n            # Do not check anymore - this URL will NOT be processed down the line        \n            if willIgnore == 1:\n                continue\n\n            if willIgnore == 0:\n                phantom.debug('[+] No Match found in the whitelisted URLS for: {}'.format(requestURL))\n                \n            # Now check the top500 list and ignore if found here.\n            phantom.debug('[+] Checking top500 Loop for requestURL: {}'.format(requestURL))\n            for top500url in top500urls:\n                str=top500url[0]\n                if str == None:\n                    continue\n                    \n                if re.search(requestURL, str):\n                    phantom.debug('[+] Match Found (top 500 Domain) - Will NOT be added - Finished Checking {}'.format(requestURL))\n                    ignoredArtifacts.append(artifact['requestURL'])\n                    willIgnore = 1\n                    break\n\n            if willIgnore == 0:\n                nonMatchedArtifacts.append(artifact['requestURL'])\n                phantom.debug('adding {} to the list'.format(artifact['requestURL']))\n\n    phantom.debug('finished with: {}'.format(nonMatchedArtifacts))\n    FilterNoisyURLs__requestURLsforExternalLookup = nonMatchedArtifacts\n    FilterNoisyURLs__numURLs = len(nonMatchedArtifacts)\n    FilterNoisyURLs__removedURLs = ignoredArtifacts\n    phantom.debug('Ignored URLs: {}'.format(FilterNoisyURLs__removedURLs))\n    phantom.debug('Passing out : {} URLs'.format(FilterNoisyURLs__numURLs))\n\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n\n    phantom.save_run_data(key='FilterNoisyURLs:requestURLsforExternalLookup', value=json.dumps(FilterNoisyURLs__requestURLsforExternalLookup))\n    phantom.save_run_data(key='FilterNoisyURLs:numURLs', value=json.dumps(FilterNoisyURLs__numURLs))\n    phantom.save_run_data(key='FilterNoisyURLs:removedURLs', value=json.dumps(FilterNoisyURLs__removedURLs))\n    decision_9(container=container)\n\n    return",
                        "custom_join": "",
                        "custom_name": "FilterNoisyURLs",
                        "description": "Step through the top500 & whitelisted_urls custom list and remove any URLs found in there.",
                        "functionBlock": "custom function",
                        "has_custom": true,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "19f6ee78-c324-4559-b3d2-dfd845bce128",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "legacy": true,
                        "line_end": 274,
                        "line_start": 185,
                        "message": "Configuring now",
                        "name": "custom function",
                        "notes": "Step through the top500 & whitelisted_urls custom list and remove any URLs found in there.",
                        "number": 9,
                        "order": 9,
                        "outPorts": [
                            "out"
                        ],
                        "outputVariables": [
                            {
                                "position": 0,
                                "type": "",
                                "value": "requestURLsforExternalLookup"
                            },
                            {
                                "position": 1,
                                "type": "",
                                "value": "numURLs"
                            },
                            {
                                "position": 2,
                                "type": "",
                                "value": "removedURLs"
                            }
                        ],
                        "parameters": [
                            {
                                "position": 0,
                                "type": "",
                                "value": "filtered-data:filter_Indicators:condition_1:artifact:*.cef"
                            }
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": -140,
                            "y": 0
                        },
                        "previous_function": "",
                        "previous_name": "FilterNoisyURLs",
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "custom function",
                        "status": "deprecating",
                        "title": "custom function",
                        "type": "coa.FunctionBlock",
                        "userGeneratedCode": "\n    # Write your custom code here...\n    nonMatchedArtifacts = []\n    ignoredArtifacts = []\n    phantom.debug(filtered_artifacts_item_1_0)\n    import re\n    from urllib.parse import urlparse\n    success_wlist, message, urls = phantom.get_list(list_name='whitelisted_urls')\n    success_top500, message, top500urls = phantom.get_list(list_name='top500')\n\n    if success_wlist and success_top500:\n        for artifact in filtered_artifacts_item_1_0:\n            phantom.debug('Processing Artifact: {}'.format(artifact))\n            requestURL = urlparse(artifact['requestURL']).netloc\n            phantom.debug('requestURL before you fuck with it: {}'.format(requestURL))\n            if re.match('www\\.', requestURL):\n                requestURL = '.'.join(requestURL.split('.')[1:])\n                \n            phantom.debug('requestURL after you fuck with it: {}'.format(requestURL))\n            isNotInCustomList = 0\n            willIgnore = 0\n            \n            # Check if the domain is in the whitelisted URLs list - Ignore if so\n            for url in urls:\n                str=url[0]\n                if str == None:\n                    continue\n                \n                if re.search(requestURL, str):\n                    #phantom.debug('matching URL found: {} against {}'.format(requestURL,str))\n                    phantom.debug('[+] Match Found (Whitelisted URL) - Will NOT be added - Finished Checking {}'.format(requestURL))\n                    ignoredArtifacts.append(artifact['requestURL'])\n                    willIgnore = 1\n                    break\n\n            # Do not check anymore - this URL will NOT be processed down the line        \n            if willIgnore == 1:\n                continue\n\n            if willIgnore == 0:\n                phantom.debug('[+] No Match found in the whitelisted URLS for: {}'.format(requestURL))\n                \n            # Now check the top500 list and ignore if found here.\n            phantom.debug('[+] Checking top500 Loop for requestURL: {}'.format(requestURL))\n            for top500url in top500urls:\n                str=top500url[0]\n                if str == None:\n                    continue\n                    \n                if re.search(requestURL, str):\n                    phantom.debug('[+] Match Found (top 500 Domain) - Will NOT be added - Finished Checking {}'.format(requestURL))\n                    ignoredArtifacts.append(artifact['requestURL'])\n                    willIgnore = 1\n                    break\n\n            if willIgnore == 0:\n                nonMatchedArtifacts.append(artifact['requestURL'])\n                phantom.debug('adding {} to the list'.format(artifact['requestURL']))\n\n    phantom.debug('finished with: {}'.format(nonMatchedArtifacts))\n    FilterNoisyURLs__requestURLsforExternalLookup = nonMatchedArtifacts\n    FilterNoisyURLs__numURLs = len(nonMatchedArtifacts)\n    FilterNoisyURLs__removedURLs = ignoredArtifacts\n    phantom.debug('Ignored URLs: {}'.format(FilterNoisyURLs__removedURLs))\n    phantom.debug('Passing out : {} URLs'.format(FilterNoisyURLs__numURLs))\n\n",
                        "warn": false,
                        "z": 391
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "ca68a7ad-7dc9-45c2-9eab-fc72da366d8d",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "94f8c327-7f57-4be9-be22-b307adc8bbe3",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "2abd219b-7b7c-4f74-9704-da66812413eb",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 393
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "ace7db77-6f93-4ffb-93fb-7145e8e8f1c2",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "2abd219b-7b7c-4f74-9704-da66812413eb",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "6342db74-e3c4-42fb-bfa9-74f64061c314",
                            "port": "in",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 394
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "10ab55bf-e57a-4797-90b6-cedc54c6febb",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "1dadb27c-e8b7-4196-8589-4da62781ee60",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "94f8c327-7f57-4be9-be22-b307adc8bbe3",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 401
                    },
                    {
                        "action": "detonate url",
                        "action_type": "investigate",
                        "active": false,
                        "active_keys": {},
                        "active_values": {
                            "private": "False",
                            "url": "FilterNoisyURLs:custom_function:requestURLsforExternalLookup"
                        },
                        "angle": 0,
                        "app": "urlscan.io",
                        "appid": "c46c00cd-7231-4dd3-8d8e-02b9fa0e14a2",
                        "approver": "",
                        "assets": [
                            {
                                "action": "detonate url",
                                "actions": [
                                    "detonate url",
                                    "lookup ip",
                                    "lookup domain",
                                    "get report",
                                    "test connectivity"
                                ],
                                "active": true,
                                "app_name": "urlscan.io",
                                "app_version": "1.0.7",
                                "appid": "c46c00cd-7231-4dd3-8d8e-02b9fa0e14a2",
                                "asset_name": "urlscan",
                                "config_type": "asset",
                                "count": 0,
                                "fields": {
                                    "private": "False",
                                    "url": "FilterNoisyURLs:custom_function:requestURLsforExternalLookup"
                                },
                                "has_app": true,
                                "id": 25,
                                "loaded": false,
                                "missing": false,
                                "name": "urlscan",
                                "output": [
                                    {
                                        "contains": [
                                            "url",
                                            "domain"
                                        ],
                                        "data_path": "action_result.parameter.url",
                                        "data_type": "string",
                                        "example_values": [
                                            "http://www.yahoo.com"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.parameter.private",
                                        "data_type": "boolean",
                                        "example_values": [
                                            true,
                                            false
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.status",
                                        "data_type": "string",
                                        "example_values": [
                                            "success"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.message",
                                        "data_type": "string",
                                        "example_values": [
                                            "Important data: value"
                                        ]
                                    },
                                    {
                                        "data_path": "summary.total_objects",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1
                                        ]
                                    },
                                    {
                                        "data_path": "summary.total_objects_successful",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "url"
                                        ],
                                        "data_path": "action_result.data.*.task.domURL",
                                        "data_type": "string",
                                        "example_values": [
                                            "https://urlscan.io/dom/f04f2a29-d455-4830-874a-88191fb79352/"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "url"
                                        ],
                                        "data_path": "action_result.data.*.task.screenshotURL",
                                        "data_type": "string",
                                        "example_values": [
                                            "https://urlscan.io/screenshots/f04f2a29-d455-4830-874a-88191fb79352.png"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "urlscan submission id"
                                        ],
                                        "data_path": "action_result.data.*.task.uuid",
                                        "data_type": "string",
                                        "example_values": [
                                            "f04f2a29-d455-4830-874a-88191fb79352"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "url"
                                        ],
                                        "data_path": "action_result.data.*.task.url",
                                        "data_type": "string",
                                        "example_values": [
                                            "http://netismi.com/images/guffiaa.pne"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.task.visibility",
                                        "data_type": "string",
                                        "example_values": [
                                            "public"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.task.method",
                                        "data_type": "string",
                                        "example_values": [
                                            "api"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.task.source",
                                        "data_type": "string",
                                        "example_values": [
                                            "4b0fb6d4"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.task.time",
                                        "data_type": "string",
                                        "example_values": [
                                            "2017-08-07T19:13:17.870Z"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "url"
                                        ],
                                        "data_path": "action_result.data.*.task.reportURL",
                                        "data_type": "string",
                                        "example_values": [
                                            "https://urlscan.io/result/f04f2a29-d455-4830-874a-88191fb79352/"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.stats.malicious",
                                        "data_type": "numeric",
                                        "example_values": [
                                            0
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.stats.ipStats.*.index",
                                        "data_type": "numeric",
                                        "example_values": [
                                            0
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.stats.ipStats.*.countries",
                                        "data_type": "string",
                                        "example_values": [
                                            "IE"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "ip"
                                        ],
                                        "data_path": "action_result.data.*.stats.ipStats.*.ip",
                                        "data_type": "string",
                                        "example_values": [
                                            "46.20.14.51"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.stats.ipStats.*.encodedSize",
                                        "data_type": "numeric",
                                        "example_values": [
                                            2042170
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.stats.ipStats.*.ipv6",
                                        "data_type": "boolean",
                                        "example_values": [
                                            true,
                                            false
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.stats.ipStats.*.geoip.city",
                                        "data_type": "string",
                                        "example_values": [
                                            "Bursa"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.stats.ipStats.*.geoip.zip",
                                        "data_type": "numeric",
                                        "example_values": [
                                            16245
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.stats.ipStats.*.geoip.metro",
                                        "data_type": "numeric",
                                        "example_values": [
                                            0
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.stats.ipStats.*.geoip.country",
                                        "data_type": "string",
                                        "example_values": [
                                            "TR"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.stats.ipStats.*.geoip.region",
                                        "data_type": "string",
                                        "example_values": [
                                            "16"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.stats.ipStats.*.geoip.range",
                                        "data_type": "numeric",
                                        "example_values": [
                                            773066751
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.stats.ipStats.*.geoip.country_name",
                                        "data_type": "string",
                                        "example_values": [
                                            "Turkey"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.stats.ipStats.*.geoip.ll",
                                        "data_type": "numeric",
                                        "example_values": [
                                            -8
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.stats.ipStats.*.domains",
                                        "data_type": "string",
                                        "example_values": [
                                            "www.facebook.com"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.stats.ipStats.*.requests",
                                        "data_type": "numeric",
                                        "example_values": [
                                            55
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.stats.ipStats.*.size",
                                        "data_type": "numeric",
                                        "example_values": [
                                            2410398
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.stats.ipStats.*.asn.name",
                                        "data_type": "string",
                                        "example_values": [
                                            "DGN"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "ip"
                                        ],
                                        "data_path": "action_result.data.*.stats.ipStats.*.asn.ip",
                                        "data_type": "string",
                                        "example_values": [
                                            "46.20.14.51"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.stats.ipStats.*.asn.registrar",
                                        "data_type": "string",
                                        "example_values": [
                                            "ripencc"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.stats.ipStats.*.asn.country",
                                        "data_type": "string",
                                        "example_values": [
                                            "TR"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.stats.ipStats.*.asn.date",
                                        "data_type": "string",
                                        "example_values": [
                                            "2007-07-04"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.stats.ipStats.*.asn.asn",
                                        "data_type": "string",
                                        "example_values": [
                                            "43260"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.stats.ipStats.*.asn.description",
                                        "data_type": "string",
                                        "example_values": [
                                            "DGN, TR"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "ip"
                                        ],
                                        "data_path": "action_result.data.*.stats.ipStats.*.rdns.ip",
                                        "data_type": "string",
                                        "example_values": [
                                            "46.20.14.51"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.stats.ipStats.*.rdns.ptr",
                                        "data_type": "string",
                                        "example_values": [
                                            "ns1.netismi.net"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.stats.ipStats.*.geoip.range.*",
                                        "data_type": "numeric",
                                        "example_values": [
                                            4294967295
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.stats.serverStats.*.count",
                                        "data_type": "numeric",
                                        "example_values": [
                                            55
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.stats.serverStats.*.countries",
                                        "data_type": "string",
                                        "example_values": [
                                            "IE"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.stats.serverStats.*.encodedSize",
                                        "data_type": "numeric",
                                        "example_values": [
                                            2042170
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.stats.serverStats.*.server",
                                        "data_type": "string",
                                        "example_values": [
                                            "Apache/2"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.stats.serverStats.*.ips",
                                        "data_type": "string",
                                        "example_values": [
                                            "[2a00:1450:4001:825::200e]"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.stats.serverStats.*.size",
                                        "data_type": "numeric",
                                        "example_values": [
                                            2410398
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.stats.uniqCountries",
                                        "data_type": "numeric",
                                        "example_values": [
                                            2
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.stats.totalLinks",
                                        "data_type": "numeric",
                                        "example_values": [
                                            4
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.stats.tlsStats.*.count",
                                        "data_type": "numeric",
                                        "example_values": [
                                            55
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.stats.tlsStats.*.securityState",
                                        "data_type": "string",
                                        "example_values": [
                                            "neutral"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.stats.tlsStats.*.countries",
                                        "data_type": "string",
                                        "example_values": [
                                            "IE"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.stats.tlsStats.*.encodedSize",
                                        "data_type": "numeric",
                                        "example_values": [
                                            2042170
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.stats.tlsStats.*.ips",
                                        "data_type": "string",
                                        "example_values": [
                                            "[2a03:2880:f11c:8183:face:b00c:0:25de]"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.stats.tlsStats.*.size",
                                        "data_type": "numeric",
                                        "example_values": [
                                            2410398
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.stats.tlsStats.*.protocols.TLS 1.2 / ECDHE_RSA / AES_128_GCM",
                                        "data_type": "numeric",
                                        "example_values": [
                                            5
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.stats.tlsStats.*.protocols.TLS 1.2 / ECDHE_ECDSA / AES_128_GCM",
                                        "data_type": "numeric",
                                        "example_values": [
                                            2
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.stats.adBlocked",
                                        "data_type": "numeric",
                                        "example_values": [
                                            2
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.stats.secureRequests",
                                        "data_type": "numeric",
                                        "example_values": [
                                            7
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.stats.domainStats.*.count",
                                        "data_type": "numeric",
                                        "example_values": [
                                            55
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.stats.domainStats.*.index",
                                        "data_type": "numeric",
                                        "example_values": [
                                            0
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "domain"
                                        ],
                                        "data_path": "action_result.data.*.stats.domainStats.*.domain",
                                        "data_type": "string",
                                        "example_values": [
                                            "www.netismi.com"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.stats.domainStats.*.countries",
                                        "data_type": "string",
                                        "example_values": [
                                            "IE"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.stats.domainStats.*.encodedSize",
                                        "data_type": "numeric",
                                        "example_values": [
                                            2042170
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.stats.domainStats.*.ips",
                                        "data_type": "string",
                                        "example_values": [
                                            "[2a03:2880:f006:21:face:b00c:0:3]"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.stats.domainStats.*.initiators",
                                        "data_type": "string",
                                        "example_values": [
                                            "apis.google.com"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.stats.domainStats.*.size",
                                        "data_type": "numeric",
                                        "example_values": [
                                            2410398
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.stats.regDomainStats.*.count",
                                        "data_type": "numeric",
                                        "example_values": [
                                            55
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.stats.regDomainStats.*.index",
                                        "data_type": "numeric",
                                        "example_values": [
                                            0
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "domain"
                                        ],
                                        "data_path": "action_result.data.*.stats.regDomainStats.*.regDomain",
                                        "data_type": "string",
                                        "example_values": [
                                            "netismi.com"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.stats.regDomainStats.*.encodedSize",
                                        "data_type": "numeric",
                                        "example_values": [
                                            2042170
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.stats.regDomainStats.*.ips",
                                        "data_type": "string",
                                        "example_values": [
                                            "[2a03:2880:f006:21:face:b00c:0:3]"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.stats.regDomainStats.*.size",
                                        "data_type": "numeric",
                                        "example_values": [
                                            2410398
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.stats.regDomainStats.*.subDomains.*.failed",
                                        "data_type": "boolean",
                                        "example_values": [
                                            true,
                                            false
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "domain"
                                        ],
                                        "data_path": "action_result.data.*.stats.regDomainStats.*.subDomains.*.domain",
                                        "data_type": "string",
                                        "example_values": [
                                            "apis"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.stats.protocolStats.*.count",
                                        "data_type": "numeric",
                                        "example_values": [
                                            55
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "url"
                                        ],
                                        "data_path": "action_result.data.*.stats.protocolStats.*.protocol",
                                        "data_type": "string",
                                        "example_values": [
                                            "http/1.1"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.stats.protocolStats.*.countries",
                                        "data_type": "string",
                                        "example_values": [
                                            "IE"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.stats.protocolStats.*.encodedSize",
                                        "data_type": "numeric",
                                        "example_values": [
                                            2042170
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.stats.protocolStats.*.ips",
                                        "data_type": "string",
                                        "example_values": [
                                            "[2a03:2880:f11c:8183:face:b00c:0:25de]"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.stats.protocolStats.*.size",
                                        "data_type": "numeric",
                                        "example_values": [
                                            2410398
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.stats.securePercentage",
                                        "data_type": "numeric",
                                        "example_values": [
                                            10
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.stats.resourceStats.*.count",
                                        "data_type": "numeric",
                                        "example_values": [
                                            40
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.stats.resourceStats.*.latency",
                                        "data_type": "numeric",
                                        "example_values": [
                                            0
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.stats.resourceStats.*.compression",
                                        "data_type": "string",
                                        "example_values": [
                                            "1.0"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.stats.resourceStats.*.countries",
                                        "data_type": "string",
                                        "example_values": [
                                            "TR"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.stats.resourceStats.*.encodedSize",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1876966
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "ip"
                                        ],
                                        "data_path": "action_result.data.*.stats.resourceStats.*.ips",
                                        "data_type": "string",
                                        "example_values": [
                                            "46.20.14.51"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.stats.resourceStats.*.percentage",
                                        "data_type": "numeric",
                                        "example_values": [
                                            59
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.stats.resourceStats.*.type",
                                        "data_type": "string",
                                        "example_values": [
                                            "Image"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.stats.resourceStats.*.size",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1876925
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.stats.IPv6Percentage",
                                        "data_type": "numeric",
                                        "example_values": [
                                            75
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.lists.linkDomains",
                                        "data_type": "string",
                                        "example_values": [
                                            "twitter.com"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.lists.countries",
                                        "data_type": "string",
                                        "example_values": [
                                            "IE"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.lists.asns",
                                        "data_type": "string",
                                        "example_values": [
                                            "32934"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.lists.servers",
                                        "data_type": "string",
                                        "example_values": [
                                            "ESF"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.lists.ips",
                                        "data_type": "string",
                                        "example_values": [
                                            "2a03:2880:f11c:8183:face:b00c:0:25de"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "url"
                                        ],
                                        "data_path": "action_result.data.*.lists.urls",
                                        "data_type": "string",
                                        "example_values": [
                                            "https://www.facebook.com/impression.php/f2eb6050995a7f4/?lid=115&payload=%7B%22source%22%3A%22jssdk%22%7D"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.lists.domains",
                                        "data_type": "string",
                                        "example_values": [
                                            "accounts.google.com"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "sha256"
                                        ],
                                        "data_path": "action_result.data.*.lists.hashes",
                                        "data_type": "string",
                                        "example_values": [
                                            "548f2d6f4d0d820c6c5ffbeffcbd7f0e73193e2932eefe542accc84762deec87"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.lists.certificates.*.validTo",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1508228880
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.lists.certificates.*.validFrom",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1500972335
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.lists.certificates.*.sanList",
                                        "data_type": "string",
                                        "example_values": [
                                            "messenger.com"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.lists.certificates.*.subjectName",
                                        "data_type": "string",
                                        "example_values": [
                                            "*.apis.google.com"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.lists.certificates.*.issuer",
                                        "data_type": "string",
                                        "example_values": [
                                            "Google Internet Authority G2"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.meta.processors.cdnjs.state",
                                        "data_type": "string",
                                        "example_values": [
                                            "done"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.meta.processors.cdnjs.data.*.matches",
                                        "data_type": "string",
                                        "example_values": [
                                            "ckeditor/4.2/plugins/fakeobjects/images/spacer.gif"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "sha256"
                                        ],
                                        "data_path": "action_result.data.*.meta.processors.cdnjs.data.*.hash",
                                        "data_type": "string",
                                        "example_values": [
                                            "900b8e0052d80e532dcdca466e31b30d4f8eea58992ed9ff2b253d7d5346c811"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.meta.processors.geoip.state",
                                        "data_type": "string",
                                        "example_values": [
                                            "done"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "ip"
                                        ],
                                        "data_path": "action_result.data.*.meta.processors.geoip.data.*.ip",
                                        "data_type": "string",
                                        "example_values": [
                                            "46.20.14.51"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.meta.processors.geoip.data.*.geoip.city",
                                        "data_type": "string",
                                        "example_values": [
                                            "Bursa"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.meta.processors.geoip.data.*.geoip.zip",
                                        "data_type": "numeric",
                                        "example_values": [
                                            16245
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.meta.processors.geoip.data.*.geoip.metro",
                                        "data_type": "numeric",
                                        "example_values": [
                                            0
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.meta.processors.geoip.data.*.geoip.country",
                                        "data_type": "string",
                                        "example_values": [
                                            "TR"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.meta.processors.geoip.data.*.geoip.region",
                                        "data_type": "string",
                                        "example_values": [
                                            "16"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.meta.processors.geoip.data.*.geoip.range",
                                        "data_type": "numeric",
                                        "example_values": [
                                            773066751
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.meta.processors.geoip.data.*.geoip.country_name",
                                        "data_type": "string",
                                        "example_values": [
                                            "Turkey"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.meta.processors.geoip.data.*.geoip.ll",
                                        "data_type": "numeric",
                                        "example_values": [
                                            -8
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.meta.processors.geoip.data.*.geoip.range.*",
                                        "data_type": "numeric",
                                        "example_values": [
                                            4294967295
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.meta.processors.abp.state",
                                        "data_type": "string",
                                        "example_values": [
                                            "done"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "url"
                                        ],
                                        "data_path": "action_result.data.*.meta.processors.abp.data.*.url",
                                        "data_type": "string",
                                        "example_values": [
                                            "http://www.netismi.com/images/bursa-web-tasarimi/rss.png"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.meta.processors.abp.data.*.source",
                                        "data_type": "string",
                                        "example_values": [
                                            "easylist"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.meta.processors.abp.data.*.type",
                                        "data_type": "string",
                                        "example_values": [
                                            "annoyance"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.meta.processors.gsb.state",
                                        "data_type": "string",
                                        "example_values": [
                                            "done"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.meta.processors.done.state",
                                        "data_type": "string",
                                        "example_values": [
                                            "done"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.meta.processors.done.data.state",
                                        "data_type": "string",
                                        "example_values": [
                                            "done"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.meta.processors.asn.state",
                                        "data_type": "string",
                                        "example_values": [
                                            "done"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.meta.processors.asn.data.*.name",
                                        "data_type": "string",
                                        "example_values": [
                                            "DGN"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "ip"
                                        ],
                                        "data_path": "action_result.data.*.meta.processors.asn.data.*.ip",
                                        "data_type": "string",
                                        "example_values": [
                                            "46.20.14.51"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.meta.processors.asn.data.*.registrar",
                                        "data_type": "string",
                                        "example_values": [
                                            "ripencc"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.meta.processors.asn.data.*.country",
                                        "data_type": "string",
                                        "example_values": [
                                            "TR"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.meta.processors.asn.data.*.date",
                                        "data_type": "string",
                                        "example_values": [
                                            "2007-07-04"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.meta.processors.asn.data.*.asn",
                                        "data_type": "string",
                                        "example_values": [
                                            "43260"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.meta.processors.asn.data.*.description",
                                        "data_type": "string",
                                        "example_values": [
                                            "DGN, TR"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.meta.processors.rdns.state",
                                        "data_type": "string",
                                        "example_values": [
                                            "done"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "ip"
                                        ],
                                        "data_path": "action_result.data.*.meta.processors.rdns.data.*.ip",
                                        "data_type": "string",
                                        "example_values": [
                                            "46.20.14.51"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.meta.processors.rdns.data.*.ptr",
                                        "data_type": "string",
                                        "example_values": [
                                            "ns1.netismi.net"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.timing.loadEventFired",
                                        "data_type": "string",
                                        "example_values": [
                                            "2017-08-07T19:13:19.897Z"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.timing.frameNavigated",
                                        "data_type": "string",
                                        "example_values": [
                                            "2017-08-07T19:13:19.897Z"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.timing.frameStartedLoading",
                                        "data_type": "string",
                                        "example_values": [
                                            "2017-08-07T19:13:19.902Z"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.timing.frameStoppedLoading",
                                        "data_type": "string",
                                        "example_values": [
                                            "2017-08-07T19:13:20.116Z"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.timing.beginNavigation",
                                        "data_type": "string",
                                        "example_values": [
                                            "2017-08-07T19:13:17.987Z"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.timing.domContentEventFired",
                                        "data_type": "string",
                                        "example_values": [
                                            "2017-08-07T19:13:19.165Z"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "domain"
                                        ],
                                        "data_path": "action_result.data.*.data.cookies.*.domain",
                                        "data_type": "string",
                                        "example_values": [
                                            ".netismi.com"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.cookies.*.secure",
                                        "data_type": "boolean",
                                        "example_values": [
                                            true,
                                            false
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.cookies.*.expires",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1517901199000
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.cookies.*.value",
                                        "data_type": "string",
                                        "example_values": [
                                            "215733128.1502133199.1.1.utmcsr=(direct)|utmccn=(direct)|utmcmd=(none)"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.cookies.*.name",
                                        "data_type": "string",
                                        "example_values": [
                                            "__utmz"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.cookies.*.session",
                                        "data_type": "boolean",
                                        "example_values": [
                                            true,
                                            false
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.cookies.*.path",
                                        "data_type": "string",
                                        "example_values": [
                                            "/"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.cookies.*.httpOnly",
                                        "data_type": "boolean",
                                        "example_values": [
                                            true,
                                            false
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.cookies.*.size",
                                        "data_type": "numeric",
                                        "example_values": [
                                            76
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.requests.*.request.initiator.type",
                                        "data_type": "string",
                                        "example_values": [
                                            "other"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "url"
                                        ],
                                        "data_path": "action_result.data.*.data.requests.*.request.documentURL",
                                        "data_type": "string",
                                        "example_values": [
                                            "http://www.netismi.com/images/guffiaa.pne"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.requests.*.request.timestamp",
                                        "data_type": "numeric",
                                        "example_values": [
                                            25061896.019653
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "url"
                                        ],
                                        "data_path": "action_result.data.*.data.requests.*.request.request.url",
                                        "data_type": "string",
                                        "example_values": [
                                            "http://www.netismi.com/"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.requests.*.request.request.referrerPolicy",
                                        "data_type": "string",
                                        "example_values": [
                                            "no-referrer-when-downgrade"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.requests.*.request.request.headers.User-Agent",
                                        "data_type": "string",
                                        "example_values": [
                                            "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) HeadlessChrome/59.0.3071.115 Safari/537.36"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.requests.*.request.request.mixedContentType",
                                        "data_type": "string",
                                        "example_values": [
                                            "none"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.requests.*.request.request.initialPriority",
                                        "data_type": "string",
                                        "example_values": [
                                            "VeryHigh"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.requests.*.request.request.method",
                                        "data_type": "string",
                                        "example_values": [
                                            "GET"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.requests.*.request.redirectResponse.status",
                                        "data_type": "numeric",
                                        "example_values": [
                                            302
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.requests.*.request.redirectResponse.mimeType",
                                        "data_type": "string",
                                        "example_values": [
                                            "text/html"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "url"
                                        ],
                                        "data_path": "action_result.data.*.data.requests.*.request.redirectResponse.protocol",
                                        "data_type": "string",
                                        "example_values": [
                                            "http/1.1"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.requests.*.request.redirectResponse.remotePort",
                                        "data_type": "numeric",
                                        "example_values": [
                                            80
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "url"
                                        ],
                                        "data_path": "action_result.data.*.data.requests.*.request.redirectResponse.url",
                                        "data_type": "string",
                                        "example_values": [
                                            "http://www.netismi.com/images/guffiaa.pne"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.requests.*.request.redirectResponse.statusText",
                                        "data_type": "string",
                                        "example_values": [
                                            "Found"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.requests.*.request.redirectResponse.encodedDataLength",
                                        "data_type": "numeric",
                                        "example_values": [
                                            233
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.requests.*.request.redirectResponse.timing.pushStart",
                                        "data_type": "numeric",
                                        "example_values": [
                                            0
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.requests.*.request.redirectResponse.timing.dnsEnd",
                                        "data_type": "numeric",
                                        "example_values": [
                                            0.484999269247055
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.requests.*.request.redirectResponse.timing.requestTime",
                                        "data_type": "numeric",
                                        "example_values": [
                                            25061895.849275
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.requests.*.request.redirectResponse.timing.sslEnd",
                                        "data_type": "numeric",
                                        "example_values": [
                                            -1
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.requests.*.request.redirectResponse.timing.sendEnd",
                                        "data_type": "numeric",
                                        "example_values": [
                                            84.9450007081032
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.requests.*.request.redirectResponse.timing.connectEnd",
                                        "data_type": "numeric",
                                        "example_values": [
                                            84.8650000989437
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.requests.*.request.redirectResponse.timing.proxyStart",
                                        "data_type": "numeric",
                                        "example_values": [
                                            -1
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.requests.*.request.redirectResponse.timing.workerStart",
                                        "data_type": "numeric",
                                        "example_values": [
                                            -1
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.requests.*.request.redirectResponse.timing.receiveHeadersEnd",
                                        "data_type": "numeric",
                                        "example_values": [
                                            170.065999031067
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.requests.*.request.redirectResponse.timing.pushEnd",
                                        "data_type": "numeric",
                                        "example_values": [
                                            0
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.requests.*.request.redirectResponse.timing.sendStart",
                                        "data_type": "numeric",
                                        "example_values": [
                                            84.9259980022907
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.requests.*.request.redirectResponse.timing.workerReady",
                                        "data_type": "numeric",
                                        "example_values": [
                                            -1
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.requests.*.request.redirectResponse.timing.sslStart",
                                        "data_type": "numeric",
                                        "example_values": [
                                            -1
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.requests.*.request.redirectResponse.timing.proxyEnd",
                                        "data_type": "numeric",
                                        "example_values": [
                                            -1
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.requests.*.request.redirectResponse.timing.connectStart",
                                        "data_type": "numeric",
                                        "example_values": [
                                            0.484999269247055
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.requests.*.request.redirectResponse.timing.dnsStart",
                                        "data_type": "numeric",
                                        "example_values": [
                                            0.0520013272762299
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.requests.*.request.redirectResponse.headers.Content-Length",
                                        "data_type": "string",
                                        "example_values": [
                                            "273"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.requests.*.request.redirectResponse.headers.Keep-Alive",
                                        "data_type": "string",
                                        "example_values": [
                                            "timeout=1, max=100"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.requests.*.request.redirectResponse.headers.Server",
                                        "data_type": "string",
                                        "example_values": [
                                            "Apache/2"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.requests.*.request.redirectResponse.headers.Connection",
                                        "data_type": "string",
                                        "example_values": [
                                            "Keep-Alive"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "url"
                                        ],
                                        "data_path": "action_result.data.*.data.requests.*.request.redirectResponse.headers.Location",
                                        "data_type": "string",
                                        "example_values": [
                                            "http://www.netismi.com"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.requests.*.request.redirectResponse.headers.Date",
                                        "data_type": "string",
                                        "example_values": [
                                            "Mon, 07 Aug 2017 19:13:18 GMT"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.requests.*.request.redirectResponse.headers.Content-Type",
                                        "data_type": "string",
                                        "example_values": [
                                            "text/html; charset=iso-8859-1"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "ip"
                                        ],
                                        "data_path": "action_result.data.*.data.requests.*.request.redirectResponse.remoteIPAddress",
                                        "data_type": "string",
                                        "example_values": [
                                            "46.20.14.51"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.requests.*.request.redirectResponse.securityState",
                                        "data_type": "string",
                                        "example_values": [
                                            "neutral"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.requests.*.request.frameId",
                                        "data_type": "string",
                                        "example_values": [
                                            "24696.1"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.requests.*.request.requestId",
                                        "data_type": "string",
                                        "example_values": [
                                            "24696.1"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.requests.*.request.loaderId",
                                        "data_type": "string",
                                        "example_values": [
                                            "24696.1"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.requests.*.request.type",
                                        "data_type": "string",
                                        "example_values": [
                                            "Document"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.requests.*.request.wallTime",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1502133198.32155
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "sha256"
                                        ],
                                        "data_path": "action_result.data.*.data.requests.*.response.hash",
                                        "data_type": "string",
                                        "example_values": [
                                            "90e62949116352899d321b982d3c8dd6e269538d9832a82e86b6f08b10f54883"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.requests.*.response.geoip.city",
                                        "data_type": "string",
                                        "example_values": [
                                            "Bursa"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.requests.*.response.geoip.zip",
                                        "data_type": "numeric",
                                        "example_values": [
                                            16245
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.requests.*.response.geoip.metro",
                                        "data_type": "numeric",
                                        "example_values": [
                                            0
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.requests.*.response.geoip.country",
                                        "data_type": "string",
                                        "example_values": [
                                            "TR"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.requests.*.response.geoip.region",
                                        "data_type": "string",
                                        "example_values": [
                                            "16"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.requests.*.response.geoip.range",
                                        "data_type": "numeric",
                                        "example_values": [
                                            773066751
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.requests.*.response.geoip.country_name",
                                        "data_type": "string",
                                        "example_values": [
                                            "Turkey"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.requests.*.response.geoip.ll",
                                        "data_type": "numeric",
                                        "example_values": [
                                            -8
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.requests.*.response.encodedDataLength",
                                        "data_type": "numeric",
                                        "example_values": [
                                            10586
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.requests.*.response.asn.name",
                                        "data_type": "string",
                                        "example_values": [
                                            "DGN"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "ip"
                                        ],
                                        "data_path": "action_result.data.*.data.requests.*.response.asn.ip",
                                        "data_type": "string",
                                        "example_values": [
                                            "46.20.14.51"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.requests.*.response.asn.registrar",
                                        "data_type": "string",
                                        "example_values": [
                                            "ripencc"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.requests.*.response.asn.country",
                                        "data_type": "string",
                                        "example_values": [
                                            "TR"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.requests.*.response.asn.date",
                                        "data_type": "string",
                                        "example_values": [
                                            "2007-07-04"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.requests.*.response.asn.asn",
                                        "data_type": "string",
                                        "example_values": [
                                            "43260"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.requests.*.response.asn.description",
                                        "data_type": "string",
                                        "example_values": [
                                            "DGN, TR"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.requests.*.response.requestId",
                                        "data_type": "string",
                                        "example_values": [
                                            "24696.1"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.requests.*.response.dataLength",
                                        "data_type": "numeric",
                                        "example_values": [
                                            48900
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.requests.*.response.size",
                                        "data_type": "numeric",
                                        "example_values": [
                                            48900
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.requests.*.response.type",
                                        "data_type": "string",
                                        "example_values": [
                                            "Document"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.requests.*.response.response.status",
                                        "data_type": "numeric",
                                        "example_values": [
                                            200
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.requests.*.response.response.mimeType",
                                        "data_type": "string",
                                        "example_values": [
                                            "text/html"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "url"
                                        ],
                                        "data_path": "action_result.data.*.data.requests.*.response.response.protocol",
                                        "data_type": "string",
                                        "example_values": [
                                            "http/1.1"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.requests.*.response.response.remotePort",
                                        "data_type": "numeric",
                                        "example_values": [
                                            80
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "url"
                                        ],
                                        "data_path": "action_result.data.*.data.requests.*.response.response.url",
                                        "data_type": "string",
                                        "example_values": [
                                            "http://www.netismi.com/"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.requests.*.response.response.statusText",
                                        "data_type": "string",
                                        "example_values": [
                                            "OK"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.requests.*.response.response.encodedDataLength",
                                        "data_type": "numeric",
                                        "example_values": [
                                            261
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.requests.*.response.response.timing.pushStart",
                                        "data_type": "numeric",
                                        "example_values": [
                                            0
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.requests.*.response.response.timing.dnsEnd",
                                        "data_type": "numeric",
                                        "example_values": [
                                            -1
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.requests.*.response.response.timing.requestTime",
                                        "data_type": "numeric",
                                        "example_values": [
                                            25061896.019843
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.requests.*.response.response.timing.sslEnd",
                                        "data_type": "numeric",
                                        "example_values": [
                                            -1
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.requests.*.response.response.timing.sendEnd",
                                        "data_type": "numeric",
                                        "example_values": [
                                            0.0940002501010895
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.requests.*.response.response.timing.connectEnd",
                                        "data_type": "numeric",
                                        "example_values": [
                                            -1
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.requests.*.response.response.timing.proxyStart",
                                        "data_type": "numeric",
                                        "example_values": [
                                            -1
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.requests.*.response.response.timing.workerStart",
                                        "data_type": "numeric",
                                        "example_values": [
                                            -1
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.requests.*.response.response.timing.receiveHeadersEnd",
                                        "data_type": "numeric",
                                        "example_values": [
                                            229.759000241756
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.requests.*.response.response.timing.pushEnd",
                                        "data_type": "numeric",
                                        "example_values": [
                                            0
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.requests.*.response.response.timing.sendStart",
                                        "data_type": "numeric",
                                        "example_values": [
                                            0.0710003077983856
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.requests.*.response.response.timing.workerReady",
                                        "data_type": "numeric",
                                        "example_values": [
                                            -1
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.requests.*.response.response.timing.sslStart",
                                        "data_type": "numeric",
                                        "example_values": [
                                            -1
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.requests.*.response.response.timing.proxyEnd",
                                        "data_type": "numeric",
                                        "example_values": [
                                            -1
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.requests.*.response.response.timing.connectStart",
                                        "data_type": "numeric",
                                        "example_values": [
                                            -1
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.requests.*.response.response.timing.dnsStart",
                                        "data_type": "numeric",
                                        "example_values": [
                                            -1
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.requests.*.response.response.headers.Content-Length",
                                        "data_type": "string",
                                        "example_values": [
                                            "10586"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.requests.*.response.response.headers.Content-Encoding",
                                        "data_type": "string",
                                        "example_values": [
                                            "gzip"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.requests.*.response.response.headers.X-Powered-By",
                                        "data_type": "string",
                                        "example_values": [
                                            "PHP/5.2.17"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.requests.*.response.response.headers.Vary",
                                        "data_type": "string",
                                        "example_values": [
                                            "Accept-Encoding,User-Agent"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.requests.*.response.response.headers.Keep-Alive",
                                        "data_type": "string",
                                        "example_values": [
                                            "timeout=1, max=99"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.requests.*.response.response.headers.Server",
                                        "data_type": "string",
                                        "example_values": [
                                            "Apache/2"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.requests.*.response.response.headers.Connection",
                                        "data_type": "string",
                                        "example_values": [
                                            "Keep-Alive"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.requests.*.response.response.headers.Date",
                                        "data_type": "string",
                                        "example_values": [
                                            "Mon, 07 Aug 2017 19:13:18 GMT"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.requests.*.response.response.headers.Content-Type",
                                        "data_type": "string",
                                        "example_values": [
                                            "text/html"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "ip"
                                        ],
                                        "data_path": "action_result.data.*.data.requests.*.response.response.remoteIPAddress",
                                        "data_type": "string",
                                        "example_values": [
                                            "46.20.14.51"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.requests.*.response.response.securityState",
                                        "data_type": "string",
                                        "example_values": [
                                            "neutral"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "ip"
                                        ],
                                        "data_path": "action_result.data.*.data.requests.*.response.rdns.ip",
                                        "data_type": "string",
                                        "example_values": [
                                            "46.20.14.51"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.requests.*.response.rdns.ptr",
                                        "data_type": "string",
                                        "example_values": [
                                            "ns1.netismi.net"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "url"
                                        ],
                                        "data_path": "action_result.data.*.data.requests.*.request.initiator.url",
                                        "data_type": "string",
                                        "example_values": [
                                            "http://www.netismi.com/"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.requests.*.request.initiator.lineNumber",
                                        "data_type": "numeric",
                                        "example_values": [
                                            27
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "url"
                                        ],
                                        "data_path": "action_result.data.*.data.requests.*.request.request.headers.Referer",
                                        "data_type": "string",
                                        "example_values": [
                                            "http://www.netismi.com/"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.requests.*.response.response.headers.Accept-Ranges",
                                        "data_type": "string",
                                        "example_values": [
                                            "bytes"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.requests.*.response.response.headers.Last-Modified",
                                        "data_type": "string",
                                        "example_values": [
                                            "Fri, 30 Mar 2012 13:52:38 GMT"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.requests.*.response.response.headers.ETag",
                                        "data_type": "string",
                                        "example_values": [
                                            "\"5c17f0-1bf5-4bc7627477580\""
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "url"
                                        ],
                                        "data_path": "action_result.data.*.data.requests.*.initiatorInfo.url",
                                        "data_type": "string",
                                        "example_values": [
                                            "http://www.netismi.com/"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.requests.*.initiatorInfo.host",
                                        "data_type": "string",
                                        "example_values": [
                                            "www.netismi.com"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.requests.*.initiatorInfo.type",
                                        "data_type": "string",
                                        "example_values": [
                                            "parser"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "url"
                                        ],
                                        "data_path": "action_result.data.*.data.requests.*.response.hashmatches.*.url",
                                        "data_type": "string",
                                        "example_values": [
                                            "https://cdnjs.cloudflare.com/ajax/libs/mediaelement/2.0.0/jquery.js"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.requests.*.response.hashmatches.*.source",
                                        "data_type": "string",
                                        "example_values": [
                                            "cdnjs.com"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.requests.*.response.hashmatches.*.file",
                                        "data_type": "string",
                                        "example_values": [
                                            "mediaelement/2.0.0/jquery.js"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "url"
                                        ],
                                        "data_path": "action_result.data.*.data.requests.*.response.hashmatches.*.project_url",
                                        "data_type": "string",
                                        "example_values": [
                                            "https://cdnjs.com/libraries/mediaelement"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.requests.*.response.hashmatches.*.project",
                                        "data_type": "string",
                                        "example_values": [
                                            "mediaelement"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.requests.*.response.response.headers.Transfer-Encoding",
                                        "data_type": "string",
                                        "example_values": [
                                            "chunked"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.requests.*.response.geoip.range.*",
                                        "data_type": "numeric",
                                        "example_values": [
                                            4294967295
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.requests.*.response.response.securityDetails.certificateId",
                                        "data_type": "numeric",
                                        "example_values": [
                                            0
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.requests.*.response.response.securityDetails.protocol",
                                        "data_type": "string",
                                        "example_values": [
                                            "TLS 1.2"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.requests.*.response.response.securityDetails.keyExchange",
                                        "data_type": "string",
                                        "example_values": [
                                            "ECDHE_RSA"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.requests.*.response.response.securityDetails.validTo",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1508228880
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.requests.*.response.response.securityDetails.sanList",
                                        "data_type": "string",
                                        "example_values": [
                                            "messenger.com"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.requests.*.response.response.securityDetails.subjectName",
                                        "data_type": "string",
                                        "example_values": [
                                            "*.apis.google.com"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.requests.*.response.response.securityDetails.cipher",
                                        "data_type": "string",
                                        "example_values": [
                                            "AES_128_GCM"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.requests.*.response.response.securityDetails.validFrom",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1500972335
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.requests.*.response.response.securityDetails.signedCertificateTimestampList.*.origin",
                                        "data_type": "string",
                                        "example_values": [
                                            "TLS extension"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.requests.*.response.response.securityDetails.signedCertificateTimestampList.*.status",
                                        "data_type": "string",
                                        "example_values": [
                                            "Verified"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.requests.*.response.response.securityDetails.signedCertificateTimestampList.*.hashAlgorithm",
                                        "data_type": "string",
                                        "example_values": [
                                            "SHA-256"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.requests.*.response.response.securityDetails.signedCertificateTimestampList.*.signatureData",
                                        "data_type": "string",
                                        "example_values": [
                                            "304502201B93510379EBD837E19EA9C684D5EF8D8E777A9A6D0B094AD30465C394FEFCEA0221008622A01AE4C1FDFA376F53FE0E9231E95E6FAE68E47559DA04F147E2461DC1C8"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.requests.*.response.response.securityDetails.signedCertificateTimestampList.*.timestamp",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1500976811010
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.requests.*.response.response.securityDetails.signedCertificateTimestampList.*.logDescription",
                                        "data_type": "string",
                                        "example_values": [
                                            "Google 'Pilot' log"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "sha256"
                                        ],
                                        "data_path": "action_result.data.*.data.requests.*.response.response.securityDetails.signedCertificateTimestampList.*.logId",
                                        "data_type": "string",
                                        "example_values": [
                                            "A4B90990B418581487BB13A2CC67700A3C359804F91BDFB8E377CD0EC80DDC10"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.requests.*.response.response.securityDetails.signedCertificateTimestampList.*.signatureAlgorithm",
                                        "data_type": "string",
                                        "example_values": [
                                            "ECDSA"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.requests.*.response.response.securityDetails.keyExchangeGroup",
                                        "data_type": "string",
                                        "example_values": [
                                            "X25519"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.requests.*.response.response.securityDetails.issuer",
                                        "data_type": "string",
                                        "example_values": [
                                            "Google Internet Authority G2"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.requests.*.response.response.headers.status",
                                        "data_type": "string",
                                        "example_values": [
                                            "200"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.requests.*.response.response.headers.x-xss-protection",
                                        "data_type": "string",
                                        "example_values": [
                                            "1; mode=block"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.requests.*.response.response.headers.x-content-type-options",
                                        "data_type": "string",
                                        "example_values": [
                                            "nosniff"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.requests.*.response.response.headers.content-encoding",
                                        "data_type": "string",
                                        "example_values": [
                                            "gzip"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.requests.*.response.response.headers.expires",
                                        "data_type": "string",
                                        "example_values": [
                                            "Mon, 07 Aug 2017 19:13:18 GMT"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.requests.*.response.response.headers.server",
                                        "data_type": "string",
                                        "example_values": [
                                            "ESF"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.requests.*.response.response.headers.etag",
                                        "data_type": "string",
                                        "example_values": [
                                            "\"7eb07c4c7de07fe8def6029af1192b2d\""
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.requests.*.response.response.headers.strict-transport-security",
                                        "data_type": "string",
                                        "example_values": [
                                            "max-age=31536000"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.requests.*.response.response.headers.x-ua-compatible",
                                        "data_type": "string",
                                        "example_values": [
                                            "IE=edge, chrome=1"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.requests.*.response.response.headers.cache-control",
                                        "data_type": "string",
                                        "example_values": [
                                            "private, max-age=1800, stale-while-revalidate=1800"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.requests.*.response.response.headers.date",
                                        "data_type": "string",
                                        "example_values": [
                                            "Mon, 07 Aug 2017 19:13:18 GMT"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.requests.*.response.response.headers.p3p",
                                        "data_type": "string",
                                        "example_values": [
                                            "CP=\"This is not a P3P policy! See https://support.google.com/accounts/answer/151657?hl=en for more info.\""
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.requests.*.response.response.headers.alt-svc",
                                        "data_type": "string",
                                        "example_values": [
                                            "quic=\":443\"; ma=2592000; v=\"39,38,37,36,35\""
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.requests.*.response.response.headers.content-type",
                                        "data_type": "string",
                                        "example_values": [
                                            "application/javascript; charset=utf-8"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.requests.*.response.response.headers.x-frame-options",
                                        "data_type": "string",
                                        "example_values": [
                                            "SAMEORIGIN"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.requests.*.response.response.headers.timing-allow-origin",
                                        "data_type": "string",
                                        "example_values": [
                                            "*"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.requests.*.response.response.securityHeaders.*.name",
                                        "data_type": "string",
                                        "example_values": [
                                            "Strict-Transport-Security"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.requests.*.response.response.securityHeaders.*.value",
                                        "data_type": "string",
                                        "example_values": [
                                            "max-age=31536000"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "url"
                                        ],
                                        "data_path": "action_result.data.*.data.requests.*.response.abp.url",
                                        "data_type": "string",
                                        "example_values": [
                                            "http://www.netismi.com/images/bursa-web-tasarimi/rss.png"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.requests.*.response.abp.source",
                                        "data_type": "string",
                                        "example_values": [
                                            "easylist"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.requests.*.response.abp.type",
                                        "data_type": "string",
                                        "example_values": [
                                            "annoyance"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.requests.*.request.redirectResponse.headers.Non-Authoritative-Reason",
                                        "data_type": "string",
                                        "example_values": [
                                            "HSTS"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.requests.*.response.response.headers.content-length",
                                        "data_type": "string",
                                        "example_values": [
                                            "16022"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.requests.*.response.response.headers.age",
                                        "data_type": "string",
                                        "example_values": [
                                            "734"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.requests.*.response.response.headers.vary",
                                        "data_type": "string",
                                        "example_values": [
                                            "Accept-Encoding"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.requests.*.response.response.headers.last-modified",
                                        "data_type": "string",
                                        "example_values": [
                                            "Tue, 01 Aug 2017 03:25:32 GMT"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "url"
                                        ],
                                        "data_path": "action_result.data.*.data.requests.*.request.initiator.stack.callFrames.*.url",
                                        "data_type": "string",
                                        "example_values": [
                                            "https://apis.google.com/js/plusone.js"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.requests.*.request.initiator.stack.callFrames.*.columnNumber",
                                        "data_type": "numeric",
                                        "example_values": [
                                            386
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.requests.*.request.initiator.stack.callFrames.*.scriptId",
                                        "data_type": "string",
                                        "example_values": [
                                            "40"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.requests.*.request.initiator.stack.callFrames.*.functionName",
                                        "data_type": "string",
                                        "example_values": [
                                            "lb"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.requests.*.request.initiator.stack.callFrames.*.lineNumber",
                                        "data_type": "numeric",
                                        "example_values": [
                                            13
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.requests.*.response.response.headers.accept-ranges",
                                        "data_type": "string",
                                        "example_values": [
                                            "bytes"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.requests.*.response.response.headers.content-security-policy",
                                        "data_type": "string",
                                        "example_values": [
                                            "default-src * data: blob:;script-src *.facebook.com *.fbcdn.net *.facebook.net *.google-analytics.com *.virtualearth.net *.google.com 127.0.0.1:* *.spotilocal.com:* 'unsafe-inline' 'unsafe-eval' fbstatic-a.akamaihd.net fbcdn-static-b-a.akamaihd.net *.atlassolutions.com blob: data: 'self';style-src data: blob: 'unsafe-inline' *;connect-src *.facebook.com *.fbcdn.net *.facebook.net *.spotilocal.com:* *.akamaihd.net wss://*.facebook.com:* https://fb.scanandcleanlocal.com:* *.atlassolutions.com attachment.fbsbx.com ws://localhost:* blob: *.cdninstagram.com 'self';"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "md5"
                                        ],
                                        "data_path": "action_result.data.*.data.requests.*.response.response.headers.x-fb-content-md5",
                                        "data_type": "string",
                                        "example_values": [
                                            "0bd61dc947229e72968554f0c9fb51db"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.requests.*.response.response.headers.content-md5",
                                        "data_type": "string",
                                        "example_values": [
                                            "9Bs4q2xta3z6+p7pgFz0Ww=="
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.requests.*.response.response.headers.access-control-expose-headers",
                                        "data_type": "string",
                                        "example_values": [
                                            "X-FB-Content-MD5"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.requests.*.response.response.headers.x-fb-debug",
                                        "data_type": "string",
                                        "example_values": [
                                            "hUiq7Iq/Mt3plXYg3YAU6tS/1K06AainVmY+EU3e6s9L1+7n8CrQFf6Va+EHLQ2tSVCOePLr3hQ5PcEZ6c8R/Q=="
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.requests.*.request.request.headers.Upgrade-Insecure-Requests",
                                        "data_type": "string",
                                        "example_values": [
                                            "1"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.requests.*.response.failed.canceled",
                                        "data_type": "boolean",
                                        "example_values": [
                                            true,
                                            false
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.requests.*.response.failed.type",
                                        "data_type": "string",
                                        "example_values": [
                                            "Document"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.requests.*.response.failed.requestId",
                                        "data_type": "string",
                                        "example_values": [
                                            "24696.156"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.requests.*.response.failed.errorText",
                                        "data_type": "string",
                                        "example_values": [
                                            ""
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.requests.*.response.failed.timestamp",
                                        "data_type": "numeric",
                                        "example_values": [
                                            25061896.916161
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.requests.*.response.response.headers.pragma",
                                        "data_type": "string",
                                        "example_values": [
                                            "no-cache"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "url"
                                        ],
                                        "data_path": "action_result.data.*.data.requests.*.response.response.headers.access-control-allow-origin",
                                        "data_type": "string",
                                        "example_values": [
                                            "*"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.requests.*.response.response.headers.public-key-pins-report-only",
                                        "data_type": "string",
                                        "example_values": [
                                            "max-age=500; pin-sha256=\"WoiWRyIOVNa9ihaBciRSC7XHjliYS9VwUGOIud4PB18=\"; pin-sha256=\"r/mIkG3eEpVdm+u/ko/cwxzOMo1bk4TyHIlByibiA5E=\"; pin-sha256=\"q4PO2G2cbkZhZ82+JgmRUyGMoAeozA+BSXVXQWB8XWQ=\"; report-uri=\"http://reports.fb.com/hpkp/\""
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.requests.*.response.response.headers.access-control-allow-method",
                                        "data_type": "string",
                                        "example_values": [
                                            "OPTIONS"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.requests.*.response.response.headers.access-control-allow-credentials",
                                        "data_type": "string",
                                        "example_values": [
                                            "true"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.data.links.*.text",
                                        "data_type": "string",
                                        "example_values": [
                                            "stor perde"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "url"
                                        ],
                                        "data_path": "action_result.data.*.data.links.*.href",
                                        "data_type": "string",
                                        "example_values": [
                                            "http://www.enmodaperde.com/43_stor-perde.html"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.page.city",
                                        "data_type": "string",
                                        "example_values": [
                                            "Bursa"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "domain"
                                        ],
                                        "data_path": "action_result.data.*.page.domain",
                                        "data_type": "string",
                                        "example_values": [
                                            "www.netismi.com"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.page.asn",
                                        "data_type": "string",
                                        "example_values": [
                                            "AS43260"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "url"
                                        ],
                                        "data_path": "action_result.data.*.page.url",
                                        "data_type": "string",
                                        "example_values": [
                                            "http://www.netismi.com/"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "ip"
                                        ],
                                        "data_path": "action_result.data.*.page.ip",
                                        "data_type": "string",
                                        "example_values": [
                                            "46.20.14.51"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.page.asnname",
                                        "data_type": "string",
                                        "example_values": [
                                            "DGN, TR"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.page.server",
                                        "data_type": "string",
                                        "example_values": [
                                            "Apache/2"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.page.country",
                                        "data_type": "string",
                                        "example_values": [
                                            "TR"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.page.ptr",
                                        "data_type": "string",
                                        "example_values": [
                                            "ns1.netismi.net"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "urlscan submission id"
                                        ],
                                        "data_path": "action_result.summary.report_uuid",
                                        "data_type": "string",
                                        "example_values": [
                                            "value"
                                        ]
                                    }
                                ],
                                "parameters": {
                                    "private": {
                                        "data_type": "boolean",
                                        "default": null,
                                        "description": "Run a private scan",
                                        "key": "private",
                                        "order": 1,
                                        "require": false,
                                        "required": false
                                    },
                                    "url": {
                                        "contains": [
                                            "url",
                                            "domain"
                                        ],
                                        "data_type": "string",
                                        "default": null,
                                        "description": "URL to detonate",
                                        "key": "url",
                                        "order": 0,
                                        "primary": true,
                                        "required": true
                                    }
                                },
                                "product_name": "urlscan.io",
                                "product_vendor": "urlscan.io",
                                "targets": "25",
                                "type": "sandbox"
                            }
                        ],
                        "attrs": {
                            ".action": {
                                "text": "detonateUrl"
                            },
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "Investigate"
                            },
                            "g.approver image": {
                                "opacity": 1
                            },
                            "g.code image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_code_dark_on.svg"
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_error.svg"
                            },
                            "g.icon image": {
                                "xlink:href": "/inc/coa/img/block_icon_investigate.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1
                            },
                            "g.timer image": {
                                "opacity": 1
                            }
                        },
                        "block_code": "def detonateUrl(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None):\n    phantom.debug('detonateUrl() called')\n\n    # collect data for 'detonateUrl' call\n    filtered_artifacts_data_1 = phantom.collect2(container=container, datapath=['filtered-data:filter_Indicators:condition_1:artifact:*.cef.requestURL', 'filtered-data:filter_Indicators:condition_1:artifact:*.id'])\n\n    parameters = []\n    \n    # build parameters list for 'detonateUrl' call\n    for filtered_artifacts_item_1 in filtered_artifacts_data_1:\n        if filtered_artifacts_item_1[0]:\n            parameters.append({\n                'url': filtered_artifacts_item_1[0],\n                'private': False,\n                # context (artifact id) is added to associate results with the artifact\n                'context': {'artifact_id': filtered_artifacts_item_1[1]},\n            })\n\n    phantom.act(action=\"detonate url\", parameters=parameters, assets=['urlscan'], name=\"detonateUrl\")\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": true,
                        "color": "",
                        "connected_to_start": true,
                        "connection_name": "",
                        "connection_type": "",
                        "custom_callback": "",
                        "custom_code": "def detonateUrl(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None):\n    phantom.debug('detonateUrl() called')\n\n    FilterNoisyURLs__requestURLsforExternalLookup = json.loads(phantom.get_run_data(key='FilterNoisyURLs:requestURLsforExternalLookup'))\n    # collect data for 'detonateUrl' call\n\n    parameters = []\n    \n    # build parameters list for 'detonateUrl' call\n    for url in FilterNoisyURLs__requestURLsforExternalLookup:\n        parameters.append({\n            'url': url,\n            'private': False,\n        })\n\n    phantom.act(action=\"detonate url\", parameters=parameters, assets=['urlscan'], name=\"detonateUrl\",callback=detonateStatus)\n\n    return",
                        "custom_join": "",
                        "custom_name": "detonateUrl",
                        "delay": 0,
                        "description": "",
                        "has_custom": false,
                        "has_custom_block": true,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "2abd219b-7b7c-4f74-9704-da66812413eb",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 98,
                        "line_start": 79,
                        "message": "Configuring now",
                        "name": "detonate url",
                        "notes": "",
                        "number": 1,
                        "order": 6,
                        "outPorts": [
                            "out"
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 80,
                            "y": 160
                        },
                        "previous_function": "",
                        "previous_name": "detonateUrl",
                        "required_params": {
                            "url": true
                        },
                        "reviewer": "",
                        "show_number": false,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "app_action_assets",
                        "status": "",
                        "title": "Investigate",
                        "type": "coa.Action",
                        "warn": false,
                        "z": 446
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "c26692f8-4a4a-4d0e-a165-ce3fd8c8ae10",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "6342db74-e3c4-42fb-bfa9-74f64061c314",
                            "port": "out-2",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(2) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "e1d0e030-5364-480a-b4cc-e71848651c9c",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 460
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "7399c393-fe57-419e-9020-56fae8a1fec6",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "ff08a807-63cc-44bf-8f4c-35d1c018255a",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "90b37c68-bc9b-415b-989d-d7a8a3cdbd76",
                            "selector": ".port-body[type=\"input\"]"
                        },
                        "type": "link",
                        "z": 465
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "aa95c7e7-c191-4735-a422-9c20503efab3",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "e1d0e030-5364-480a-b4cc-e71848651c9c",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "ff08a807-63cc-44bf-8f4c-35d1c018255a",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 485
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "api": "add note",
                        "attrs": {
                            ".api": {
                                "text": "add note"
                            },
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "API"
                            },
                            "g.code image": {
                                "opacity": 1
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1
                            }
                        },
                        "block_code": "def add_note_13(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None):\n    phantom.debug('add_note_13() called')\n\n    formatted_data_1 = phantom.get_format_data(name='NoLookupsFormatNote')\n\n    note_title = \"POV_Network_URL_Enrichment\"\n    note_content = formatted_data_1\n    note_format = \"markdown\"\n    phantom.add_note(container=container, note_type=\"general\", title=note_title, content=note_content, note_format=note_format)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "color": "",
                        "configured": [
                            {
                                "addNoteContent": "NoLookupsFormatNote:formatted_data",
                                "addNoteNoteFormat": "markdown",
                                "addNoteTitle": "POV_Network_URL_Enrichment",
                                "key": "add-note"
                            }
                        ],
                        "connected_to_start": true,
                        "connection_name": "",
                        "connection_type": "",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "",
                        "description": "",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "798f292f-38e8-45d5-8525-bc7017e6875e",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 375,
                        "line_start": 363,
                        "message": "Configuring now",
                        "name": "add note",
                        "notes": "",
                        "number": 13,
                        "order": 15,
                        "outPorts": [
                            "out"
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 860,
                            "y": 0
                        },
                        "previous_function": "",
                        "previous_name": "add_note_13",
                        "show_number": false,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "api",
                        "status": "",
                        "title": "API",
                        "type": "coa.API",
                        "warn": false,
                        "z": 490
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "2f74c629-2d54-496d-ae24-24a3cb442b0a",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "e1d0e030-5364-480a-b4cc-e71848651c9c",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "d406fe6b-9c12-440a-ab0a-68ee97355218",
                            "selector": ".port-body[type=\"input\"]"
                        },
                        "type": "link",
                        "z": 506
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "a68def5f-2571-4c98-bbd8-ceb982d6ad28",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "d406fe6b-9c12-440a-ab0a-68ee97355218",
                            "port": "out-1",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "ef0cb77c-a615-4aa2-85fb-aa9b3bc07833",
                            "selector": ".port-body[type=\"input\"]"
                        },
                        "type": "link",
                        "z": 508
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#E6984E"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".functionBlock": {
                                "text": "CheckMaliciousFlag"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "custom function"
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 1
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            }
                        },
                        "block_code": "def CheckMaliciousFlag(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None):\n    phantom.debug('CheckMaliciousFlag() called')\n    input_parameter_0 = \"\"\n\n    CheckMaliciousFlag__urlscan_notables = None\n    CheckMaliciousFlag__is_malicious = None\n    CheckMaliciousFlag__hud_malicious_message = None\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n\n    # Write your custom code here...\n    CheckMaliciousFlag__is_malicious = False\n    \n    GetReportData_results = phantom.get_action_results(action_name=\"GetReportData\")\n    if GetReportData_results:\n        phantom.debug(GetReportData_results)\n    \n        urlscan_notables = {}\n\n        urlscan_notables = json.dumps({\"cef\": {\"urlscan_tags\": GetReportData_results[0]['action_results'][0]['data'][0]['verdicts']['urlscan']['tags'], \n                                 \"urlscan_malicious\": GetReportData_results[0]['action_results'][0]['data'][0]['verdicts']['urlscan']['malicious'],\n                                 \"urlscan_verdict_score\": GetReportData_results[0]['action_results'][0]['data'][0]['verdicts']['urlscan']['score'],\n                                 \"urlscan_screenshotURL\": GetReportData_results[0]['action_results'][0]['data'][0]['task']['screenshotURL']\n        }})\n        phantom.debug('URLNOTABLES: {}'.format(urlscan_notables))\n        \n        if GetReportData_results[0]['action_results'][0]['data'][0]['verdicts']['urlscan']['malicious'] == True:\n            CheckMaliciousFlag__is_malicious = True\n            CheckMaliciousFlag__hud_malicious_message = \"Malicious URL: \" + str(GetReportData_results[0]['action_results'][0]['data'][0]['task']['url']) + \" : Category \" + str(GetReportData_results[0]['action_results'][0]['data'][0]['verdicts']['urlscan']['tags'])\n\n    deturl_results = phantom.get_action_results(action_name=\"detonateUrl\")\n    if deturl_results:\n        urlscan_notables = {}\n        #{\"cef\": {\"covid_related\": \"yes\"}}\n        urlscan_notables = json.dumps({\"cef\": {\"urlscan_tags\": deturl_results[0]['action_results'][0]['data'][0]['verdicts']['urlscan']['tags'], \n                                 \"urlscan_malicious\": deturl_results[0]['action_results'][0]['data'][0]['verdicts']['urlscan']['malicious'],\n                                 \"urlscan_verdict_score\": deturl_results[0]['action_results'][0]['data'][0]['verdicts']['urlscan']['score'],\n                                 \"urlscan_screenshotURL\": deturl_results[0]['action_results'][0]['data'][0]['task']['screenshotURL']\n        }})\n        phantom.debug('URLNOTABLES: {}'.format(urlscan_notables))\n\n        if deturl_results[0]['action_results'][0]['data'][0]['verdicts']['urlscan']['malicious'] == True:\n            CheckMaliciousFlag__is_malicious = True\n            CheckMaliciousFlag__hud_malicious_message = \"Malicious URL: \" + str(deturl_results[0]['action_results'][0]['data'][0]['task']['url']) + \" : Category \" + str(deturl_results[0]['action_results'][0]['data'][0]['verdicts']['urlscan']['tags'])\n\n    phantom.debug('Notables: {}'.format(urlscan_notables))\n    CheckMaliciousFlag__urlscan_notables = urlscan_notables\n    #######################################################\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n\n    phantom.save_run_data(key='CheckMaliciousFlag:urlscan_notables', value=json.dumps(CheckMaliciousFlag__urlscan_notables))\n    phantom.save_run_data(key='CheckMaliciousFlag:is_malicious', value=json.dumps(CheckMaliciousFlag__is_malicious))\n    phantom.save_run_data(key='CheckMaliciousFlag:hud_malicious_message', value=json.dumps(CheckMaliciousFlag__hud_malicious_message))\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": false,
                        "connection_name": "",
                        "connection_type": "",
                        "customCodeEndLineOffset": 8,
                        "customCodeStartLine": 11,
                        "custom_callback": "",
                        "custom_code": "def CheckMaliciousFlag(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None):\n    phantom.debug('CheckMaliciousFlag() called')\n    input_parameter_0 = \"\"\n\n    CheckMaliciousFlag__urlscan_notables = None\n    CheckMaliciousFlag__is_malicious = None\n    CheckMaliciousFlag__hud_malicious_message = None\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n\n    # Write your custom code here...\n    CheckMaliciousFlag__is_malicious = False\n    \n    GetReportData_results = phantom.get_action_results(action_name=\"GetReportData\")\n    if GetReportData_results:\n        phantom.debug(GetReportData_results)\n    \n        urlscan_notables = {}\n\n        urlscan_notables = json.dumps({\"cef\": {\"urlscan_tags\": GetReportData_results[0]['action_results'][0]['data'][0]['verdicts']['urlscan']['tags'], \n                                 \"urlscan_malicious\": GetReportData_results[0]['action_results'][0]['data'][0]['verdicts']['urlscan']['malicious'],\n                                 \"urlscan_verdict_score\": GetReportData_results[0]['action_results'][0]['data'][0]['verdicts']['urlscan']['score'],\n                                 \"urlscan_screenshotURL\": GetReportData_results[0]['action_results'][0]['data'][0]['task']['screenshotURL']\n        }})\n        phantom.debug('URLNOTABLES: {}'.format(urlscan_notables))\n        \n        if GetReportData_results[0]['action_results'][0]['data'][0]['verdicts']['urlscan']['malicious'] == True:\n            CheckMaliciousFlag__is_malicious = True\n            CheckMaliciousFlag__hud_malicious_message = \"Malicious URL: \" + str(GetReportData_results[0]['action_results'][0]['data'][0]['task']['url']) + \" : Category \" + str(GetReportData_results[0]['action_results'][0]['data'][0]['verdicts']['urlscan']['tags'])\n\n    deturl_results = phantom.get_action_results(action_name=\"detonateUrl\")\n    if deturl_results:\n        urlscan_notables = {}\n        #{\"cef\": {\"covid_related\": \"yes\"}}\n        urlscan_notables = json.dumps({\"cef\": {\"urlscan_tags\": deturl_results[0]['action_results'][0]['data'][0]['verdicts']['urlscan']['tags'], \n                                 \"urlscan_malicious\": deturl_results[0]['action_results'][0]['data'][0]['verdicts']['urlscan']['malicious'],\n                                 \"urlscan_verdict_score\": deturl_results[0]['action_results'][0]['data'][0]['verdicts']['urlscan']['score'],\n                                 \"urlscan_screenshotURL\": deturl_results[0]['action_results'][0]['data'][0]['task']['screenshotURL']\n        }})\n        phantom.debug('URLNOTABLES: {}'.format(urlscan_notables))\n\n        if deturl_results[0]['action_results'][0]['data'][0]['verdicts']['urlscan']['malicious'] == True:\n            CheckMaliciousFlag__is_malicious = True\n            CheckMaliciousFlag__hud_malicious_message = \"Malicious URL: \" + str(deturl_results[0]['action_results'][0]['data'][0]['task']['url']) + \" : Category \" + str(deturl_results[0]['action_results'][0]['data'][0]['verdicts']['urlscan']['tags'])\n\n    phantom.debug('Notables: {}'.format(urlscan_notables))\n    CheckMaliciousFlag__urlscan_notables = urlscan_notables\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n\n    phantom.save_run_data(key='CheckMaliciousFlag:urlscan_notables', value=json.dumps(CheckMaliciousFlag__urlscan_notables))\n    phantom.save_run_data(key='CheckMaliciousFlag:is_malicious', value=json.dumps(CheckMaliciousFlag__is_malicious))\n    phantom.save_run_data(key='CheckMaliciousFlag:hud_malicious_message', value=json.dumps(CheckMaliciousFlag__hud_malicious_message))\n    if_malicious(container=container)\n\n    return",
                        "custom_join": "",
                        "custom_name": "CheckMaliciousFlag",
                        "description": "",
                        "functionBlock": "custom function",
                        "has_custom": true,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "a5e1e2fa-1987-4143-b579-316ee9150fd8",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [
                            "GetReportData",
                            "detonateUrl"
                        ],
                        "join_start": 203,
                        "legacy": true,
                        "line_end": 158,
                        "line_start": 98,
                        "message": "Configuring now",
                        "name": "custom function",
                        "notes": "Grabs verdict and looks for if malicious flag",
                        "number": 8,
                        "order": 7,
                        "outPorts": [
                            "out"
                        ],
                        "outputVariables": [
                            {
                                "position": 0,
                                "type": "",
                                "value": "urlscan_notables"
                            },
                            {
                                "position": 1,
                                "type": "",
                                "value": "is_malicious"
                            },
                            {
                                "position": 2,
                                "type": "",
                                "value": "hud_malicious_message"
                            }
                        ],
                        "parameters": [
                            {
                                "position": 0,
                                "type": "",
                                "value": ""
                            }
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": -380,
                            "y": 580
                        },
                        "previous_function": "",
                        "previous_name": "CheckMaliciousFlag",
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "custom function",
                        "status": "warn",
                        "title": "custom function",
                        "type": "coa.FunctionBlock",
                        "userGeneratedCode": "\n    # Write your custom code here...\n    CheckMaliciousFlag__is_malicious = False\n    \n    GetReportData_results = phantom.get_action_results(action_name=\"GetReportData\")\n    if GetReportData_results:\n        phantom.debug(GetReportData_results)\n    \n        urlscan_notables = {}\n\n        urlscan_notables = json.dumps({\"cef\": {\"urlscan_tags\": GetReportData_results[0]['action_results'][0]['data'][0]['verdicts']['urlscan']['tags'], \n                                 \"urlscan_malicious\": GetReportData_results[0]['action_results'][0]['data'][0]['verdicts']['urlscan']['malicious'],\n                                 \"urlscan_verdict_score\": GetReportData_results[0]['action_results'][0]['data'][0]['verdicts']['urlscan']['score'],\n                                 \"urlscan_screenshotURL\": GetReportData_results[0]['action_results'][0]['data'][0]['task']['screenshotURL']\n        }})\n        phantom.debug('URLNOTABLES: {}'.format(urlscan_notables))\n        \n        if GetReportData_results[0]['action_results'][0]['data'][0]['verdicts']['urlscan']['malicious'] == True:\n            CheckMaliciousFlag__is_malicious = True\n            CheckMaliciousFlag__hud_malicious_message = \"Malicious URL: \" + str(GetReportData_results[0]['action_results'][0]['data'][0]['task']['url']) + \" : Category \" + str(GetReportData_results[0]['action_results'][0]['data'][0]['verdicts']['urlscan']['tags'])\n\n    deturl_results = phantom.get_action_results(action_name=\"detonateUrl\")\n    if deturl_results:\n        urlscan_notables = {}\n        #{\"cef\": {\"covid_related\": \"yes\"}}\n        urlscan_notables = json.dumps({\"cef\": {\"urlscan_tags\": deturl_results[0]['action_results'][0]['data'][0]['verdicts']['urlscan']['tags'], \n                                 \"urlscan_malicious\": deturl_results[0]['action_results'][0]['data'][0]['verdicts']['urlscan']['malicious'],\n                                 \"urlscan_verdict_score\": deturl_results[0]['action_results'][0]['data'][0]['verdicts']['urlscan']['score'],\n                                 \"urlscan_screenshotURL\": deturl_results[0]['action_results'][0]['data'][0]['task']['screenshotURL']\n        }})\n        phantom.debug('URLNOTABLES: {}'.format(urlscan_notables))\n\n        if deturl_results[0]['action_results'][0]['data'][0]['verdicts']['urlscan']['malicious'] == True:\n            CheckMaliciousFlag__is_malicious = True\n            CheckMaliciousFlag__hud_malicious_message = \"Malicious URL: \" + str(deturl_results[0]['action_results'][0]['data'][0]['task']['url']) + \" : Category \" + str(deturl_results[0]['action_results'][0]['data'][0]['verdicts']['urlscan']['tags'])\n\n    phantom.debug('Notables: {}'.format(urlscan_notables))\n    CheckMaliciousFlag__urlscan_notables = urlscan_notables\n    #######################################################",
                        "warn": false,
                        "z": 518
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "api": "add comment, add note",
                        "attrs": {
                            ".api": {
                                "text": "add comment, add note"
                            },
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "API"
                            },
                            "g.code image": {
                                "opacity": 1
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1
                            }
                        },
                        "block_code": "def add_comment_add_note_11(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None):\n    phantom.debug('add_comment_add_note_11() called')\n\n    phantom.comment(container=container, comment=\"Detonate URL Action Failed - Check\")\n\n    note_title = \"POV_Network_URL_Enrichment\"\n    note_content = \"**Detonate URL Action Failed - Please Check**\"\n    note_format = \"markdown\"\n    phantom.add_note(container=container, note_type=\"general\", title=note_title, content=note_content, note_format=note_format)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "color": "",
                        "configured": [
                            {
                                "addCommentComment": "Detonate URL Action Failed - Check",
                                "key": "add-comment"
                            },
                            {
                                "addNoteContent": "**Detonate URL Action Failed - Please Check**",
                                "addNoteNoteFormat": "markdown",
                                "addNoteTitle": "POV_Network_URL_Enrichment",
                                "key": "add-note"
                            }
                        ],
                        "connected_to_start": true,
                        "connection_name": "detonateUrl",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "",
                        "description": "",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "87f4ba0a-8915-4b7c-8532-38c50d6bd7a1",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 327,
                        "line_start": 315,
                        "message": "Configuring now",
                        "name": "add comment, add note",
                        "notes": "",
                        "number": 11,
                        "order": 12,
                        "outPorts": [
                            "out"
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 420,
                            "y": 160
                        },
                        "previous_function": "",
                        "previous_name": "add_comment_add_note_11",
                        "show_number": false,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "api",
                        "status": "",
                        "title": "API",
                        "type": "coa.API",
                        "warn": false,
                        "z": 519
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "api": "add comment",
                        "attrs": {
                            ".api": {
                                "text": "add comment"
                            },
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "API"
                            },
                            "g.code image": {
                                "opacity": 1
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1
                            }
                        },
                        "block_code": "def add_comment_12(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None):\n    phantom.debug('add_comment_12() called')\n\n    phantom.comment(container=container, comment=\"No URLs in the event require external lookup\")\n    NoLookupsFormatNote(container=container)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "color": "",
                        "configured": [
                            {
                                "addCommentComment": "No URLs in the event require external lookup",
                                "key": "add-comment"
                            }
                        ],
                        "connected_to_start": true,
                        "connection_name": "",
                        "connection_type": "",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "",
                        "description": "",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "9d03ea2f-c41e-49d6-9701-b7a190f93da2",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 335,
                        "line_start": 327,
                        "message": "Configuring now",
                        "name": "add comment",
                        "notes": "",
                        "number": 12,
                        "order": 13,
                        "outPorts": [
                            "out"
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 420,
                            "y": 0
                        },
                        "previous_function": "",
                        "previous_name": "add_comment_12",
                        "show_number": false,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "api",
                        "status": "",
                        "title": "API",
                        "type": "coa.API",
                        "warn": false,
                        "z": 522
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "3ee56186-e082-49c3-8492-edf58f870939",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "90b37c68-bc9b-415b-989d-d7a8a3cdbd76",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "e46e228c-6b58-417f-a7c1-de1484603ce5",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 524
                    },
                    {
                        "action": "update artifact fields",
                        "action_type": "generic",
                        "active": false,
                        "active_keys": {},
                        "active_values": {
                            "artifact_id": "filtered-data:filter_Indicators:condition_1:artifact:*.id",
                            "data": "CheckMaliciousFlag:custom_function:urlscan_notables",
                            "overwrite": "True"
                        },
                        "angle": 0,
                        "app": "Phantom",
                        "appid": "deb82aa9-22cc-4675-9cf1-534b8d006eb7",
                        "approver": "",
                        "assets": [
                            {
                                "action": "update artifact fields",
                                "actions": [
                                    "no op",
                                    "set current phase",
                                    "update task",
                                    "modify indicator tag",
                                    "get indicator",
                                    "update list",
                                    "get action result",
                                    "create container",
                                    "import container",
                                    "export container",
                                    "deflate item",
                                    "add artifact",
                                    "find listitem",
                                    "add listitem",
                                    "find artifacts",
                                    "update artifact tags",
                                    "add note",
                                    "update artifact",
                                    "update artifact fields",
                                    "tabulate data",
                                    "get user",
                                    "list playbooks",
                                    "test connectivity"
                                ],
                                "active": true,
                                "app_name": "Phantom",
                                "app_version": "2.1.29",
                                "appid": "deb82aa9-22cc-4675-9cf1-534b8d006eb7",
                                "asset_name": "phantomapp",
                                "config_type": "asset",
                                "count": 0,
                                "fields": {
                                    "artifact_id": "filtered-data:filter_Indicators:condition_1:artifact:*.id",
                                    "data": "CheckMaliciousFlag:custom_function:urlscan_notables",
                                    "overwrite": "True"
                                },
                                "has_app": true,
                                "id": 26,
                                "loaded": false,
                                "missing": false,
                                "name": "phantomapp",
                                "output": [
                                    {
                                        "column_name": "Status",
                                        "data_path": "action_result.status",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.parameter.artifact_id",
                                        "data_type": "numeric"
                                    },
                                    {
                                        "data_path": "action_result.parameter.data",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.parameter.overwrite",
                                        "data_type": "boolean"
                                    },
                                    {
                                        "data_path": "action_result.data",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.summary",
                                        "data_type": "string"
                                    },
                                    {
                                        "column_name": "Message",
                                        "data_path": "action_result.message",
                                        "data_type": "string"
                                    }
                                ],
                                "parameters": {
                                    "artifact_id": {
                                        "data_type": "numeric",
                                        "default": null,
                                        "description": "artifact_id",
                                        "key": "artifact_id",
                                        "primary": true,
                                        "required": true
                                    },
                                    "data": {
                                        "data_type": "string",
                                        "default": null,
                                        "description": "update data (json formatted)",
                                        "key": "data",
                                        "required": true
                                    },
                                    "overwrite": {
                                        "data_type": "boolean",
                                        "default": null,
                                        "description": "overwrite existing",
                                        "key": "overwrite",
                                        "required": false
                                    }
                                },
                                "product_name": "Phantom",
                                "product_vendor": "Phantom",
                                "targets": "26",
                                "type": "information"
                            }
                        ],
                        "attrs": {
                            ".action": {
                                "text": "update artifact fields"
                            },
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#E6984E"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "Generic"
                            },
                            "g.approver image": {
                                "opacity": 1
                            },
                            "g.code image": {
                                "opacity": 1
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 1
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.icon image": {
                                "xlink:href": "/inc/coa/img/block_icon_generic.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1
                            },
                            "g.timer image": {
                                "opacity": 1
                            }
                        },
                        "block_code": "def update_artifact_fields_1(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None):\n    phantom.debug('update_artifact_fields_1() called')\n\n    CheckMaliciousFlag__urlscan_notables = json.loads(phantom.get_run_data(key='CheckMaliciousFlag:urlscan_notables'))\n    # collect data for 'update_artifact_fields_1' call\n    filtered_artifacts_data_1 = phantom.collect2(container=container, datapath=['filtered-data:filter_Indicators:condition_1:artifact:*.id', 'filtered-data:filter_Indicators:condition_1:artifact:*.id'])\n\n    parameters = []\n    \n    # build parameters list for 'update_artifact_fields_1' call\n    for filtered_artifacts_item_1 in filtered_artifacts_data_1:\n        if filtered_artifacts_item_1[0]:\n            parameters.append({\n                'data': CheckMaliciousFlag__urlscan_notables,\n                'overwrite': True,\n                'artifact_id': filtered_artifacts_item_1[0],\n                # context (artifact id) is added to associate results with the artifact\n                'context': {'artifact_id': filtered_artifacts_item_1[1]},\n            })\n\n    phantom.act(action=\"update artifact fields\", parameters=parameters, assets=['phantomapp'], name=\"update_artifact_fields_1\")\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": true,
                        "color": "",
                        "connected_to_start": false,
                        "connection_name": "",
                        "connection_type": "",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "",
                        "delay": 0,
                        "description": "",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "14f06fcd-ec93-4d70-87b4-4387f325e960",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 182,
                        "line_start": 158,
                        "message": "Configuring now",
                        "name": "update artifact fields",
                        "notes": "",
                        "number": 1,
                        "order": 8,
                        "outPorts": [
                            "out"
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": -160,
                            "y": 580
                        },
                        "previous_function": "",
                        "previous_name": "update_artifact_fields_1",
                        "required_params": {
                            "artifact_id": true,
                            "data": true
                        },
                        "reviewer": "",
                        "show_number": false,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "app_action_assets",
                        "status": "warn",
                        "title": "Generic",
                        "type": "coa.Action",
                        "warn": false,
                        "z": 525
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#637282",
                                "transform": "rotate(45 30 70)"
                            },
                            ".inPorts>.port-0>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".number": {
                                "text": 11
                            },
                            ".outPorts>.port-0": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                },
                                "ref-x": 83,
                                "ref-y": 40
                            },
                            ".outPorts>.port-0>.port-body": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                }
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.notes": {
                                "display": "block"
                            }
                        },
                        "block_code": "def decision_11(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None):\n    phantom.debug('decision_11() called')\n\n    # check for 'if' condition 1\n    matched = phantom.decision(\n        container=container,\n        action_results=results,\n        conditions=[\n            [\"parseScanIO:custom_function:pincategory\", \"!=\", None],\n        ])\n\n    # call connected blocks if condition 1 matched\n    if matched:\n        CategoryPin(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function)\n        return\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "detonateUrl",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "",
                        "description": "",
                        "hasElse": false,
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "d406fe6b-9c12-440a-ab0a-68ee97355218",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 525,
                        "line_start": 507,
                        "name": "decision",
                        "notes": "",
                        "number": 11,
                        "order": 19,
                        "outPorts": [
                            "out-1"
                        ],
                        "outputs": [
                            {
                                "conditions": [
                                    {
                                        "comparison": "!=",
                                        "data_type": "",
                                        "param": "parseScanIO:custom_function:pincategory",
                                        "value": "None"
                                    }
                                ],
                                "display": "If",
                                "logic": "and",
                                "type": "if"
                            }
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 680,
                            "y": 420
                        },
                        "previous_function": "",
                        "previous_name": "decision_11",
                        "show_number": true,
                        "size": {
                            "height": 82,
                            "width": 82
                        },
                        "state": "decision",
                        "status": "",
                        "type": "coa.Decision",
                        "warn": "",
                        "z": 526
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "api": "pin",
                        "attrs": {
                            ".api": {
                                "text": "CategoryPin"
                            },
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "API"
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            }
                        },
                        "block_code": "def CategoryPin(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None):\n    phantom.debug('CategoryPin() called')\n\n    parseScanIO__pincategory = json.loads(phantom.get_run_data(key='parseScanIO:pincategory'))\n\n    phantom.pin(container=container, data=parseScanIO__pincategory, message=\"URL Scan Category\", pin_type=\"card\", pin_style=\"red\", name=None)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "color": "",
                        "configured": [
                            {
                                "key": "pin",
                                "pinData": "parseScanIO:custom_function:pincategory",
                                "pinMessage": "URL Scan Category",
                                "pinName": "",
                                "pinPinColor": "red",
                                "pinPinColor_display": "Red",
                                "pinPinType": "card",
                                "pinPinType_display": "card"
                            }
                        ],
                        "connected_to_start": true,
                        "connection_name": "detonateUrl",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "CategoryPin",
                        "description": "",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "ef0cb77c-a615-4aa2-85fb-aa9b3bc07833",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 534,
                        "line_start": 525,
                        "message": "Configuring now",
                        "name": "pin",
                        "notes": "If URLSCan reports malicious category - pin to the HUD",
                        "number": 16,
                        "order": 20,
                        "outPorts": [
                            "out"
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 800,
                            "y": 420
                        },
                        "previous_function": "",
                        "previous_name": "CategoryPin",
                        "show_number": false,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "api",
                        "status": "",
                        "title": "API",
                        "type": "coa.API",
                        "warn": false,
                        "z": 529
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".format": {
                                "text": "formatNote"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out-1": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out-1>.port-body": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "format"
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            }
                        },
                        "block_code": "def formatNote(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None):\n    phantom.debug('formatNote() called')\n    \n    template = \"\"\"##\u00a0Result Links ##\n\n** Report URL: ** {3}\n\n** Screenshot URL: ** {4}\n\n## Overall ##\n\n|Malicious|Score|Verdicts|Categories|Brands|\n|---|---|---|---|---|\n{1}\n\n## Engines ##\n\n|Verdicts|Malicious|Score|MaliciousTotal|EnginesTotal|\n|---|---|---|---|---|\n{2}\n\n## Community ##\n\n|Malicious Votes|Benign Votes|Score|VotesTotal|\n|---|---|---|---|\n{0}\"\"\"\n\n    # parameter list for template variable replacement\n    parameters = [\n        \"parseScanIO:custom_function:community\",\n        \"parseScanIO:custom_function:overall\",\n        \"parseScanIO:custom_function:engines\",\n        \"parseScanIO:custom_function:report_link\",\n        \"parseScanIO:custom_function:screenshot_url\",\n    ]\n\n    phantom.format(container=container, template=template, parameters=parameters, name=\"formatNote\")\n\n    urlScanIONote(container=container)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "detonateUrl",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "formatNote",
                        "description": "General Note for urlscan.io",
                        "format": "format",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "ff08a807-63cc-44bf-8f4c-35d1c018255a",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 495,
                        "line_start": 453,
                        "message": "Configuring now",
                        "name": "format",
                        "notes": "General Note for urlscan.io",
                        "number": 5,
                        "order": 17,
                        "outPorts": [
                            "out-1"
                        ],
                        "parameters": [
                            {
                                "position": 0,
                                "type": "",
                                "value": "parseScanIO:custom_function:community"
                            },
                            {
                                "position": 1,
                                "type": "",
                                "value": "parseScanIO:custom_function:overall"
                            },
                            {
                                "position": 2,
                                "type": "",
                                "value": "parseScanIO:custom_function:engines"
                            },
                            {
                                "position": 3,
                                "type": "",
                                "value": "parseScanIO:custom_function:report_link"
                            },
                            {
                                "position": 4,
                                "type": "",
                                "value": "parseScanIO:custom_function:screenshot_url"
                            }
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 800,
                            "y": 300
                        },
                        "previous_function": "",
                        "previous_name": "formatNote",
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "format",
                        "status": "",
                        "template": "##\u00a0Result Links ##\n\n** Report URL: ** {3}\n\n** Screenshot URL: ** {4}\n\n\n## Overall ##\n\n|Malicious|Score|Verdicts|Categories|Brands|\n|---|---|---|---|---|\n{1}\n\n\n## Engines ##\n\n|Verdicts|Malicious|Score|MaliciousTotal|EnginesTotal|\n|---|---|---|---|---|\n{2}\n\n\n## Community ##\n\n|Malicious Votes|Benign Votes|Score|VotesTotal|\n|---|---|---|---|\n{0}",
                        "title": "format",
                        "type": "coa.Format",
                        "warn": false,
                        "z": 531
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".functionBlock": {
                                "text": "parseScanIO"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "custom function"
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 1
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn_grey.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            }
                        },
                        "block_code": "def parseScanIO(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None):\n    phantom.debug('parseScanIO() called')\n    results_data_1 = phantom.collect2(container=container, datapath=['detonateUrl:action_result.data'], action_results=results)\n    results_item_1_0 = [item[0] for item in results_data_1]\n\n    parseScanIO__community = None\n    parseScanIO__overall = None\n    parseScanIO__engines = None\n    parseScanIO__pincategory = None\n    parseScanIO__screenshot_url = None\n    parseScanIO__report_link = None\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n\n    # Write your custom code here...\n    #phantom.debug(results_item_1_0)\n    try:\n        community = results_item_1_0[0][0]['verdicts']['community']\n        phantom.debug('community: {}'.format(community))\n        parseScanIO__community = str(community['votesMalicious']) + \"|\" + str(community['votesBenign']) + \"|\" + str(community['score']) + \"|\" + str(community['votesTotal']) + \"|\"\n    except:\n        parseScanIO__community = 'No Data'\n    \n    try:\n        overall = results_item_1_0[0][0]['verdicts']['overall']\n        phantom.debug('overall: {}'.format(overall))\n        parseScanIO__overall = str(overall['malicious']) + \"|\" + str(overall['score']) + \"|\" + str(overall['hasVerdicts']) + \"|\" + str(overall['categories']) + \"|\" + str(overall['brands']) + \"|\"\n    except:\n        parseScanIO__overall = 'No Data'\n        \n    try:\n        engines = results_item_1_0[0][0]['verdicts']['engines']\n        phantom.debug('engines: {}'.format(engines))\n        parseScanIO__engines = str(engines['verdicts']) + \"|\" + str(engines['malicious']) + \"|\" + str(engines['score']) + \"|\" + str(engines['maliciousTotal']) + \"|\" + str(engines['enginesTotal']) + \"|\"\n    except:\n        parseScanIO__engines = 'No Data'\n        \n    try:\n        if len(results_item_1_0[0][0]['verdicts']['overall']['categories']) > 0:\n            parseScanIO__pincategory = \"|\".join(results_item_1_0[0][0]['verdicts']['overall']['categories'])\n        else:\n            parseScanIO__pincategory = None\n    except:\n        parseScanIO__pincategory = None\n        \n    try:\n        parseScanIO__screenshot_url = results_item_1_0[0][0]['task']['screenshotURL']\n    except:\n        parseScanIO__screenshot_url = None\n\n    try:\n        parseScanIO__report_link = results_item_1_0[0][0]['task']['reportURL']\n    except:\n        parseScanIO__report_link = None\n\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n\n    phantom.save_run_data(key='parseScanIO:community', value=json.dumps(parseScanIO__community))\n    phantom.save_run_data(key='parseScanIO:overall', value=json.dumps(parseScanIO__overall))\n    phantom.save_run_data(key='parseScanIO:engines', value=json.dumps(parseScanIO__engines))\n    phantom.save_run_data(key='parseScanIO:pincategory', value=json.dumps(parseScanIO__pincategory))\n    phantom.save_run_data(key='parseScanIO:screenshot_url', value=json.dumps(parseScanIO__screenshot_url))\n    phantom.save_run_data(key='parseScanIO:report_link', value=json.dumps(parseScanIO__report_link))\n    formatNote(container=container)\n    decision_11(container=container)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "detonateUrl",
                        "connection_type": "action",
                        "customCodeEndLineOffset": 13,
                        "customCodeStartLine": 15,
                        "custom_callback": "",
                        "custom_code": "def parseScanIO(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None):\n    phantom.debug('parseScanIO() called')\n    results_data_1 = phantom.collect2(container=container, datapath=['detonateUrl:action_result.data'], action_results=results)\n    results_item_1_0 = [item[0] for item in results_data_1]\n\n    parseScanIO__community = None\n    parseScanIO__overall = None\n    parseScanIO__engines = None\n    parseScanIO__pincategory = None\n    parseScanIO__screenshot_url = None\n    parseScanIO__report_link = None\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n\n    # Write your custom code here...\n    #phantom.debug(results_item_1_0)\n    try:\n        community = results_item_1_0[0][0]['verdicts']['community']\n        phantom.debug('community: {}'.format(community))\n        parseScanIO__community = str(community['votesMalicious']) + \"|\" + str(community['votesBenign']) + \"|\" + str(community['score']) + \"|\" + str(community['votesTotal']) + \"|\"\n    except:\n        parseScanIO__community = 'No Data'\n    \n    try:\n        overall = results_item_1_0[0][0]['verdicts']['overall']\n        phantom.debug('overall: {}'.format(overall))\n        parseScanIO__overall = str(overall['malicious']) + \"|\" + str(overall['score']) + \"|\" + str(overall['hasVerdicts']) + \"|\" + str(overall['categories']) + \"|\" + str(overall['brands']) + \"|\"\n    except:\n        parseScanIO__overall = 'No Data'\n        \n    try:\n        engines = results_item_1_0[0][0]['verdicts']['engines']\n        phantom.debug('engines: {}'.format(engines))\n        parseScanIO__engines = str(engines['verdicts']) + \"|\" + str(engines['malicious']) + \"|\" + str(engines['score']) + \"|\" + str(engines['maliciousTotal']) + \"|\" + str(engines['enginesTotal']) + \"|\"\n    except:\n        parseScanIO__engines = 'No Data'\n        \n    try:\n        if len(results_item_1_0[0][0]['verdicts']['overall']['categories']) > 0:\n            parseScanIO__pincategory = \"|\".join(results_item_1_0[0][0]['verdicts']['overall']['categories'])\n        else:\n            parseScanIO__pincategory = None\n    except:\n        parseScanIO__pincategory = None\n        \n    try:\n        parseScanIO__screenshot_url = results_item_1_0[0][0]['task']['screenshotURL']\n    except:\n        parseScanIO__screenshot_url = None\n\n    try:\n        parseScanIO__report_link = results_item_1_0[0][0]['task']['reportURL']\n    except:\n        parseScanIO__report_link = None\n\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n\n    phantom.save_run_data(key='parseScanIO:community', value=json.dumps(parseScanIO__community))\n    phantom.save_run_data(key='parseScanIO:overall', value=json.dumps(parseScanIO__overall))\n    phantom.save_run_data(key='parseScanIO:engines', value=json.dumps(parseScanIO__engines))\n    phantom.save_run_data(key='parseScanIO:pincategory', value=json.dumps(parseScanIO__pincategory))\n    phantom.save_run_data(key='parseScanIO:screenshot_url', value=json.dumps(parseScanIO__screenshot_url))\n    phantom.save_run_data(key='parseScanIO:report_link', value=json.dumps(parseScanIO__report_link))\n    formatNote(container=container)\n    decision_11(container=container)\n\n    return",
                        "custom_join": "",
                        "custom_name": "parseScanIO",
                        "description": "Parses the output from URLScan.io ready for generating the notes.",
                        "functionBlock": "custom function",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "e1d0e030-5364-480a-b4cc-e71848651c9c",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "legacy": true,
                        "line_end": 450,
                        "line_start": 378,
                        "message": "Configuring now",
                        "name": "custom function",
                        "notes": "Parses the output from URLScan.io ready for generating the notes.",
                        "number": 10,
                        "order": 16,
                        "outPorts": [
                            "out"
                        ],
                        "outputVariables": [
                            {
                                "position": 0,
                                "type": "",
                                "value": "community"
                            },
                            {
                                "position": 1,
                                "type": "",
                                "value": "overall"
                            },
                            {
                                "position": 2,
                                "type": "",
                                "value": "engines"
                            },
                            {
                                "position": 3,
                                "type": "",
                                "value": "pincategory"
                            },
                            {
                                "position": 4,
                                "type": "",
                                "value": "screenshot_url"
                            },
                            {
                                "position": 5,
                                "type": "",
                                "value": "report_link"
                            }
                        ],
                        "parameters": [
                            {
                                "position": 0,
                                "type": "",
                                "value": "detonateUrl:action_result.data"
                            }
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 420,
                            "y": 300
                        },
                        "previous_function": "",
                        "previous_name": "parseScanIO",
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "custom function",
                        "status": "deprecating",
                        "title": "custom function",
                        "type": "coa.FunctionBlock",
                        "userGeneratedCode": "\n    # Write your custom code here...\n    #phantom.debug(results_item_1_0)\n    try:\n        community = results_item_1_0[0][0]['verdicts']['community']\n        phantom.debug('community: {}'.format(community))\n        parseScanIO__community = str(community['votesMalicious']) + \"|\" + str(community['votesBenign']) + \"|\" + str(community['score']) + \"|\" + str(community['votesTotal']) + \"|\"\n    except:\n        parseScanIO__community = 'No Data'\n    \n    try:\n        overall = results_item_1_0[0][0]['verdicts']['overall']\n        phantom.debug('overall: {}'.format(overall))\n        parseScanIO__overall = str(overall['malicious']) + \"|\" + str(overall['score']) + \"|\" + str(overall['hasVerdicts']) + \"|\" + str(overall['categories']) + \"|\" + str(overall['brands']) + \"|\"\n    except:\n        parseScanIO__overall = 'No Data'\n        \n    try:\n        engines = results_item_1_0[0][0]['verdicts']['engines']\n        phantom.debug('engines: {}'.format(engines))\n        parseScanIO__engines = str(engines['verdicts']) + \"|\" + str(engines['malicious']) + \"|\" + str(engines['score']) + \"|\" + str(engines['maliciousTotal']) + \"|\" + str(engines['enginesTotal']) + \"|\"\n    except:\n        parseScanIO__engines = 'No Data'\n        \n    try:\n        if len(results_item_1_0[0][0]['verdicts']['overall']['categories']) > 0:\n            parseScanIO__pincategory = \"|\".join(results_item_1_0[0][0]['verdicts']['overall']['categories'])\n        else:\n            parseScanIO__pincategory = None\n    except:\n        parseScanIO__pincategory = None\n        \n    try:\n        parseScanIO__screenshot_url = results_item_1_0[0][0]['task']['screenshotURL']\n    except:\n        parseScanIO__screenshot_url = None\n\n    try:\n        parseScanIO__report_link = results_item_1_0[0][0]['task']['reportURL']\n    except:\n        parseScanIO__report_link = None\n\n",
                        "warn": false,
                        "z": 532
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#637282",
                                "transform": "rotate(45 30 70)"
                            },
                            ".inPorts>.port-0>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".number": {
                                "text": 9
                            },
                            ".outPorts>.port-0": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                },
                                "ref-x": 83,
                                "ref-y": 40
                            },
                            ".outPorts>.port-0>.port-body": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                }
                            },
                            ".outPorts>.port-1": {
                                "port": {
                                    "id": "out-2",
                                    "type": "out"
                                },
                                "ref-x": 41,
                                "ref-y": 82
                            },
                            ".outPorts>.port-1>.port-body": {
                                "port": {
                                    "id": "out-2",
                                    "type": "out"
                                }
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1
                            }
                        },
                        "block_code": "def decision_9(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None):\n    phantom.debug('decision_9() called')\n\n    # check for 'if' condition 1\n    matched = phantom.decision(\n        container=container,\n        conditions=[\n            [\"FilterNoisyURLs:custom_function:numURLs\", \"==\", 0],\n        ])\n\n    # call connected blocks if condition 1 matched\n    if matched:\n        add_comment_12(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function)\n        return\n\n    # call connected blocks for 'else' condition 2\n    RequestURL(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "",
                        "connection_type": "",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "",
                        "description": "",
                        "hasElse": true,
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "ad179bb0-4f77-4ce1-abbc-4c794cedb42c",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 294,
                        "line_start": 274,
                        "name": "decision",
                        "notes": "",
                        "number": 9,
                        "order": 10,
                        "outPorts": [
                            "out-1",
                            "out-2"
                        ],
                        "outputs": [
                            {
                                "conditions": [
                                    {
                                        "comparison": "==",
                                        "data_type": "",
                                        "param": "FilterNoisyURLs:custom_function:numURLs",
                                        "value": "0"
                                    }
                                ],
                                "display": "If",
                                "logic": "and",
                                "type": "if"
                            },
                            {
                                "conditions": [
                                    {
                                        "comparison": "==",
                                        "data_type": "",
                                        "param": "",
                                        "value": ""
                                    }
                                ],
                                "display": "Else",
                                "logic": "and",
                                "type": "else"
                            }
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 80,
                            "y": 0
                        },
                        "previous_function": "",
                        "previous_name": "decision_9",
                        "show_number": true,
                        "size": {
                            "height": 82,
                            "width": 82
                        },
                        "state": "decision",
                        "status": "",
                        "type": "coa.Decision",
                        "warn": "",
                        "z": 533
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".format": {
                                "text": "RequestURL"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out-1": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out-1>.port-body": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "format"
                            },
                            "g.code image": {
                                "opacity": 1
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            }
                        },
                        "block_code": "def RequestURL(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None):\n    phantom.debug('RequestURL() called')\n    \n    template = \"\"\"Processing RequestURL : \n%%\n{0}\n%%\"\"\"\n\n    # parameter list for template variable replacement\n    parameters = [\n        \"FilterNoisyURLs:custom_function:requestURLsforExternalLookup\",\n    ]\n\n    phantom.format(container=container, template=template, parameters=parameters, name=\"RequestURL\")\n\n    Processing_URL(container=container)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "",
                        "connection_type": "",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "RequestURL",
                        "description": "",
                        "format": "format",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "1dadb27c-e8b7-4196-8589-4da62781ee60",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 52,
                        "line_start": 33,
                        "message": "Configuring now",
                        "name": "format",
                        "notes": "Processing Request URL",
                        "number": 2,
                        "order": 3,
                        "outPorts": [
                            "out-1"
                        ],
                        "parameters": [
                            {
                                "position": 0,
                                "type": "",
                                "value": "FilterNoisyURLs:custom_function:requestURLsforExternalLookup"
                            }
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": -360,
                            "y": 160
                        },
                        "previous_function": "",
                        "previous_name": "RequestURL",
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "format",
                        "status": "",
                        "template": "Processing RequestURL : \n%%\n{0}\n%%",
                        "title": "format",
                        "type": "coa.Format",
                        "warn": false,
                        "z": 534
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#637282",
                                "transform": "rotate(45 30 70)"
                            },
                            ".inPorts>.port-0>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".number": {
                                "text": 10
                            },
                            ".outPorts>.port-0": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                },
                                "ref-x": 83,
                                "ref-y": 40
                            },
                            ".outPorts>.port-0>.port-body": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                }
                            },
                            ".outPorts>.port-1": {
                                "port": {
                                    "id": "out-2",
                                    "type": "out"
                                },
                                "ref-x": 41,
                                "ref-y": 82
                            },
                            ".outPorts>.port-1>.port-body": {
                                "port": {
                                    "id": "out-2",
                                    "type": "out"
                                }
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1
                            }
                        },
                        "block_code": "def detonateStatus(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None):\n    phantom.debug('detonateStatus() called')\n\n    # check for 'if' condition 1\n    matched = phantom.decision(\n        container=container,\n        action_results=results,\n        conditions=[\n            [\"detonateUrl:action_result.status\", \"==\", \"failed\"],\n        ])\n\n    # call connected blocks if condition 1 matched\n    if matched:\n        add_comment_add_note_11(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function)\n        return\n\n    # call connected blocks for 'else' condition 2\n    parseScanIO(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "detonateUrl",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "detonateStatus",
                        "description": "",
                        "hasElse": true,
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "6342db74-e3c4-42fb-bfa9-74f64061c314",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 315,
                        "line_start": 294,
                        "name": "decision",
                        "notes": "",
                        "number": 10,
                        "order": 11,
                        "outPorts": [
                            "out-1",
                            "out-2"
                        ],
                        "outputs": [
                            {
                                "conditions": [
                                    {
                                        "comparison": "==",
                                        "data_type": "",
                                        "param": "detonateUrl:action_result.status",
                                        "value": "failed"
                                    }
                                ],
                                "display": "If",
                                "logic": "and",
                                "type": "if"
                            },
                            {
                                "conditions": [
                                    {
                                        "comparison": "==",
                                        "data_type": "",
                                        "param": "",
                                        "value": ""
                                    }
                                ],
                                "display": "Else",
                                "logic": "and",
                                "type": "else"
                            }
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 300,
                            "y": 160
                        },
                        "previous_function": "",
                        "previous_name": "detonateStatus",
                        "show_number": true,
                        "size": {
                            "height": 82,
                            "width": 82
                        },
                        "state": "decision",
                        "status": "",
                        "type": "coa.Decision",
                        "warn": "",
                        "z": 536
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "api": "add comment",
                        "attrs": {
                            ".api": {
                                "text": "Processing URL"
                            },
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "API"
                            },
                            "g.code image": {
                                "opacity": 1
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            }
                        },
                        "block_code": "def Processing_URL(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None):\n    phantom.debug('Processing_URL() called')\n\n    formatted_data_1 = phantom.get_format_data(name='RequestURL')\n\n    phantom.comment(container=container, comment=formatted_data_1)\n    detonateUrl(container=container)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "color": "",
                        "configured": [
                            {
                                "addCommentComment": "RequestURL:formatted_data",
                                "key": "add-comment"
                            }
                        ],
                        "connected_to_start": true,
                        "connection_name": "",
                        "connection_type": "",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "Processing URL",
                        "description": "",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "94f8c327-7f57-4be9-be22-b307adc8bbe3",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 62,
                        "line_start": 52,
                        "message": "Configuring now",
                        "name": "add comment",
                        "notes": "Add comment to activity pane",
                        "number": 3,
                        "order": 4,
                        "outPorts": [
                            "out"
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": -140,
                            "y": 160
                        },
                        "previous_function": "",
                        "previous_name": "Processing_URL",
                        "show_number": false,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "api",
                        "status": "",
                        "title": "API",
                        "type": "coa.API",
                        "warn": false,
                        "z": 537
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".format": {
                                "text": "NoLookupsFormatNote"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out-1": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out-1>.port-body": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "format"
                            },
                            "g.code image": {
                                "opacity": 1
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            }
                        },
                        "block_code": "def NoLookupsFormatNote(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None):\n    phantom.debug('NoLookupsFormatNote() called')\n    \n    template = \"\"\"## POV_Network_URL_Enrich ##\n\n**Playbook Result**\n\nNo external URL lookups were conducted - Each URL is either in the top500 or globalconfig custom lists. No action required. \n\nFor reference - these are the URLs in the container artifacts. \n\n| URL |\n|---|\n%%\n| {0} |\n%%\"\"\"\n\n    # parameter list for template variable replacement\n    parameters = [\n        \"FilterNoisyURLs:custom_function:removedURLs\",\n    ]\n\n    phantom.format(container=container, template=template, parameters=parameters, name=\"NoLookupsFormatNote\")\n\n    add_note_13(container=container)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "",
                        "connection_type": "",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "NoLookupsFormatNote",
                        "description": "",
                        "format": "format",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "fb988c90-2d4b-4a1e-a451-b47aa0403847",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 363,
                        "line_start": 335,
                        "message": "Configuring now",
                        "name": "format",
                        "notes": "Formats the note with URLs that have been filtered to reduce noise. ",
                        "number": 3,
                        "order": 14,
                        "outPorts": [
                            "out-1"
                        ],
                        "parameters": [
                            {
                                "position": 0,
                                "type": "",
                                "value": "FilterNoisyURLs:custom_function:removedURLs"
                            }
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 640,
                            "y": 0
                        },
                        "previous_function": "",
                        "previous_name": "NoLookupsFormatNote",
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "format",
                        "status": "",
                        "template": "## POV_Network_URL_Enrich ##\n\n**Playbook Result**\n\nNo external URL lookups were conducted - Each URL is either in the top500 or globalconfig custom lists. No action required. \n\nFor reference - these are the URLs in the container artifacts. \n\n| URL |\n|---|\n%%\n| {0} |\n%%",
                        "title": "format",
                        "type": "coa.Format",
                        "warn": false,
                        "z": 538
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "api": "add note",
                        "attrs": {
                            ".api": {
                                "text": "urlScanIONote"
                            },
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "API"
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            }
                        },
                        "block_code": "def urlScanIONote(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None):\n    phantom.debug('urlScanIONote() called')\n\n    formatted_data_1 = phantom.get_format_data(name='formatNote')\n\n    note_title = \"URL Scan Results\"\n    note_content = formatted_data_1\n    note_format = \"markdown\"\n    phantom.add_note(container=container, note_type=\"general\", title=note_title, content=note_content, note_format=note_format)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "color": "",
                        "configured": [
                            {
                                "addNoteContent": "formatNote:formatted_data",
                                "addNoteNoteFormat": "markdown",
                                "addNoteTitle": "URL Scan Results",
                                "key": "add-note"
                            }
                        ],
                        "connected_to_start": true,
                        "connection_name": "detonateUrl",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "urlScanIONote",
                        "description": "",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "90b37c68-bc9b-415b-989d-d7a8a3cdbd76",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 507,
                        "line_start": 495,
                        "message": "Configuring now",
                        "name": "add note",
                        "notes": "Add Notes for urlscan",
                        "number": 15,
                        "order": 18,
                        "outPorts": [
                            "out"
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 1020,
                            "y": 300
                        },
                        "previous_function": "",
                        "previous_name": "urlScanIONote",
                        "show_number": false,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "api",
                        "status": "",
                        "title": "API",
                        "type": "coa.API",
                        "warn": false,
                        "z": 539
                    }
                ]
            },
            "notes": "Relies on urlscan, and the phantom app (min version 2.1.29)"
        },
        "python_version": "3",
        "schema": 3,
        "version": "4.9.33153"
    },
    "create_time": "2021-07-27T00:47:15.318837+00:00",
    "draft_mode": false,
    "labels": [
        "*"
    ],
    "tags": []
}