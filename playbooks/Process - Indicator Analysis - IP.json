{
    "blockly": false,
    "blockly_xml": "<xml></xml>",
    "category": "ESCU",
    "coa": {
        "data": {
            "clean": true,
            "code_block": "",
            "description": "This playbook processes IP addresses not in bogon_list and creates a task note for every indicator for review by the analyst",
            "hash": "0139094b72bdda089df71908a0e4ce3102d0f5e5",
            "joint": {
                "cells": [
                    {
                        "0": "S",
                        "1": "T",
                        "2": "A",
                        "3": "R",
                        "4": "T",
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "ref-x": 33,
                                "ref-y": 8,
                                "text": "START"
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.icon image": {
                                "ref-x": 13,
                                "xlink:href": "/inc/coa/img/block_icon_start.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            }
                        },
                        "block_code": "def on_start(container):\n    phantom.debug('on_start() called')\n    \n    # call 'check_ip_address' block\n    check_ip_address(container=container)\n\n    return",
                        "callback_code": "# read-only block view not available",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "",
                        "connection_type": "",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "",
                        "description": "",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "0d75d904-721f-445e-a6e1-b1d349bb4515",
                        "inPorts": [],
                        "join_code": "# read-only block view not available",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 16,
                        "line_start": 8,
                        "name": "",
                        "notes": "",
                        "number": 0,
                        "order": 1,
                        "outPorts": [
                            "out"
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": -320,
                            "y": -160
                        },
                        "previous_function": "",
                        "previous_name": "",
                        "show_number": true,
                        "size": {
                            "height": 54,
                            "width": 80
                        },
                        "status": "",
                        "title": "START",
                        "type": "coa.StartEnd",
                        "warn": false,
                        "z": 1
                    },
                    {
                        "0": "E",
                        "1": "N",
                        "2": "D",
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".title": {
                                "text": "END"
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.icon image": {
                                "xlink:href": "/inc/coa/img/block_icon_end.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            }
                        },
                        "block_code": "def on_finish(container, summary):\n    phantom.debug('on_finish() called')\n    # This function is called after all actions are completed.\n    # summary of all the action and/or all details of actions\n    # can be collected here.\n\n    # summary_json = phantom.get_summary()\n    # if 'result' in summary_json:\n        # for action_result in summary_json['result']:\n            # if 'action_run_id' in action_result:\n                # action_results = phantom.get_action_results(action_run_id=action_result['action_run_id'], result_data=False, flatten=False)\n                # phantom.debug(action_results)\n\n    return",
                        "callback_code": "# read-only block view not available",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "create task notes",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "",
                        "description": "",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "6e953e17-9b70-4c48-b2bd-a13c7a29b009",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "# read-only block view not available",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 701,
                        "line_start": 688,
                        "name": "",
                        "notes": "",
                        "number": 0,
                        "order": 18,
                        "outPorts": [],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 1380,
                            "y": 280
                        },
                        "previous_function": "",
                        "previous_name": "",
                        "show_number": true,
                        "size": {
                            "height": 54,
                            "width": 80
                        },
                        "status": "",
                        "title": "END",
                        "type": "coa.StartEnd",
                        "warn": false,
                        "z": 2
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "73526c24-64aa-4846-b4cf-0a8a478c3c81",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "0d75d904-721f-445e-a6e1-b1d349bb4515",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "5e8c9ae4-35bd-49ad-9ea2-ce4ada576dc2",
                            "selector": ".port-body[type=\"input\"]"
                        },
                        "type": "link",
                        "z": 3
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "9c65e76f-b0e0-4627-8a21-5c2bbe8163ed",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "5e8c9ae4-35bd-49ad-9ea2-ce4ada576dc2",
                            "port": "out-1",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "a8167b06-2400-4a02-8e58-0f7cd574953b",
                            "selector": ".port-body[type=\"input\"]"
                        },
                        "type": "link",
                        "z": 6
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "76b7fac7-397a-49c1-b131-45a2f657b097",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "5e8c9ae4-35bd-49ad-9ea2-ce4ada576dc2",
                            "port": "out-2",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(2) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "7e8a5c86-a3a1-46cb-a45f-df00b5475e2e",
                            "selector": ".port-body[type=\"input\"]"
                        },
                        "type": "link",
                        "z": 492
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "9cdc6ec0-3f2d-422b-9931-7b689e992fb0",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "7e8a5c86-a3a1-46cb-a45f-df00b5475e2e",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "6e953e17-9b70-4c48-b2bd-a13c7a29b009",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 494
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "92266922-6feb-4309-8fa5-574859d68512",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "c040f191-9789-4f2b-b4ed-6ed6265ea45e",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "2e08bb76-1525-4612-ac24-f813b75d0e56",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 526
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "b414afe7-1e64-46a5-9b6e-552dd1654107",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "eb0ab619-9008-4139-ade7-729e2f59b66e",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "9220597e-477b-4a65-bf04-0ea9e9fcd19a",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 527
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "9b4f8d6e-a72d-41c7-a872-ea0181ec807e",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "0413c9fc-fee8-433f-ab45-9458da4c6133",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "571ee01f-7cef-4f30-b126-0ab3b76dff25",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 528
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "f1c2c83d-f553-4a4d-86d6-5a95252a4b50",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "cc64ef72-b0d9-4d5b-babf-84b7d9a1582c",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "0bf4bc4e-04e8-4b45-be55-deaaa3f1626e",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 529
                    },
                    {
                        "action": "ip intelligence",
                        "action_type": "investigate",
                        "active": false,
                        "active_keys": {},
                        "active_values": {
                            "ip": "merge_ip_addresses:custom_function_result.data.*.item"
                        },
                        "angle": 0,
                        "app": "",
                        "appid": "",
                        "approver": "",
                        "assets": [
                            {
                                "action": "ip intelligence",
                                "actions": [
                                    "ip reputation",
                                    "ip intelligence",
                                    "domain reputation",
                                    "domain intelligence",
                                    "file reputation",
                                    "file intelligence",
                                    "vulnerability reputation",
                                    "vulnerability intelligence",
                                    "url reputation",
                                    "url intelligence",
                                    "alert rule lookup",
                                    "alert data lookup",
                                    "test connectivity"
                                ],
                                "active": true,
                                "app_name": "Recorded Future",
                                "app_version": "1.2.0",
                                "appid": "6efe0e1b-76ac-4ffd-8fa0-ac58fd6efd77",
                                "asset_name": "recorded future",
                                "config_type": "asset",
                                "count": 0,
                                "fields": {
                                    "ip": "merge_ip_addresses:custom_function_result.data.*.item"
                                },
                                "has_app": true,
                                "id": 203,
                                "loaded": false,
                                "missing": false,
                                "name": "recorded future",
                                "output": [
                                    {
                                        "contains": [
                                            "recordedfuture result status"
                                        ],
                                        "data_path": "action_result.status",
                                        "data_type": "string",
                                        "example_values": [
                                            "success",
                                            "failed"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "ip",
                                            "ipv6"
                                        ],
                                        "data_path": "action_result.parameter.ip",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "recordedfuture entity id"
                                        ],
                                        "data_path": "action_result.data.*.entity.id",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "ip",
                                            "ipv6"
                                        ],
                                        "data_path": "action_result.data.*.entity.name",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "recordedfuture entity type"
                                        ],
                                        "data_path": "action_result.data.*.entity.type",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "recordedfuture intelligence card url"
                                        ],
                                        "data_path": "action_result.data.*.intelCard",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "recordedfuture location asn"
                                        ],
                                        "data_path": "action_result.data.*.location.asn",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "recordedfuture location cidr id"
                                        ],
                                        "data_path": "action_result.data.*.location.cidr.id",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "recordedfuture location cidr name"
                                        ],
                                        "data_path": "action_result.data.*.location.cidr.name",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "recordedfuture location cidr type"
                                        ],
                                        "data_path": "action_result.data.*.location.cidr.type",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "recordedfuture location city"
                                        ],
                                        "data_path": "action_result.data.*.location.location.city",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "recordedfuture location continent"
                                        ],
                                        "data_path": "action_result.data.*.location.location.continent",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "recordedfuture location country"
                                        ],
                                        "data_path": "action_result.data.*.location.location.country",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "recordedfuture location organization"
                                        ],
                                        "data_path": "action_result.data.*.location.organization",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "recordedfuture metrics type"
                                        ],
                                        "data_path": "action_result.data.*.metrics.*.type",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "recordedfuture metrics value"
                                        ],
                                        "data_path": "action_result.data.*.metrics.*.value",
                                        "data_type": "numeric"
                                    },
                                    {
                                        "contains": [
                                            "recordedfuture related entities count"
                                        ],
                                        "data_path": "action_result.data.*.relatedEntities.*.entities.*.count",
                                        "data_type": "numeric"
                                    },
                                    {
                                        "contains": [
                                            "recordedfuture entity id"
                                        ],
                                        "data_path": "action_result.data.*.relatedEntities.*.entities.*.entity.id",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "recordedfuture entity name"
                                        ],
                                        "data_path": "action_result.data.*.relatedEntities.*.entities.*.entity.name",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "recordedfuture entity type"
                                        ],
                                        "data_path": "action_result.data.*.relatedEntities.*.entities.*.entity.type",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "recordedfuture related entity type"
                                        ],
                                        "data_path": "action_result.data.*.relatedEntities.*.type",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "recordedfuture risk criticality"
                                        ],
                                        "data_path": "action_result.data.*.risk.criticality",
                                        "data_type": "numeric"
                                    },
                                    {
                                        "contains": [
                                            "recordedfuture risk criticality label"
                                        ],
                                        "data_path": "action_result.data.*.risk.criticalityLabel",
                                        "data_type": "string",
                                        "example_values": [
                                            "Very Malicious"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "recordedfuture risk criticality"
                                        ],
                                        "data_path": "action_result.data.*.risk.evidenceDetails.*.criticality",
                                        "data_type": "numeric"
                                    },
                                    {
                                        "contains": [
                                            "recordedfuture risk criticality label"
                                        ],
                                        "data_path": "action_result.data.*.risk.evidenceDetails.*.criticalityLabel",
                                        "data_type": "string",
                                        "example_values": [
                                            "Unusual"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "recordedfuture evidence string"
                                        ],
                                        "data_path": "action_result.data.*.risk.evidenceDetails.*.evidenceString",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "recordedfuture mitigation string"
                                        ],
                                        "data_path": "action_result.data.*.risk.evidenceDetails.*.mitigationString",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "recordedfuture evidence rule"
                                        ],
                                        "data_path": "action_result.data.*.risk.evidenceDetails.*.rule",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "recordedfuture evidence timestamp"
                                        ],
                                        "data_path": "action_result.data.*.risk.evidenceDetails.*.timestamp",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "recordedfuture risk string"
                                        ],
                                        "data_path": "action_result.data.*.risk.riskString",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "recordedfuture risk summary"
                                        ],
                                        "data_path": "action_result.data.*.risk.riskSummary",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "recordedfuture risk rules"
                                        ],
                                        "data_path": "action_result.data.*.risk.rules",
                                        "data_type": "numeric"
                                    },
                                    {
                                        "contains": [
                                            "recordedfuture risk score"
                                        ],
                                        "data_path": "action_result.data.*.risk.score",
                                        "data_type": "numeric"
                                    },
                                    {
                                        "contains": [
                                            "recordedfuture evidence firstseen"
                                        ],
                                        "data_path": "action_result.data.*.timestamps.firstSeen",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "recordedfuture evidence lastseen"
                                        ],
                                        "data_path": "action_result.data.*.timestamps.lastSeen",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "recordedfuture risk criticality label"
                                        ],
                                        "data_path": "action_result.summary.criticalityLabel",
                                        "data_type": "string",
                                        "example_values": [
                                            "Very Malicious"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "recordedfuture evidence lastseen"
                                        ],
                                        "data_path": "action_result.summary.lastSeen",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "recordedfuture risk summary"
                                        ],
                                        "data_path": "action_result.summary.riskSummary",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "recordedfuture result message"
                                        ],
                                        "data_path": "action_result.message",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "recordedfuture total objects"
                                        ],
                                        "data_path": "summary.total_objects",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "recordedfuture total objects successful"
                                        ],
                                        "data_path": "summary.total_objects_successful",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1
                                        ]
                                    }
                                ],
                                "parameters": {
                                    "ip": {
                                        "contains": [
                                            "ip",
                                            "ipv6"
                                        ],
                                        "data_type": "string",
                                        "default": null,
                                        "description": "IP to query",
                                        "key": "ip",
                                        "order": 0,
                                        "primary": true,
                                        "required": true
                                    }
                                },
                                "product_name": "Recorded Future App for Phantom",
                                "product_vendor": "Recorded Future, Inc",
                                "targets": "203",
                                "type": "reputation"
                            }
                        ],
                        "attrs": {
                            ".action": {
                                "text": "ip intel"
                            },
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "Investigate"
                            },
                            "g.approver image": {
                                "opacity": 1
                            },
                            "g.code image": {
                                "opacity": 1
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.icon image": {
                                "xlink:href": "/inc/coa/img/block_icon_investigate.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            },
                            "g.timer image": {
                                "opacity": 1
                            }
                        },
                        "block_code": "def ip_intel(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('ip_intel() called')\n        \n    #phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))\n    \n    # collect data for 'ip_intel' call\n    custom_function_results_data_1 = phantom.collect2(container=container, datapath=['merge_ip_addresses:custom_function_result.data.*.item'], action_results=results)\n\n    parameters = []\n    \n    # build parameters list for 'ip_intel' call\n    for custom_function_results_item_1 in custom_function_results_data_1:\n        if custom_function_results_item_1[0]:\n            parameters.append({\n                'ip': custom_function_results_item_1[0],\n            })\n\n    phantom.act(action=\"ip intelligence\", parameters=parameters, assets=['recorded future'], callback=intel_format, name=\"ip_intel\")\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": true,
                        "color": "",
                        "connected_to_start": true,
                        "connection_name": "merge ip addresses",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "ip intel",
                        "delay": 0,
                        "description": "",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "cc64ef72-b0d9-4d5b-babf-84b7d9a1582c",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 104,
                        "line_end": 107,
                        "line_start": 86,
                        "message": "Configuring now",
                        "name": "ip intelligence",
                        "notes": "Gets IP intelligence for the ip address",
                        "number": 1,
                        "order": 5,
                        "outPorts": [
                            "out"
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 360,
                            "y": 180
                        },
                        "previous_function": "",
                        "previous_name": "ip_intel",
                        "required_params": {
                            "ip": true
                        },
                        "reviewer": "",
                        "show_number": false,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "action_assets",
                        "status": "",
                        "title": "Investigate",
                        "type": "coa.Action",
                        "warn": false,
                        "z": 666
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "f8eb4553-07f2-49f1-9103-b5a96eb32851",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "9b639c8c-0f93-40e7-b9bc-2edeeec48344",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "f9dc4405-ff78-4e6e-a8d6-986131e4b52f",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 707
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "8f4992b8-4891-4b31-b3f9-4f900f041ef6",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "2e08bb76-1525-4612-ac24-f813b75d0e56",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "9b639c8c-0f93-40e7-b9bc-2edeeec48344",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 719
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "8f516d58-77c0-4eaf-826c-54ca43217e28",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "9220597e-477b-4a65-bf04-0ea9e9fcd19a",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "9b639c8c-0f93-40e7-b9bc-2edeeec48344",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 720
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "424be239-55fa-49ea-b4e6-98967a9dc382",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "571ee01f-7cef-4f30-b126-0ab3b76dff25",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "9b639c8c-0f93-40e7-b9bc-2edeeec48344",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 721
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "32e6d607-e37a-4110-8e9b-6ccbfbb64831",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "0bf4bc4e-04e8-4b45-be55-deaaa3f1626e",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "9b639c8c-0f93-40e7-b9bc-2edeeec48344",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 722
                    },
                    {
                        "action": "whois ip",
                        "action_type": "investigate",
                        "active": false,
                        "active_keys": {},
                        "active_values": {
                            "ip": "merge_ip_addresses:custom_function_result.data.*.item"
                        },
                        "angle": 0,
                        "app": "",
                        "appid": "",
                        "approver": "",
                        "assets": [
                            {
                                "action": "whois ip",
                                "actions": [
                                    "whois ip",
                                    "whois domain"
                                ],
                                "active": true,
                                "app_name": "WHOIS",
                                "app_version": "1.2.41",
                                "appid": "e6723c2e-06ef-415a-8098-62c46c1cb71f",
                                "asset_name": "whois",
                                "config_type": "asset",
                                "count": 0,
                                "fields": {
                                    "ip": "merge_ip_addresses:custom_function_result.data.*.item"
                                },
                                "has_app": true,
                                "id": 5,
                                "loaded": false,
                                "missing": false,
                                "name": "whois",
                                "output": [
                                    {
                                        "data_path": "action_result.status",
                                        "data_type": "string",
                                        "example_values": [
                                            "success",
                                            "failed"
                                        ]
                                    },
                                    {
                                        "column_name": "IP",
                                        "column_order": 0,
                                        "contains": [
                                            "ip",
                                            "ipv6"
                                        ],
                                        "data_path": "action_result.parameter.ip",
                                        "data_type": "string",
                                        "example_values": [
                                            "127.127.127.127"
                                        ]
                                    },
                                    {
                                        "column_name": "ASN",
                                        "column_order": 1,
                                        "data_path": "action_result.data.*.asn",
                                        "data_type": "string",
                                        "example_values": [
                                            "18207"
                                        ]
                                    },
                                    {
                                        "column_name": "ASN CIDR",
                                        "column_order": 2,
                                        "data_path": "action_result.data.*.asn_cidr",
                                        "data_type": "string",
                                        "example_values": [
                                            "127.127.127.127/24"
                                        ]
                                    },
                                    {
                                        "column_name": "ASN Country Code",
                                        "column_order": 3,
                                        "data_path": "action_result.data.*.asn_country_code",
                                        "data_type": "string",
                                        "example_values": [
                                            "US"
                                        ]
                                    },
                                    {
                                        "column_name": "ASN Date",
                                        "column_order": 4,
                                        "data_path": "action_result.data.*.asn_date",
                                        "data_type": "string",
                                        "example_values": [
                                            "2000-04-27"
                                        ]
                                    },
                                    {
                                        "column_name": "ASN Registry",
                                        "column_order": 5,
                                        "data_path": "action_result.data.*.asn_registry",
                                        "data_type": "string",
                                        "example_values": [
                                            "apnic"
                                        ]
                                    },
                                    {
                                        "column_name": "Abuse Emails",
                                        "column_order": 6,
                                        "contains": [
                                            "email"
                                        ],
                                        "data_path": "action_result.data.*.nets.*.abuse_emails",
                                        "data_type": "string"
                                    },
                                    {
                                        "column_name": "Address",
                                        "column_order": 7,
                                        "data_path": "action_result.data.*.nets.*.address",
                                        "data_type": "string",
                                        "example_values": [
                                            "1600 AmphiLane Markway"
                                        ]
                                    },
                                    {
                                        "column_name": "CIDR",
                                        "column_order": 8,
                                        "data_path": "action_result.data.*.nets.*.cidr",
                                        "data_type": "string",
                                        "example_values": [
                                            "127.127.127.127/20"
                                        ]
                                    },
                                    {
                                        "column_name": "City",
                                        "column_order": 9,
                                        "data_path": "action_result.data.*.nets.*.city",
                                        "data_type": "string",
                                        "example_values": [
                                            "San Franscisco"
                                        ]
                                    },
                                    {
                                        "column_name": "Country",
                                        "column_order": 10,
                                        "data_path": "action_result.data.*.nets.*.country",
                                        "data_type": "string",
                                        "example_values": [
                                            "US"
                                        ]
                                    },
                                    {
                                        "column_name": "Created",
                                        "column_order": 11,
                                        "data_path": "action_result.data.*.nets.*.created",
                                        "data_type": "string"
                                    },
                                    {
                                        "column_name": "Description",
                                        "column_order": 12,
                                        "data_path": "action_result.data.*.nets.*.description",
                                        "data_type": "string",
                                        "example_values": [
                                            "Level 3 Test, LLC"
                                        ]
                                    },
                                    {
                                        "column_name": "Emails",
                                        "column_order": 13,
                                        "contains": [
                                            "email"
                                        ],
                                        "data_path": "action_result.data.*.nets.*.emails",
                                        "data_type": "string",
                                        "example_values": [
                                            "ipaddressing@level3.com"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.nets.*.handle",
                                        "data_type": "string",
                                        "example_values": [
                                            "NET-8-8-8-0-1"
                                        ]
                                    },
                                    {
                                        "column_name": "Misc Emails",
                                        "column_order": 20,
                                        "contains": [
                                            "email"
                                        ],
                                        "data_path": "action_result.data.*.nets.*.misc_emails",
                                        "data_type": "string"
                                    },
                                    {
                                        "column_name": "Name",
                                        "column_order": 14,
                                        "data_path": "action_result.data.*.nets.*.name",
                                        "data_type": "string",
                                        "example_values": [
                                            "LVLT-GOGL-8-8-8"
                                        ]
                                    },
                                    {
                                        "column_name": "Postal Code",
                                        "column_order": 15,
                                        "data_path": "action_result.data.*.nets.*.postal_code",
                                        "data_type": "string",
                                        "example_values": [
                                            "94043"
                                        ]
                                    },
                                    {
                                        "column_name": "Range",
                                        "column_order": 16,
                                        "data_path": "action_result.data.*.nets.*.range",
                                        "data_type": "string",
                                        "example_values": [
                                            "127.127.127.127 - 127.127.143.255"
                                        ]
                                    },
                                    {
                                        "column_name": "State",
                                        "column_order": 17,
                                        "data_path": "action_result.data.*.nets.*.state",
                                        "data_type": "string",
                                        "example_values": [
                                            "CA"
                                        ]
                                    },
                                    {
                                        "column_name": "Tech Emails",
                                        "column_order": 18,
                                        "contains": [
                                            "email"
                                        ],
                                        "data_path": "action_result.data.*.nets.*.tech_emails",
                                        "data_type": "string"
                                    },
                                    {
                                        "column_name": "Updated",
                                        "column_order": 19,
                                        "data_path": "action_result.data.*.nets.*.updated",
                                        "data_type": "string",
                                        "example_values": [
                                            "2014-03-14"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.nir",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "ip"
                                        ],
                                        "data_path": "action_result.data.*.query",
                                        "data_type": "string",
                                        "example_values": [
                                            "127.127.127.127"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.raw",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.raw_referral",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.referral",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.summary.asn",
                                        "data_type": "string",
                                        "example_values": [
                                            "18207"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.summary.country_code",
                                        "data_type": "string",
                                        "example_values": [
                                            "US"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.summary.nets.*.address",
                                        "data_type": "string",
                                        "example_values": [
                                            "100 Century DriveLinks"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.summary.nets.*.range",
                                        "data_type": "string",
                                        "example_values": [
                                            "127.127.127.127 - 127.127.143.255"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.summary.registry",
                                        "data_type": "string",
                                        "example_values": [
                                            "apnic"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.message",
                                        "data_type": "string",
                                        "example_values": [
                                            "Registry: arin ASN: 15169 Country: US Nets: Range: 8.0.0.0 - 8.127.255.255 Address: 100 Century DriveLinks Range: None Address: 1600 AmphiLane Markway"
                                        ]
                                    },
                                    {
                                        "data_path": "summary.total_objects",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1
                                        ]
                                    },
                                    {
                                        "data_path": "summary.total_objects_successful",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1
                                        ]
                                    }
                                ],
                                "parameters": {
                                    "ip": {
                                        "contains": [
                                            "ip",
                                            "ipv6"
                                        ],
                                        "data_type": "string",
                                        "default": null,
                                        "description": "IP to query",
                                        "key": "ip",
                                        "order": 0,
                                        "primary": true,
                                        "required": true
                                    }
                                },
                                "product_name": "Whois",
                                "product_vendor": "Generic",
                                "targets": "5",
                                "type": "information"
                            }
                        ],
                        "attrs": {
                            ".action": {
                                "text": "whois ip"
                            },
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "Investigate"
                            },
                            "g.approver image": {
                                "opacity": 1
                            },
                            "g.code image": {
                                "opacity": 1
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.icon image": {
                                "xlink:href": "/inc/coa/img/block_icon_investigate.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            },
                            "g.timer image": {
                                "opacity": 1
                            }
                        },
                        "block_code": "def whois_ip(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('whois_ip() called')\n        \n    #phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))\n    \n    # collect data for 'whois_ip' call\n    custom_function_results_data_1 = phantom.collect2(container=container, datapath=['merge_ip_addresses:custom_function_result.data.*.item'], action_results=results)\n\n    parameters = []\n    \n    # build parameters list for 'whois_ip' call\n    for custom_function_results_item_1 in custom_function_results_data_1:\n        if custom_function_results_item_1[0]:\n            parameters.append({\n                'ip': custom_function_results_item_1[0],\n            })\n\n    phantom.act(action=\"whois ip\", parameters=parameters, assets=['whois'], callback=whois_format, name=\"whois_ip\")\n\n    return",
                        "callback_code": "",
                        "callback_start": 118,
                        "callsback": true,
                        "color": "",
                        "connected_to_start": true,
                        "connection_name": "merge ip addresses",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "whois ip",
                        "delay": 0,
                        "description": "",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "eb0ab619-9008-4139-ade7-729e2f59b66e",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 117,
                        "line_end": 128,
                        "line_start": 107,
                        "message": "Configuring now",
                        "name": "whois ip",
                        "notes": "Gets whois information  for the ip address",
                        "number": 1,
                        "order": 6,
                        "outPorts": [
                            "out"
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 360,
                            "y": -60
                        },
                        "previous_function": "",
                        "previous_name": "whois_ip",
                        "required_params": {
                            "ip": true
                        },
                        "reviewer": "",
                        "show_number": false,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "action_assets",
                        "status": "",
                        "title": "Investigate",
                        "type": "coa.Action",
                        "warn": false,
                        "z": 765
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".functionBlock": {
                                "text": "indicator analysis"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "custom function"
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 1
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn_grey.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            }
                        },
                        "block_code": "def indicator_analysis(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('indicator_analysis() called')\n    \n    results_data_1 = phantom.collect2(container=container, datapath=['geolocation:action_result.parameter.ip'], action_results=results)\n    results_data_2 = phantom.collect2(container=container, datapath=['ip_reputation:action_result.parameter.ip', 'ip_reputation:action_result.summary.downloaded_samples'], action_results=results)\n    results_data_3 = phantom.collect2(container=container, datapath=['ip_intel:action_result.parameter.ip', 'ip_intel:action_result.data.*.risk.score', 'ip_intel:action_result.data.*.risk.criticalityLabel'], action_results=results)\n    results_item_1_0 = [item[0] for item in results_data_1]\n    results_item_2_0 = [item[0] for item in results_data_2]\n    results_item_2_1 = [item[1] for item in results_data_2]\n    results_item_3_0 = [item[0] for item in results_data_3]\n    results_item_3_1 = [item[1] for item in results_data_3]\n    results_item_3_2 = [item[2] for item in results_data_3]\n\n    indicator_analysis__analysis = None\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n\n    # Debug data inputs\n    #phantom.debug(\"IP data)\n    #phantom.debug(results_data_1)\n    indicator = results_data_1\n    \n    #phantom.debug(\"IP Reputation data\")\n    #phantom.debug(results_data_2)\n    rep_data = results_data_2\n    \n    #phantom.debug(\"IP Intel Risk Data\")\n    #phantom.debug(results_data_3)\n    risk_data = results_data_3\n    \n    #phantom.debug(\"IP Finished Intel\")\n    #phantom.debug(results_data_4)\n    #intel_data = results_data_4\n    \n    # Prepare objects for finished analysis\n    indicator_analysis__analysis = []\n    threat_level = {\n        'title':\"\",\n        'indicator':\"\",\n        'confidence':\"Low\",\n        'threat':\"Low\"\n        }\n\n    \"\"\" Calculations for Intelligence Assessment\n    Get the result information and performs the following calculation:\n\n    Threat: Values = \"High\", \"Med\", \"Low\"\n    Type of validation from source\n        High: VT >5 detected downloaded samples AND RF= Very Malicious, Malicious, Risk score >50 OR FEYE Detection\n        Med: (VT >5 detected downloaded samples AND RF= Unusual, Suspicious, Risk score <50) OR FEYE Detection\n        Low: VT >5 detected downloaded samples OR RF= Unusual, Suspicious, Risk score <50\n\n    Confidence: Detection on # of sources\n        High >2 Sources or Finished Intel\n        Med  =2 Sources\n        Low  <1 Source\n    \"\"\"\n    rep_level = 5\n    risk_level = 50\n    high_risk = ['Very Malicious','Malicious']\n    med_risk = [\"Suspicious\", 'Unusual']\n\n    for item in indicator:\n        threat_level['indicator'] = item[0]\n        phantom.debug('Analyzing indicator: {}'.format(threat_level['indicator']))\n        # Evaluates Reputation data\n        for rep in rep_data:\n            #phantom.debug(rep)\n            #phantom.debug('Indicator found: {} | rep value: {}'.format(rep[0],rep[1]))\n            if rep[0] == item[0] and rep[1] >= rep_level:\n                threat_level['threat'] = \"Medium\"\n                #phantom.debug('Reputation indicator found: {} | {} and setting threat to {}'.format(rep[0],rep[1],threat_level['threat']))\n            #phantom.debug('Reputation analysis update: {} | {} with threat: {} | confidence: {}'.format(rep[0],rep[1],threat_level['threat'],threat_level['confidence']))\n                \n        # Evaluate risk score or label\n        for risk in risk_data:\n            # Evaluates Risk Score\n            #phantom.debug(risk)\n            if risk[0] == item[0] and risk[1] > risk_level:\n                if threat_level['threat'] == \"Medium\":\n                    threat_level['threat'] = \"High\"\n                    threat_level['confidence'] = \"Medium\"\n                    #phantom.debug('Risk score found: {} | {} and setting threat to {}'.format(risk[0],risk[1],threat_level['threat']))\n            # Evaluates Risk Label\n            elif risk[0] == item[0] and risk[2] in high_risk:\n                if threat_level['threat'] == \"Medium\":\n                    threat_level['threat'] = \"High\"\n                    threat_level['confidence'] = \"Medium\"\n                    #phantom.debug('High Risk label found: {} | {} and setting threat to {}'.format(risk[0],risk[2],threat_level['threat']))\n                else:\n                    threat_level['threat'] = \"Medium\"\n                    threat_level['confidence'] = \"Medium\"\n                    #phantom.debug('Medium Risk Label found: {} | {} and setting threat to {}'.format(risk[0],risk[2],threat_level['threat']))\n            elif risk[0] == item[0] and risk[2] in med_risk:\n                if threat_level['threat'] == \"Low\":\n                    threat_level['confidence'] = \"Medium\"\n                    #phantom.debug('Medium Risk Label found: {} | {} and setting threat to {}'.format(risk[0],risk[2],threat_level['threat']))\n            #phantom.debug('Risk analysis update: {} | {}/{} with threat: {} | confidence {}'.format(risk[0],risk[1],risk[2],threat_level['threat'],threat_level['confidence']))                    \n\n        # Create title for note\n        threat_level['title'] = \"Analysis of Indicator: {} | Threat: {} | Confidence: {}\".format(threat_level['indicator'], threat_level['threat'], threat_level['confidence'])\n        phantom.debug(threat_level['title'])\n        \n        # Append output value for integration\n        indicator_analysis__analysis.append({\n            'title':threat_level['title'],\n            'indicator':threat_level['indicator'],\n            'confidence':threat_level['confidence'],\n            'threat':threat_level['threat']\n        })\n\n    #phantom.debug('This is indicator analysis below:')\n    #phantom.debug(indicator_analysis__analysis)\n\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n\n    phantom.save_run_data(key='indicator_analysis:analysis', value=json.dumps(indicator_analysis__analysis))\n    generate_task_notes(container=container)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "geolocation, whois ip, ip reputation, ip intel",
                        "connection_type": "action",
                        "customCodeEndLineOffset": 7,
                        "customCodeStartLine": 18,
                        "custom_callback": "",
                        "custom_code": "def indicator_analysis(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('indicator_analysis() called')\n    \n    results_data_1 = phantom.collect2(container=container, datapath=['geolocation:action_result.parameter.ip'], action_results=results)\n    results_data_2 = phantom.collect2(container=container, datapath=['ip_reputation:action_result.parameter.ip', 'ip_reputation:action_result.summary.downloaded_samples'], action_results=results)\n    results_data_3 = phantom.collect2(container=container, datapath=['ip_intel:action_result.parameter.ip', 'ip_intel:action_result.data.*.risk.score', 'ip_intel:action_result.data.*.risk.criticalityLabel'], action_results=results)\n    results_item_1_0 = [item[0] for item in results_data_1]\n    results_item_2_0 = [item[0] for item in results_data_2]\n    results_item_2_1 = [item[1] for item in results_data_2]\n    results_item_3_0 = [item[0] for item in results_data_3]\n    results_item_3_1 = [item[1] for item in results_data_3]\n    results_item_3_2 = [item[2] for item in results_data_3]\n\n    indicator_analysis__analysis = None\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n\n    # Debug data inputs\n    #phantom.debug(\"IP data)\n    #phantom.debug(results_data_1)\n    indicator = results_data_1\n    \n    #phantom.debug(\"IP Reputation data\")\n    #phantom.debug(results_data_2)\n    rep_data = results_data_2\n    \n    #phantom.debug(\"IP Intel Risk Data\")\n    #phantom.debug(results_data_3)\n    risk_data = results_data_3\n    \n    #phantom.debug(\"IP Finished Intel\")\n    #phantom.debug(results_data_4)\n    #intel_data = results_data_4\n    \n    # Prepare objects for finished analysis\n    indicator_analysis__analysis = []\n    threat_level = {\n        'title':\"\",\n        'indicator':\"\",\n        'confidence':\"Low\",\n        'threat':\"Low\"\n        }\n\n    \"\"\" Calculations for Intelligence Assessment\n    Get the result information and performs the following calculation:\n\n    Threat: Values = \"High\", \"Med\", \"Low\"\n    Type of validation from source\n        High: VT >5 detected downloaded samples AND RF= Very Malicious, Malicious, Risk score >50 OR FEYE Detection\n        Med: (VT >5 detected downloaded samples AND RF= Unusual, Suspicious, Risk score <50) OR FEYE Detection\n        Low: VT >5 detected downloaded samples OR RF= Unusual, Suspicious, Risk score <50\n\n    Confidence: Detection on # of sources\n        High >2 Sources or Finished Intel\n        Med  =2 Sources\n        Low  <1 Source\n    \"\"\"\n    rep_level = 5\n    risk_level = 50\n    high_risk = ['Very Malicious','Malicious']\n    med_risk = [\"Suspicious\", 'Unusual']\n\n    for item in indicator:\n        threat_level['indicator'] = item[0]\n        phantom.debug('Analyzing indicator: {}'.format(threat_level['indicator']))\n        # Evaluates Reputation data\n        for rep in rep_data:\n            #phantom.debug(rep)\n            #phantom.debug('Indicator found: {} | rep value: {}'.format(rep[0],rep[1]))\n            if rep[0] == item[0] and rep[1] >= rep_level:\n                threat_level['threat'] = \"Medium\"\n                #phantom.debug('Reputation indicator found: {} | {} and setting threat to {}'.format(rep[0],rep[1],threat_level['threat']))\n            #phantom.debug('Reputation analysis update: {} | {} with threat: {} | confidence: {}'.format(rep[0],rep[1],threat_level['threat'],threat_level['confidence']))\n                \n        # Evaluate risk score or label\n        for risk in risk_data:\n            # Evaluates Risk Score\n            #phantom.debug(risk)\n            if risk[0] == item[0] and risk[1] > risk_level:\n                if threat_level['threat'] == \"Medium\":\n                    threat_level['threat'] = \"High\"\n                    threat_level['confidence'] = \"Medium\"\n                    #phantom.debug('Risk score found: {} | {} and setting threat to {}'.format(risk[0],risk[1],threat_level['threat']))\n            # Evaluates Risk Label\n            elif risk[0] == item[0] and risk[2] in high_risk:\n                if threat_level['threat'] == \"Medium\":\n                    threat_level['threat'] = \"High\"\n                    threat_level['confidence'] = \"Medium\"\n                    #phantom.debug('High Risk label found: {} | {} and setting threat to {}'.format(risk[0],risk[2],threat_level['threat']))\n                else:\n                    threat_level['threat'] = \"Medium\"\n                    threat_level['confidence'] = \"Medium\"\n                    #phantom.debug('Medium Risk Label found: {} | {} and setting threat to {}'.format(risk[0],risk[2],threat_level['threat']))\n            elif risk[0] == item[0] and risk[2] in med_risk:\n                if threat_level['threat'] == \"Low\":\n                    threat_level['confidence'] = \"Medium\"\n                    #phantom.debug('Medium Risk Label found: {} | {} and setting threat to {}'.format(risk[0],risk[2],threat_level['threat']))\n            #phantom.debug('Risk analysis update: {} | {}/{} with threat: {} | confidence {}'.format(risk[0],risk[1],risk[2],threat_level['threat'],threat_level['confidence']))                    \n\n        # Create title for note\n        threat_level['title'] = \"Analysis of Indicator: {} | Threat: {} | Confidence: {}\".format(threat_level['indicator'], threat_level['threat'], threat_level['confidence'])\n        phantom.debug(threat_level['title'])\n        \n        # Append output value for integration\n        indicator_analysis__analysis.append({\n            'title':threat_level['title'],\n            'indicator':threat_level['indicator'],\n            'confidence':threat_level['confidence'],\n            'threat':threat_level['threat']\n        })\n\n    #phantom.debug('This is indicator analysis below:')\n    #phantom.debug(indicator_analysis__analysis)\n\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n\n    phantom.save_run_data(key='indicator_analysis:analysis', value=json.dumps(indicator_analysis__analysis))\n    generate_task_notes(container=container)\n\n    return",
                        "custom_join": "",
                        "custom_name": "indicator analysis",
                        "description": "See the doc type in the source code for calculation parameters for this indicator",
                        "functionBlock": "custom function",
                        "has_custom": true,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "9b639c8c-0f93-40e7-b9bc-2edeeec48344",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "def join_indicator_analysis(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None):\n    phantom.debug('join_indicator_analysis() called')\n\n    # check if all connected incoming playbooks, actions, or custom functions are done i.e. have succeeded or failed\n    if phantom.completed(action_names=['geolocation', 'whois_ip', 'ip_reputation', 'ip_intel']):\n        \n        # call connected block \"indicator_analysis\"\n        indicator_analysis(container=container, handle=handle)\n    \n    return",
                        "join_optional": [],
                        "join_start": 585,
                        "legacy": true,
                        "line_end": 596,
                        "line_start": 460,
                        "message": "Configuring now",
                        "name": "custom function",
                        "notes": "Provide an analysis of the indicator based on the vendor provided threat assessment with the number of sources and confidence in that assessment by the prevalence of the indicator in more than one occurrence.",
                        "number": 2,
                        "order": 14,
                        "outPorts": [
                            "out"
                        ],
                        "outputVariables": [
                            {
                                "position": 0,
                                "type": "",
                                "value": "analysis"
                            }
                        ],
                        "parameters": [
                            {
                                "position": 0,
                                "type": "",
                                "value": "geolocation:action_result.parameter.ip"
                            },
                            {
                                "position": 1,
                                "type": "",
                                "value": "ip_reputation:action_result.parameter.ip"
                            },
                            {
                                "position": 2,
                                "type": "",
                                "value": "ip_reputation:action_result.summary.downloaded_samples"
                            },
                            {
                                "position": 3,
                                "type": "",
                                "value": "ip_intel:action_result.parameter.ip"
                            },
                            {
                                "position": 4,
                                "type": "",
                                "value": "ip_intel:action_result.data.*.risk.score"
                            },
                            {
                                "position": 5,
                                "type": "",
                                "value": "ip_intel:action_result.data.*.risk.criticalityLabel"
                            }
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 860,
                            "y": -180
                        },
                        "previous_function": "",
                        "previous_name": "indicator_analysis",
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "custom function",
                        "status": "deprecating",
                        "title": "custom function",
                        "type": "coa.FunctionBlock",
                        "userGeneratedCode": "\n    # Debug data inputs\n    #phantom.debug(\"IP data)\n    #phantom.debug(results_data_1)\n    indicator = results_data_1\n    \n    #phantom.debug(\"IP Reputation data\")\n    #phantom.debug(results_data_2)\n    rep_data = results_data_2\n    \n    #phantom.debug(\"IP Intel Risk Data\")\n    #phantom.debug(results_data_3)\n    risk_data = results_data_3\n    \n    #phantom.debug(\"IP Finished Intel\")\n    #phantom.debug(results_data_4)\n    #intel_data = results_data_4\n    \n    # Prepare objects for finished analysis\n    indicator_analysis__analysis = []\n    threat_level = {\n        'title':\"\",\n        'indicator':\"\",\n        'confidence':\"Low\",\n        'threat':\"Low\"\n        }\n\n    \"\"\" Calculations for Intelligence Assessment\n    Get the result information and performs the following calculation:\n\n    Threat: Values = \"High\", \"Med\", \"Low\"\n    Type of validation from source\n        High: VT >5 detected downloaded samples AND RF= Very Malicious, Malicious, Risk score >50 OR FEYE Detection\n        Med: (VT >5 detected downloaded samples AND RF= Unusual, Suspicious, Risk score <50) OR FEYE Detection\n        Low: VT >5 detected downloaded samples OR RF= Unusual, Suspicious, Risk score <50\n\n    Confidence: Detection on # of sources\n        High >2 Sources or Finished Intel\n        Med  =2 Sources\n        Low  <1 Source\n    \"\"\"\n    rep_level = 5\n    risk_level = 50\n    high_risk = ['Very Malicious','Malicious']\n    med_risk = [\"Suspicious\", 'Unusual']\n\n    for item in indicator:\n        threat_level['indicator'] = item[0]\n        phantom.debug('Analyzing indicator: {}'.format(threat_level['indicator']))\n        # Evaluates Reputation data\n        for rep in rep_data:\n            #phantom.debug(rep)\n            #phantom.debug('Indicator found: {} | rep value: {}'.format(rep[0],rep[1]))\n            if rep[0] == item[0] and rep[1] >= rep_level:\n                threat_level['threat'] = \"Medium\"\n                #phantom.debug('Reputation indicator found: {} | {} and setting threat to {}'.format(rep[0],rep[1],threat_level['threat']))\n            #phantom.debug('Reputation analysis update: {} | {} with threat: {} | confidence: {}'.format(rep[0],rep[1],threat_level['threat'],threat_level['confidence']))\n                \n        # Evaluate risk score or label\n        for risk in risk_data:\n            # Evaluates Risk Score\n            #phantom.debug(risk)\n            if risk[0] == item[0] and risk[1] > risk_level:\n                if threat_level['threat'] == \"Medium\":\n                    threat_level['threat'] = \"High\"\n                    threat_level['confidence'] = \"Medium\"\n                    #phantom.debug('Risk score found: {} | {} and setting threat to {}'.format(risk[0],risk[1],threat_level['threat']))\n            # Evaluates Risk Label\n            elif risk[0] == item[0] and risk[2] in high_risk:\n                if threat_level['threat'] == \"Medium\":\n                    threat_level['threat'] = \"High\"\n                    threat_level['confidence'] = \"Medium\"\n                    #phantom.debug('High Risk label found: {} | {} and setting threat to {}'.format(risk[0],risk[2],threat_level['threat']))\n                else:\n                    threat_level['threat'] = \"Medium\"\n                    threat_level['confidence'] = \"Medium\"\n                    #phantom.debug('Medium Risk Label found: {} | {} and setting threat to {}'.format(risk[0],risk[2],threat_level['threat']))\n            elif risk[0] == item[0] and risk[2] in med_risk:\n                if threat_level['threat'] == \"Low\":\n                    threat_level['confidence'] = \"Medium\"\n                    #phantom.debug('Medium Risk Label found: {} | {} and setting threat to {}'.format(risk[0],risk[2],threat_level['threat']))\n            #phantom.debug('Risk analysis update: {} | {}/{} with threat: {} | confidence {}'.format(risk[0],risk[1],risk[2],threat_level['threat'],threat_level['confidence']))                    \n\n        # Create title for note\n        threat_level['title'] = \"Analysis of Indicator: {} | Threat: {} | Confidence: {}\".format(threat_level['indicator'], threat_level['threat'], threat_level['confidence'])\n        phantom.debug(threat_level['title'])\n        \n        # Append output value for integration\n        indicator_analysis__analysis.append({\n            'title':threat_level['title'],\n            'indicator':threat_level['indicator'],\n            'confidence':threat_level['confidence'],\n            'threat':threat_level['threat']\n        })\n\n    #phantom.debug('This is indicator analysis below:')\n    #phantom.debug(indicator_analysis__analysis)\n\n",
                        "warn": false,
                        "z": 767
                    },
                    {
                        "action": "geolocate ip",
                        "action_type": "investigate",
                        "active": false,
                        "active_keys": {},
                        "active_values": {
                            "ip": "merge_ip_addresses:custom_function_result.data.*.item"
                        },
                        "angle": 0,
                        "app": "MaxMind",
                        "appid": "c566e153-3118-4033-abda-14dd9748c91a",
                        "approver": "",
                        "assets": [
                            {
                                "action": "geolocate ip",
                                "actions": [
                                    "geolocate ip"
                                ],
                                "active": true,
                                "app_name": "MaxMind",
                                "app_version": "1.2.22",
                                "appid": "c566e153-3118-4033-abda-14dd9748c91a",
                                "asset_name": "maxmind",
                                "config_type": "asset",
                                "count": 0,
                                "fields": {
                                    "ip": "merge_ip_addresses:custom_function_result.data.*.item"
                                },
                                "has_app": true,
                                "id": 2,
                                "loaded": false,
                                "missing": false,
                                "name": "maxmind",
                                "output": [
                                    {
                                        "data_path": "action_result.status",
                                        "data_type": "string",
                                        "example_values": [
                                            "success",
                                            "failed"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.continent_name",
                                        "data_type": "string",
                                        "example_values": [
                                            "Asia"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.country_iso_code",
                                        "data_type": "string",
                                        "example_values": [
                                            "IN"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.country_name",
                                        "data_type": "string",
                                        "example_values": [
                                            "India"
                                        ],
                                        "map_info": "Country"
                                    },
                                    {
                                        "data_path": "action_result.data.*.latitude",
                                        "data_type": "numeric",
                                        "example_values": [
                                            23.0333
                                        ],
                                        "map_info": "latitude"
                                    },
                                    {
                                        "data_path": "action_result.data.*.longitude",
                                        "data_type": "numeric",
                                        "example_values": [
                                            72.6167
                                        ],
                                        "map_info": "longitude"
                                    },
                                    {
                                        "contains": [
                                            "ip"
                                        ],
                                        "data_path": "action_result.parameter.ip",
                                        "data_type": "string",
                                        "example_values": [
                                            "203.88.139.34"
                                        ],
                                        "map_info": "IP Address"
                                    },
                                    {
                                        "contains": [
                                            "ip"
                                        ],
                                        "data_path": "action_result.parameter.ip",
                                        "data_type": "string",
                                        "example_values": [
                                            "203.88.139.34"
                                        ],
                                        "map_info": "name"
                                    },
                                    {
                                        "data_path": "action_result.data.*.city_name",
                                        "data_type": "string",
                                        "example_values": [
                                            "Ahmedabad"
                                        ],
                                        "map_info": "City"
                                    },
                                    {
                                        "data_path": "action_result.data.*.postal_code",
                                        "data_type": "string",
                                        "example_values": [
                                            "380007"
                                        ],
                                        "map_info": "Postal Code"
                                    },
                                    {
                                        "data_path": "action_result.data.*.as_org",
                                        "data_type": "string",
                                        "map_info": "Organization"
                                    },
                                    {
                                        "data_path": "action_result.data.*.state_iso_code",
                                        "data_type": "string",
                                        "example_values": [
                                            "GJ"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.state_name",
                                        "data_type": "string",
                                        "example_values": [
                                            "Gujarat"
                                        ],
                                        "map_info": "State/Province"
                                    },
                                    {
                                        "data_path": "action_result.data.*.time_zone",
                                        "data_type": "string",
                                        "example_values": [
                                            "Asia/Kolkata"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.summary.city",
                                        "data_type": "string",
                                        "example_values": [
                                            "Ahmedabad"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.summary.state",
                                        "data_type": "string",
                                        "example_values": [
                                            "GJ"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.summary.country",
                                        "data_type": "string",
                                        "example_values": [
                                            "India"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.message",
                                        "data_type": "string",
                                        "example_values": [
                                            "City: Ahmedabad, State: GJ, Country: India"
                                        ]
                                    },
                                    {
                                        "data_path": "summary.total_objects",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1
                                        ]
                                    },
                                    {
                                        "data_path": "summary.total_objects_successful",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1
                                        ]
                                    }
                                ],
                                "parameters": {
                                    "ip": {
                                        "allow_list": true,
                                        "contains": [
                                            "ip"
                                        ],
                                        "data_type": "string",
                                        "default": null,
                                        "description": "IP to geolocate",
                                        "key": "ip",
                                        "primary": true,
                                        "required": true
                                    }
                                },
                                "product_name": "GeoIP2",
                                "product_vendor": "MaxMind",
                                "targets": "2",
                                "type": "information"
                            }
                        ],
                        "attrs": {
                            ".action": {
                                "text": "geolocation"
                            },
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "Investigate"
                            },
                            "g.approver image": {
                                "opacity": 1
                            },
                            "g.code image": {
                                "opacity": 1
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.icon image": {
                                "xlink:href": "/inc/coa/img/block_icon_investigate.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            },
                            "g.timer image": {
                                "opacity": 1
                            }
                        },
                        "block_code": "def geolocation(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('geolocation() called')\n        \n    #phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))\n    \n    # collect data for 'geolocation' call\n    custom_function_results_data_1 = phantom.collect2(container=container, datapath=['merge_ip_addresses:custom_function_result.data.*.item'], action_results=results)\n\n    parameters = []\n    \n    # build parameters list for 'geolocation' call\n    for custom_function_results_item_1 in custom_function_results_data_1:\n        if custom_function_results_item_1[0]:\n            parameters.append({\n                'ip': custom_function_results_item_1[0],\n            })\n\n    phantom.act(action=\"geolocate ip\", parameters=parameters, assets=['maxmind'], callback=geolocate_format, name=\"geolocation\")\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": true,
                        "color": "",
                        "connected_to_start": true,
                        "connection_name": "merge ip addresses",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "geolocation",
                        "delay": 0,
                        "description": "",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "c040f191-9789-4f2b-b4ed-6ed6265ea45e",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 430,
                        "line_end": 425,
                        "line_start": 404,
                        "message": "Configuring now",
                        "name": "geolocate ip",
                        "notes": "Gets geolocate data for the ip address",
                        "number": 1,
                        "order": 11,
                        "outPorts": [
                            "out"
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 360,
                            "y": -180
                        },
                        "previous_function": "",
                        "previous_name": "geolocation",
                        "required_params": {
                            "ip": true
                        },
                        "reviewer": "",
                        "show_number": false,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "action_assets",
                        "status": "",
                        "title": "Investigate",
                        "type": "coa.Action",
                        "warn": false,
                        "z": 769
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".format": {
                                "text": "geolocate format"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out-1": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out-1>.port-body": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "format"
                            },
                            "g.code image": {
                                "opacity": 1
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            }
                        },
                        "block_code": "def geolocate_format(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('geolocate_format() called')\n    \n    template = \"\"\"%%\n### Maxmind Geolocation of {0}: *{1}*, *{2}* \nLatitude: {3} Longitude: {4}\n\n---\n%%\"\"\"\n\n    # parameter list for template variable replacement\n    parameters = [\n        \"geolocation:action_result.parameter.ip\",\n        \"geolocation:action_result.data.*.continent_name\",\n        \"geolocation:action_result.data.*.country_name\",\n        \"geolocation:action_result.data.*.latitude\",\n        \"geolocation:action_result.data.*.longitude\",\n    ]\n\n    phantom.format(container=container, template=template, parameters=parameters, name=\"geolocate_format\")\n\n    join_indicator_analysis(container=container)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "geolocation",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "geolocate format",
                        "description": "",
                        "format": "format",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "2e08bb76-1525-4612-ac24-f813b75d0e56",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 450,
                        "line_start": 425,
                        "message": "Configuring now",
                        "name": "format",
                        "notes": "Format Geo Location data",
                        "number": 12,
                        "order": 12,
                        "outPorts": [
                            "out-1"
                        ],
                        "parameters": [
                            {
                                "position": 0,
                                "type": "",
                                "value": "geolocation:action_result.parameter.ip"
                            },
                            {
                                "position": 0,
                                "type": "",
                                "value": "geolocation:action_result.data.*.continent_name"
                            },
                            {
                                "position": 1,
                                "type": "",
                                "value": "geolocation:action_result.data.*.country_name"
                            },
                            {
                                "position": 2,
                                "type": "",
                                "value": "geolocation:action_result.data.*.latitude"
                            },
                            {
                                "position": 3,
                                "type": "",
                                "value": "geolocation:action_result.data.*.longitude"
                            }
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 600,
                            "y": -180
                        },
                        "previous_function": "",
                        "previous_name": "geolocate_format",
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "format",
                        "status": "",
                        "template": "%%\n### Maxmind Geolocation of {0}: *{1}*, *{2}* \nLatitude: {3} Longitude: {4}\n\n---\n%%",
                        "title": "format",
                        "type": "coa.Format",
                        "warn": false,
                        "z": 774
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".format": {
                                "text": "whois format"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out-1": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out-1>.port-body": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "format"
                            },
                            "g.code image": {
                                "opacity": 1
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            }
                        },
                        "block_code": "def whois_format(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('whois_format() called')\n    \n    template = \"\"\"%%\n### Whois Registration of {0} : *Registered Date: {1}*\n\n{2}\n\n***Latest Registered:***\n- Name: {3}\n- City: {4}, State: {5}, Country: {6}\n- Description: {7}\n- Email: {8}\n- Updated: {9}\n\n---\n%%\"\"\"\n\n    # parameter list for template variable replacement\n    parameters = [\n        \"whois_ip:action_result.parameter.ip\",\n        \"whois_ip:action_result.data.*.asn_date\",\n        \"whois_ip:action_result.message\",\n        \"whois_ip:action_result.data.*.nets.0.name\",\n        \"whois_ip:action_result.data.*.nets.0.city\",\n        \"whois_ip:action_result.data.*.nets.0.state\",\n        \"whois_ip:action_result.data.*.nets.0.country\",\n        \"whois_ip:action_result.data.*.nets.0.description\",\n        \"whois_ip:action_result.data.*.nets.0.emails\",\n        \"whois_ip:action_result.data.*.nets.0.updated\",\n    ]\n\n    phantom.format(container=container, template=template, parameters=parameters, name=\"whois_format\")\n\n    join_indicator_analysis(container=container)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "whois ip",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "whois format",
                        "description": "",
                        "format": "format",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "9220597e-477b-4a65-bf04-0ea9e9fcd19a",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 317,
                        "line_start": 279,
                        "message": "Configuring now",
                        "name": "format",
                        "notes": "Create whois format of data",
                        "number": 3,
                        "order": 8,
                        "outPorts": [
                            "out-1"
                        ],
                        "parameters": [
                            {
                                "position": 0,
                                "type": "",
                                "value": "whois_ip:action_result.parameter.ip"
                            },
                            {
                                "position": 1,
                                "type": "",
                                "value": "whois_ip:action_result.data.*.asn_date"
                            },
                            {
                                "position": 1,
                                "type": "",
                                "value": "whois_ip:action_result.message"
                            },
                            {
                                "position": 3,
                                "type": "",
                                "value": "whois_ip:action_result.data.*.nets.0.name"
                            },
                            {
                                "position": 4,
                                "type": "",
                                "value": "whois_ip:action_result.data.*.nets.0.city"
                            },
                            {
                                "position": 5,
                                "type": "",
                                "value": "whois_ip:action_result.data.*.nets.0.state"
                            },
                            {
                                "position": 6,
                                "type": "",
                                "value": "whois_ip:action_result.data.*.nets.0.country"
                            },
                            {
                                "position": 7,
                                "type": "",
                                "value": "whois_ip:action_result.data.*.nets.0.description"
                            },
                            {
                                "position": 8,
                                "type": "",
                                "value": "whois_ip:action_result.data.*.nets.0.emails"
                            },
                            {
                                "position": 9,
                                "type": "",
                                "value": "whois_ip:action_result.data.*.nets.0.updated"
                            }
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 600,
                            "y": -60
                        },
                        "previous_function": "",
                        "previous_name": "whois_format",
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "format",
                        "status": "",
                        "template": "%%\n### Whois Registration of {0} : *Registered Date: {1}*\n\n{2}\n\n***Latest Registered:***\n- Name: {3}\n- City: {4}, State: {5}, Country: {6}\n- Description: {7}\n- Email: {8}\n- Updated: {9}\n\n---\n%%",
                        "title": "format",
                        "type": "coa.Format",
                        "warn": false,
                        "z": 777
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".format": {
                                "text": "reputation format"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out-1": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out-1>.port-body": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "format"
                            },
                            "g.code image": {
                                "opacity": 1
                            },
                            "g.delete": {
                                "display": "block"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            }
                        },
                        "block_code": "def reputation_format(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('reputation_format() called')\n    \n    template = \"\"\"%%\n### VirusTotal Summary of {0}: *{1}, {2}*\n\n*VTI link: https://www.virustotal.com/gui/ip-address/{0}*\n\nNetwork: {3} - Owner: {4}, ASN: {5} \n\n---\n%%\"\"\"\n\n    # parameter list for template variable replacement\n    parameters = [\n        \"ip_reputation:action_result.parameter.ip\",\n        \"ip_reputation:action_result.message\",\n        \"ip_reputation:action_result.data.*.verbose_msg\",\n        \"ip_reputation:action_result.data.*.network\",\n        \"ip_reputation:action_result.data.*.as_owner\",\n        \"ip_reputation:action_result.data.*.asn\",\n    ]\n\n    phantom.format(container=container, template=template, parameters=parameters, name=\"reputation_format\")\n\n    join_indicator_analysis(container=container)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "ip reputation",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "reputation format",
                        "description": "",
                        "format": "format",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "571ee01f-7cef-4f30-b126-0ab3b76dff25",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 346,
                        "line_start": 317,
                        "message": "Configuring now",
                        "name": "format",
                        "notes": "Create reputation information format for note",
                        "number": 10,
                        "order": 9,
                        "outPorts": [
                            "out-1"
                        ],
                        "parameters": [
                            {
                                "position": 0,
                                "type": "",
                                "value": "ip_reputation:action_result.parameter.ip"
                            },
                            {
                                "position": 1,
                                "type": "",
                                "value": "ip_reputation:action_result.message"
                            },
                            {
                                "position": 1,
                                "type": "",
                                "value": "ip_reputation:action_result.data.*.verbose_msg"
                            },
                            {
                                "position": 3,
                                "type": "",
                                "value": "ip_reputation:action_result.data.*.network"
                            },
                            {
                                "position": 4,
                                "type": "",
                                "value": "ip_reputation:action_result.data.*.as_owner"
                            },
                            {
                                "position": 5,
                                "type": "",
                                "value": "ip_reputation:action_result.data.*.asn"
                            }
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 600,
                            "y": 60
                        },
                        "previous_function": "",
                        "previous_name": "reputation_format",
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "format",
                        "status": "",
                        "template": "%%\n### VirusTotal Summary of {0}: *{1}, {2}*\n\n*VTI link: https://www.virustotal.com/gui/ip-address/{0}*\n\nNetwork: {3} - Owner: {4}, ASN: {5} \n\n---\n%%",
                        "title": "format",
                        "type": "coa.Format",
                        "warn": false,
                        "z": 778
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".functionBlock": {
                                "text": "generate task notes"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "custom function"
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 1
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn_grey.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            }
                        },
                        "block_code": "def generate_task_notes(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('generate_task_notes() called')\n    \n    input_parameter_0 = \"Indicator analysis\"\n    indicator_analysis__analysis = json.loads(phantom.get_run_data(key='indicator_analysis:analysis'))\n    custom_function_results_data_1 = phantom.collect2(container=container, datapath=['merge_ip_addresses:custom_function_result.data.*.item'], action_results=results)\n    formatted_data_1 = phantom.get_format_data(name='geolocate_format__as_list')\n    formatted_data_2 = phantom.get_format_data(name='whois_format__as_list')\n    formatted_data_3 = phantom.get_format_data(name='reputation_format__as_list')\n    formatted_data_4 = phantom.get_format_data(name='intel_format__as_list')\n    custom_function_results_item_1_0 = [item[0] for item in custom_function_results_data_1]\n\n    generate_task_notes__note_params = None\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n    \n    \"\"\" Maps inputs to processing values and adds debugs for task default template \"\"\"\n    note_params = []\n    \n    \"\"\" Modify for # of notes created per # of indicators example below of 5 means \n        more than 5 indicators found will produce 1 note vs 5 notes. For a maximum of 20 indicators (ip, domain, url, filehash) \"\"\"\n    note_limit = 5\n    \n    # debug input data\n    #phantom.debug(\"Note Title:\")\n    #phantom.debug(indicator_analysis__analysis)\n    title_data = indicator_analysis__analysis\n     \n    #phantom.debug(\"Geolocate results:\")\n    #phantom.debug(formatted_data_1)\n    geo_data = formatted_data_1\n    \n    #phantom.debug(\"Whois results:\")\n    #phantom.debug(formatted_data_2)\n    whois_data = formatted_data_2\n    \n    #phantom.debug(\"Reputation results:\")\n    #phantom.debug(formatted_data_3)\n    rep_data = formatted_data_3\n    \n    #phantom.debug(\"Intel results:\")\n    #phantom.debug(formatted_data_4)\n    intel_data = formatted_data_4\n\n    #phantom.debug(\"Indicators\")\n    #phantom.debug(custom_function_results_data_1)\n    indicators = custom_function_results_data_1\n    \n    # Organize indicators by value with correct data for note insertion\n    for indicator in indicators:\n        for title in title_data:\n            if indicator[0] in title['indicator']:\n                indicator.append(title['title'])\n        for geo in geo_data:\n            if indicator[0] in geo:\n                indicator.append(geo)\n        for whois in whois_data:\n            if indicator[0] in whois:\n                indicator.append(whois)\n        for rep in rep_data:\n            if indicator[0] in rep:\n                indicator.append(rep)\n        for intel in intel_data:\n            if indicator[0] in intel:\n                indicator.append(intel)\n    \n    phantom.debug(\"Reorganzied indicator data for note data.\")\n    #phantom.debug(indicators)\n    \n    # Get workbook phase id\n    phantom.debug('Getting current phase')\n\n    success, message, phase_id, phase_name = phantom.get_phase()\n\n    phantom.debug(\n        'phantom.get_phase results: success: {}, message: {}, phase_id: {}, phase_name: {}'.format(success, message, phase_id, phase_name)\n    )\n    \n    # Task data for adding task notes\n    task_data = {}\n    \n    # Get the tasks for start of the workbook\n    for task in phantom.get_tasks(container=container):\n        ## gets the current phase and 1st task\n        if phase_id == task['data']['phase'] and task['data']['name'] == input_parameter_0:\n            task_data.update(task['data'])\n            phantom.debug('phantom.get_tasks found the task: task_id: {}, task_name: {}'.format(task_data['id'],task_data['name']))\n\n    \"\"\" Create multiple single indicator note or multiple notes (cusotmer defined)\n        Change the indicators length to greater than 5 artifacts if you want more notes created\n        The maximum number of notes you want created is related to the number of indicators present.\"\"\"\n    \n    title = \"Automated IP Indicator Report\"\n    if len(indicators) <= note_limit:\n        # Create loop for creating multiple notes under the same task\n        phantom.debug(\"Found {} indicators.\".format(len(indicators)))\n        phantom.debug(\"Creating Multiple indicator notes.\")\n        for indicator in indicators: \n            title = indicator[1]\n            # Define Note content build here\n            note_content = \"{}\\n {}\\n {}\\n {}\".format(indicator[5].encode('UTF-8'),indicator[4].encode('UTF-8'),indicator[3].encode('UTF-8'),indicator[2].encode('UTF-8'))\n            #phantom.debug(\"Multi-Note content: \\n {}\".format(note_content))\n        \n            # Build note parameters\n            note_params.append({\n                \"note_type\": \"task\",\n                \"task_id\": task_data['id'],\n                \"container_id\": container['id'],\n                \"title\": title,\n                \"content\": note_content,\n                \"note_format\": \"markdown\",\n                \"phase_id\": phase_id\n            })\n    else:\n        phantom.debug(\"Found {} indicators.\".format(len(indicators)))\n        phantom.debug(\"Creating Single indicator notes.\")\n        note_content = \"\"\n        for indicator in indicators: \n            # Define Note content build here\n            note_content += \"## {}\\n {}\\n {}\\n {}\\n {}\\n\".format(indicator[1].encode('UTF-8'),indicator[5].encode('UTF-8'),indicator[4].encode('UTF-8'),indicator[3].encode('UTF-8'),indicator[2].encode('UTF-8'))\n            #phantom.debug(\"Single Note content: \\n {}\".format(note_content))\n\n        # Build note parameters\n        note_params.append({\n            \"note_type\": \"task\",\n            \"task_id\": task_data['id'],\n            \"container_id\": container['id'],\n            \"title\": title,\n            \"content\": note_content,\n            \"note_format\": \"markdown\",\n            \"phase_id\": phase_id\n        })    \n        \n    # Save parameters for REST calls to update\n    #phantom.debug(\"Debug Parameters:\")\n    generate_task_notes__note_params = note_params\n\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n\n    phantom.save_run_data(key='generate_task_notes:note_params', value=json.dumps(generate_task_notes__note_params))\n    create_task_notes(container=container)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "geolocation, whois ip, ip reputation, ip intel",
                        "connection_type": "action",
                        "customCodeEndLineOffset": 7,
                        "customCodeStartLine": 17,
                        "custom_callback": "",
                        "custom_code": "def generate_task_notes(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('generate_task_notes() called')\n    \n    input_parameter_0 = \"Indicator analysis\"\n    indicator_analysis__analysis = json.loads(phantom.get_run_data(key='indicator_analysis:analysis'))\n    custom_function_results_data_1 = phantom.collect2(container=container, datapath=['merge_list:custom_function_result.data.*.item'], action_results=results)\n    formatted_data_1 = phantom.get_format_data(name='geolocate_format__as_list')\n    formatted_data_2 = phantom.get_format_data(name='whois_format__as_list')\n    formatted_data_3 = phantom.get_format_data(name='reputation_format__as_list')\n    formatted_data_4 = phantom.get_format_data(name='intel_format__as_list')\n    custom_function_results_item_1_0 = [item[0] for item in custom_function_results_data_1]\n\n    generate_task_notes__note_params = None\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n    \n    \"\"\" Maps inputs to processing values and adds debugs for task default template \"\"\"\n    note_params = []\n    \n    \"\"\" Modify for # of notes created per # of indicators example below of 5 means \n        more than 5 indicators found will produce 1 note vs 5 notes. For a maximum of 20 indicators (ip, domain, url, filehash) \"\"\"\n    note_limit = 5\n    \n    # debug input data\n    #phantom.debug(\"Note Title:\")\n    #phantom.debug(indicator_analysis__analysis)\n    title_data = indicator_analysis__analysis\n     \n    #phantom.debug(\"Geolocate results:\")\n    #phantom.debug(formatted_data_1)\n    geo_data = formatted_data_1\n    \n    #phantom.debug(\"Whois results:\")\n    #phantom.debug(formatted_data_2)\n    whois_data = formatted_data_2\n    \n    #phantom.debug(\"Reputation results:\")\n    #phantom.debug(formatted_data_3)\n    rep_data = formatted_data_3\n    \n    #phantom.debug(\"Intel results:\")\n    #phantom.debug(formatted_data_4)\n    intel_data = formatted_data_4\n\n    #phantom.debug(\"Indicators\")\n    #phantom.debug(custom_function_results_data_1)\n    indicators = custom_function_results_data_1\n    \n    # Organize indicators by value with correct data for note insertion\n    for indicator in indicators:\n        for title in title_data:\n            if indicator[0] in title['indicator']:\n                indicator.append(title['title'])\n        for geo in geo_data:\n            if indicator[0] in geo:\n                indicator.append(geo)\n        for whois in whois_data:\n            if indicator[0] in whois:\n                indicator.append(whois)\n        for rep in rep_data:\n            if indicator[0] in rep:\n                indicator.append(rep)\n        for intel in intel_data:\n            if indicator[0] in intel:\n                indicator.append(intel)\n    \n    phantom.debug(\"Reorganzied indicator data for note data.\")\n    #phantom.debug(indicators)\n    \n    # Get workbook phase id\n    phantom.debug('Getting current phase')\n\n    success, message, phase_id, phase_name = phantom.get_phase()\n\n    phantom.debug(\n        'phantom.get_phase results: success: {}, message: {}, phase_id: {}, phase_name: {}'.format(success, message, phase_id, phase_name)\n    )\n    \n    # Task data for adding task notes\n    task_data = {}\n    \n    # Get the tasks for start of the workbook\n    for task in phantom.get_tasks(container=container):\n        ## gets the current phase and 1st task\n        if phase_id == task['data']['phase'] and task['data']['name'] == input_parameter_0:\n            task_data.update(task['data'])\n            phantom.debug('phantom.get_tasks found the task: task_id: {}, task_name: {}'.format(task_data['id'],task_data['name']))\n\n    \"\"\" Create multiple single indicator note or multiple notes (cusotmer defined)\n        Change the indicators length to greater than 5 artifacts if you want more notes created\n        The maximum number of notes you want created is related to the number of indicators present.\"\"\"\n    \n    title = \"Automated IP Indicator Report\"\n    if len(indicators) <= note_limit:\n        # Create loop for creating multiple notes under the same task\n        phantom.debug(\"Found {} indicators.\".format(len(indicators)))\n        phantom.debug(\"Creating Multiple indicator notes.\")\n        for indicator in indicators: \n            title = indicator[1]\n            # Define Note content build here\n            note_content = \"{}\\n {}\\n {}\\n {}\".format(indicator[5].encode('UTF-8'),indicator[4].encode('UTF-8'),indicator[3].encode('UTF-8'),indicator[2].encode('UTF-8'))\n            #phantom.debug(\"Multi-Note content: \\n {}\".format(note_content))\n        \n            # Build note parameters\n            note_params.append({\n                \"note_type\": \"task\",\n                \"task_id\": task_data['id'],\n                \"container_id\": container['id'],\n                \"title\": title,\n                \"content\": note_content,\n                \"note_format\": \"markdown\",\n                \"phase_id\": phase_id\n            })\n    else:\n        phantom.debug(\"Found {} indicators.\".format(len(indicators)))\n        phantom.debug(\"Creating Single indicator notes.\")\n        note_content = \"\"\n        for indicator in indicators: \n            # Define Note content build here\n            note_content += \"## {}\\n {}\\n {}\\n {}\\n {}\\n\".format(indicator[1].encode('UTF-8'),indicator[5].encode('UTF-8'),indicator[4].encode('UTF-8'),indicator[3].encode('UTF-8'),indicator[2].encode('UTF-8'))\n            #phantom.debug(\"Single Note content: \\n {}\".format(note_content))\n\n        # Build note parameters\n        note_params.append({\n            \"note_type\": \"task\",\n            \"task_id\": task_data['id'],\n            \"container_id\": container['id'],\n            \"title\": title,\n            \"content\": note_content,\n            \"note_format\": \"markdown\",\n            \"phase_id\": phase_id\n        })    \n        \n    # Save parameters for REST calls to update\n    #phantom.debug(\"Debug Parameters:\")\n    generate_task_notes__note_params = note_params\n\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n\n    phantom.save_run_data(key='generate_task_notes:note_params', value=json.dumps(generate_task_notes__note_params))\n    create_task_notes(container=container)\n\n    return",
                        "custom_join": "",
                        "custom_name": "generate task notes",
                        "description": "Param 0 = Task to be updated",
                        "functionBlock": "custom function",
                        "has_custom": true,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "f9dc4405-ff78-4e6e-a8d6-986131e4b52f",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 157,
                        "legacy": true,
                        "line_end": 279,
                        "line_start": 131,
                        "message": "Configuring now",
                        "name": "custom function",
                        "notes": "Create task notes:\n\nGets the phase, loops thru all the intel and creates the notes in task \"Analyze Indicator and reputation\" for each indicator found.",
                        "number": 1,
                        "order": 7,
                        "outPorts": [
                            "out"
                        ],
                        "outputVariables": [
                            {
                                "position": 1,
                                "type": "",
                                "value": "note_params"
                            }
                        ],
                        "parameters": [
                            {
                                "position": 0,
                                "type": "",
                                "value": "Indicator analysis"
                            },
                            {
                                "position": 0,
                                "type": "",
                                "value": "indicator_analysis:custom_function:analysis"
                            },
                            {
                                "position": 2,
                                "type": "",
                                "value": "geolocate_format:formatted_data.*"
                            },
                            {
                                "position": 3,
                                "type": "",
                                "value": "whois_format:formatted_data.*"
                            },
                            {
                                "position": 4,
                                "type": "",
                                "value": "reputation_format:formatted_data.*"
                            },
                            {
                                "position": 5,
                                "type": "",
                                "value": "intel_format:formatted_data.*"
                            },
                            {
                                "position": 6,
                                "type": "",
                                "value": "merge_ip_addresses:custom_function_result.data.*.item"
                            }
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 1120,
                            "y": -180
                        },
                        "previous_function": "",
                        "previous_name": "generate_task_notes",
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "custom function",
                        "status": "deprecating",
                        "title": "custom function",
                        "type": "coa.FunctionBlock",
                        "userGeneratedCode": "    \n    \"\"\" Maps inputs to processing values and adds debugs for task default template \"\"\"\n    note_params = []\n    \n    \"\"\" Modify for # of notes created per # of indicators example below of 5 means \n        more than 5 indicators found will produce 1 note vs 5 notes. For a maximum of 20 indicators (ip, domain, url, filehash) \"\"\"\n    note_limit = 5\n    \n    # debug input data\n    #phantom.debug(\"Note Title:\")\n    #phantom.debug(indicator_analysis__analysis)\n    title_data = indicator_analysis__analysis\n     \n    #phantom.debug(\"Geolocate results:\")\n    #phantom.debug(formatted_data_1)\n    geo_data = formatted_data_1\n    \n    #phantom.debug(\"Whois results:\")\n    #phantom.debug(formatted_data_2)\n    whois_data = formatted_data_2\n    \n    #phantom.debug(\"Reputation results:\")\n    #phantom.debug(formatted_data_3)\n    rep_data = formatted_data_3\n    \n    #phantom.debug(\"Intel results:\")\n    #phantom.debug(formatted_data_4)\n    intel_data = formatted_data_4\n\n    #phantom.debug(\"Indicators\")\n    #phantom.debug(custom_function_results_data_1)\n    indicators = custom_function_results_data_1\n    \n    # Organize indicators by value with correct data for note insertion\n    for indicator in indicators:\n        for title in title_data:\n            if indicator[0] in title['indicator']:\n                indicator.append(title['title'])\n        for geo in geo_data:\n            if indicator[0] in geo:\n                indicator.append(geo)\n        for whois in whois_data:\n            if indicator[0] in whois:\n                indicator.append(whois)\n        for rep in rep_data:\n            if indicator[0] in rep:\n                indicator.append(rep)\n        for intel in intel_data:\n            if indicator[0] in intel:\n                indicator.append(intel)\n    \n    phantom.debug(\"Reorganzied indicator data for note data.\")\n    #phantom.debug(indicators)\n    \n    # Get workbook phase id\n    phantom.debug('Getting current phase')\n\n    success, message, phase_id, phase_name = phantom.get_phase()\n\n    phantom.debug(\n        'phantom.get_phase results: success: {}, message: {}, phase_id: {}, phase_name: {}'.format(success, message, phase_id, phase_name)\n    )\n    \n    # Task data for adding task notes\n    task_data = {}\n    \n    # Get the tasks for start of the workbook\n    for task in phantom.get_tasks(container=container):\n        ## gets the current phase and 1st task\n        if phase_id == task['data']['phase'] and task['data']['name'] == input_parameter_0:\n            task_data.update(task['data'])\n            phantom.debug('phantom.get_tasks found the task: task_id: {}, task_name: {}'.format(task_data['id'],task_data['name']))\n\n    \"\"\" Create multiple single indicator note or multiple notes (cusotmer defined)\n        Change the indicators length to greater than 5 artifacts if you want more notes created\n        The maximum number of notes you want created is related to the number of indicators present.\"\"\"\n    \n    title = \"Automated IP Indicator Report\"\n    if len(indicators) <= note_limit:\n        # Create loop for creating multiple notes under the same task\n        phantom.debug(\"Found {} indicators.\".format(len(indicators)))\n        phantom.debug(\"Creating Multiple indicator notes.\")\n        for indicator in indicators: \n            title = indicator[1]\n            # Define Note content build here\n            note_content = \"{}\\n {}\\n {}\\n {}\".format(indicator[5].encode('UTF-8'),indicator[4].encode('UTF-8'),indicator[3].encode('UTF-8'),indicator[2].encode('UTF-8'))\n            #phantom.debug(\"Multi-Note content: \\n {}\".format(note_content))\n        \n            # Build note parameters\n            note_params.append({\n                \"note_type\": \"task\",\n                \"task_id\": task_data['id'],\n                \"container_id\": container['id'],\n                \"title\": title,\n                \"content\": note_content,\n                \"note_format\": \"markdown\",\n                \"phase_id\": phase_id\n            })\n    else:\n        phantom.debug(\"Found {} indicators.\".format(len(indicators)))\n        phantom.debug(\"Creating Single indicator notes.\")\n        note_content = \"\"\n        for indicator in indicators: \n            # Define Note content build here\n            note_content += \"## {}\\n {}\\n {}\\n {}\\n {}\\n\".format(indicator[1].encode('UTF-8'),indicator[5].encode('UTF-8'),indicator[4].encode('UTF-8'),indicator[3].encode('UTF-8'),indicator[2].encode('UTF-8'))\n            #phantom.debug(\"Single Note content: \\n {}\".format(note_content))\n\n        # Build note parameters\n        note_params.append({\n            \"note_type\": \"task\",\n            \"task_id\": task_data['id'],\n            \"container_id\": container['id'],\n            \"title\": title,\n            \"content\": note_content,\n            \"note_format\": \"markdown\",\n            \"phase_id\": phase_id\n        })    \n        \n    # Save parameters for REST calls to update\n    #phantom.debug(\"Debug Parameters:\")\n    generate_task_notes__note_params = note_params\n\n",
                        "warn": false,
                        "z": 793
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "3a75a300-6fd4-487f-a184-18a161d5fca4",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "156a9755-033e-43eb-8d1e-f2ebc18d5f32",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "6e953e17-9b70-4c48-b2bd-a13c7a29b009",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 799
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "7ac9d618-1ce3-4d9d-8bb6-7d68247eb835",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "f9dc4405-ff78-4e6e-a8d6-986131e4b52f",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "4958e227-3fa8-456b-82c2-bc372cd3543a",
                            "selector": ".port-body[type=\"input\"]"
                        },
                        "type": "link",
                        "z": 805
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "1e052983-db60-48ce-9ac5-efedf7c8030f",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "4958e227-3fa8-456b-82c2-bc372cd3543a",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "156a9755-033e-43eb-8d1e-f2ebc18d5f32",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 810
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".format": {
                                "text": "intel format"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out-1": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out-1>.port-body": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "format"
                            },
                            "g.code image": {
                                "opacity": 1
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            }
                        },
                        "block_code": "def intel_format(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('intel_format() called')\n    \n    template = \"\"\"%%\n### Recorded Future Summary of {0}: *{1}*\n***Critical Label: {2}, Last seen: {3}***\n\n*RF link (Intel Card): {4}*\n\nOrganization: {5} , ASN: {6}, First Seen: {7} \n\n***Threat List:***\n- Threat list: {20}\n- Threat list: {21}\n\n***Rules Found***\n1. **{8}** - Evidence: {9}\n1. **{10}** - Evidence: {11}\n1. **{12}** - Evidence: {13}\n1. **{14}** - Evidence: {15}\n1. **{16}** - Evidence: {17}\n1. **{18}** - Evidence: {19}\n\n---\n%%\"\"\"\n\n    # parameter list for template variable replacement\n    parameters = [\n        \"ip_intel:action_result.parameter.ip\",\n        \"ip_intel:action_result.summary.riskSummary\",\n        \"ip_intel:action_result.summary.criticalityLabel\",\n        \"ip_intel:action_result.summary.lastSeen\",\n        \"ip_intel:action_result.data.*.intelCard\",\n        \"ip_intel:action_result.data.*.location.organization\",\n        \"ip_intel:action_result.data.*.location.asn\",\n        \"ip_intel:action_result.data.*.timestamps.firstSeen\",\n        \"ip_intel:action_result.data.*.risk.evidenceDetails.0.rule\",\n        \"ip_intel:action_result.data.*.risk.evidenceDetails.0.evidenceString\",\n        \"ip_intel:action_result.data.*.risk.evidenceDetails.1.rule\",\n        \"ip_intel:action_result.data.*.risk.evidenceDetails.1.evidenceString\",\n        \"ip_intel:action_result.data.*.risk.evidenceDetails.2.rule\",\n        \"ip_intel:action_result.data.*.risk.evidenceDetails.2.evidenceString\",\n        \"ip_intel:action_result.data.*.risk.evidenceDetails.3.rule\",\n        \"ip_intel:action_result.data.*.risk.evidenceDetails.3.evidenceString\",\n        \"ip_intel:action_result.data.*.risk.evidenceDetails.4.rule\",\n        \"ip_intel:action_result.data.*.risk.evidenceDetails.4.evidenceString\",\n        \"ip_intel:action_result.data.*.risk.evidenceDetails.5.rule\",\n        \"ip_intel:action_result.data.*.risk.evidenceDetails.5.evidenceString\",\n        \"ip_intel:action_result.data.*.threatLists.0.description\",\n        \"ip_intel:action_result.data.*.threatLists.1.description\",\n    ]\n\n    phantom.format(container=container, template=template, parameters=parameters, name=\"intel_format\")\n\n    join_indicator_analysis(container=container)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "ip intel",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "intel format",
                        "description": "",
                        "format": "format",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "0bf4bc4e-04e8-4b45-be55-deaaa3f1626e",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 404,
                        "line_start": 346,
                        "message": "Configuring now",
                        "name": "format",
                        "notes": "Create intelligence information format for note",
                        "number": 11,
                        "order": 10,
                        "outPorts": [
                            "out-1"
                        ],
                        "parameters": [
                            {
                                "position": 0,
                                "type": "",
                                "value": "ip_intel:action_result.parameter.ip"
                            },
                            {
                                "position": 1,
                                "type": "",
                                "value": "ip_intel:action_result.summary.riskSummary"
                            },
                            {
                                "position": 1,
                                "type": "",
                                "value": "ip_intel:action_result.summary.criticalityLabel"
                            },
                            {
                                "position": 2,
                                "type": "",
                                "value": "ip_intel:action_result.summary.lastSeen"
                            },
                            {
                                "position": 3,
                                "type": "",
                                "value": "ip_intel:action_result.data.*.intelCard"
                            },
                            {
                                "position": 4,
                                "type": "",
                                "value": "ip_intel:action_result.data.*.location.organization"
                            },
                            {
                                "position": 5,
                                "type": "",
                                "value": "ip_intel:action_result.data.*.location.asn"
                            },
                            {
                                "position": 5,
                                "type": "",
                                "value": "ip_intel:action_result.data.*.timestamps.firstSeen"
                            },
                            {
                                "position": 8,
                                "type": "",
                                "value": "ip_intel:action_result.data.*.risk.evidenceDetails.0.rule"
                            },
                            {
                                "position": 9,
                                "type": "",
                                "value": "ip_intel:action_result.data.*.risk.evidenceDetails.0.evidenceString"
                            },
                            {
                                "position": 10,
                                "type": "",
                                "value": "ip_intel:action_result.data.*.risk.evidenceDetails.1.rule"
                            },
                            {
                                "position": 11,
                                "type": "",
                                "value": "ip_intel:action_result.data.*.risk.evidenceDetails.1.evidenceString"
                            },
                            {
                                "position": 12,
                                "type": "",
                                "value": "ip_intel:action_result.data.*.risk.evidenceDetails.2.rule"
                            },
                            {
                                "position": 13,
                                "type": "",
                                "value": "ip_intel:action_result.data.*.risk.evidenceDetails.2.evidenceString"
                            },
                            {
                                "position": 14,
                                "type": "",
                                "value": "ip_intel:action_result.data.*.risk.evidenceDetails.3.rule"
                            },
                            {
                                "position": 15,
                                "type": "",
                                "value": "ip_intel:action_result.data.*.risk.evidenceDetails.3.evidenceString"
                            },
                            {
                                "position": 16,
                                "type": "",
                                "value": "ip_intel:action_result.data.*.risk.evidenceDetails.4.rule"
                            },
                            {
                                "position": 17,
                                "type": "",
                                "value": "ip_intel:action_result.data.*.risk.evidenceDetails.4.evidenceString"
                            },
                            {
                                "position": 18,
                                "type": "",
                                "value": "ip_intel:action_result.data.*.risk.evidenceDetails.5.rule"
                            },
                            {
                                "position": 19,
                                "type": "",
                                "value": "ip_intel:action_result.data.*.risk.evidenceDetails.5.evidenceString"
                            },
                            {
                                "type": "",
                                "value": "ip_intel:action_result.data.*.threatLists.0.description"
                            },
                            {
                                "position": 21,
                                "type": "",
                                "value": "ip_intel:action_result.data.*.threatLists.1.description"
                            }
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 600,
                            "y": 180
                        },
                        "previous_function": "",
                        "previous_name": "intel_format",
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "format",
                        "status": "",
                        "template": "%%\n### Recorded Future Summary of {0}: *{1}*\n***Critical Label: {2}, Last seen: {3}***\n\n*RF link (Intel Card): {4}*\n\nOrganization: {5} , ASN: {6}, First Seen: {7} \n\n***Threat List:***\n- Threat list: {20}\n- Threat list: {21}\n\n***Rules Found***\n1. **{8}** - Evidence: {9}\n1. **{10}** - Evidence: {11}\n1. **{12}** - Evidence: {13}\n1. **{14}** - Evidence: {15}\n1. **{16}** - Evidence: {17}\n1. **{18}** - Evidence: {19}\n\n---\n%%",
                        "title": "format",
                        "type": "coa.Format",
                        "warn": false,
                        "z": 811
                    },
                    {
                        "action": "ip reputation",
                        "action_type": "investigate",
                        "active": false,
                        "active_keys": {},
                        "active_values": {
                            "ip": "merge_ip_addresses:custom_function_result.data.*.item"
                        },
                        "angle": 0,
                        "app": "",
                        "appid": "",
                        "approver": "",
                        "assets": [
                            {
                                "action": "ip reputation",
                                "actions": [
                                    "detonate url",
                                    "detonate file",
                                    "get report",
                                    "get file",
                                    "ip reputation",
                                    "domain reputation",
                                    "url reputation",
                                    "file reputation",
                                    "test connectivity"
                                ],
                                "active": true,
                                "app_name": "VirusTotal",
                                "app_version": "1.2.52",
                                "appid": "11f676a4-f3d4-4db0-8587-f4e942c07c7c",
                                "asset_name": "virustotal - personal",
                                "config_type": "asset",
                                "count": 0,
                                "fields": {
                                    "ip": "merge_ip_addresses:custom_function_result.data.*.item"
                                },
                                "has_app": true,
                                "id": 177,
                                "loaded": false,
                                "missing": false,
                                "name": "virustotal",
                                "output": [
                                    {
                                        "data_path": "action_result.status",
                                        "data_type": "string",
                                        "example_values": [
                                            "success",
                                            "failed"
                                        ]
                                    },
                                    {
                                        "column_name": "IP",
                                        "column_order": 0,
                                        "contains": [
                                            "ip",
                                            "ipv6"
                                        ],
                                        "data_path": "action_result.parameter.ip",
                                        "data_type": "string",
                                        "example_values": [
                                            "8.8.8.8"
                                        ]
                                    },
                                    {
                                        "column_name": "As Owner",
                                        "column_order": 1,
                                        "data_path": "action_result.data.*.as_owner",
                                        "data_type": "string",
                                        "example_values": [
                                            "Test Inc."
                                        ]
                                    },
                                    {
                                        "column_name": "ASN",
                                        "column_order": 2,
                                        "data_path": "action_result.data.*.asn",
                                        "data_type": "numeric",
                                        "example_values": [
                                            15169
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.continent",
                                        "data_type": "string",
                                        "example_values": [
                                            "NA"
                                        ]
                                    },
                                    {
                                        "column_name": "Country",
                                        "column_order": 3,
                                        "data_path": "action_result.data.*.country",
                                        "data_type": "string",
                                        "example_values": [
                                            "US"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.detected_communicating_samples.*.date",
                                        "data_type": "string",
                                        "example_values": [
                                            "2019-02-01 08:27:02"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.detected_communicating_samples.*.positives",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "sha256"
                                        ],
                                        "data_path": "action_result.data.*.detected_communicating_samples.*.sha256",
                                        "data_type": "string",
                                        "example_values": [
                                            "95aea1163cd742d895f048de9b7f7ae83149ba2515b174dc6d5cfd910cb07ee3"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.detected_communicating_samples.*.total",
                                        "data_type": "numeric",
                                        "example_values": [
                                            61
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.detected_downloaded_samples.*.date",
                                        "data_type": "string",
                                        "example_values": [
                                            "2017-09-28 14:00:34"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.detected_downloaded_samples.*.positives",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "sha256"
                                        ],
                                        "data_path": "action_result.data.*.detected_downloaded_samples.*.sha256",
                                        "data_type": "string",
                                        "example_values": [
                                            "2b977b6342a624097b669fd2347ffbcbdc8a814369b5f431835793dbaa2251c8"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.detected_downloaded_samples.*.total",
                                        "data_type": "numeric",
                                        "example_values": [
                                            57
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.detected_referrer_samples.*.date",
                                        "data_type": "string",
                                        "example_values": [
                                            "2018-02-14 12:35:57"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.detected_referrer_samples.*.positives",
                                        "data_type": "numeric",
                                        "example_values": [
                                            25
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "sha256"
                                        ],
                                        "data_path": "action_result.data.*.detected_referrer_samples.*.sha256",
                                        "data_type": "string",
                                        "example_values": [
                                            "6c16bbddc9dcbf447c44afb11387115ac657852fcdf30cf068cf6e11e8786212"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.detected_referrer_samples.*.total",
                                        "data_type": "numeric",
                                        "example_values": [
                                            70
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.detected_urls.*.positives",
                                        "data_type": "numeric",
                                        "example_values": [
                                            9
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.detected_urls.*.scan_date",
                                        "data_type": "string",
                                        "example_values": [
                                            "2019-02-01 07:31:41"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.detected_urls.*.total",
                                        "data_type": "numeric",
                                        "example_values": [
                                            67
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "url",
                                            "file name"
                                        ],
                                        "data_path": "action_result.data.*.detected_urls.*.url",
                                        "data_type": "string",
                                        "example_values": [
                                            "http://vanmaulop10.com/now/index.php?mail="
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.network",
                                        "data_type": "string",
                                        "example_values": [
                                            "8.8.8.0/24"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "host name"
                                        ],
                                        "data_path": "action_result.data.*.resolutions.*.hostname",
                                        "data_type": "string",
                                        "example_values": [
                                            "*.o365answers.com"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.resolutions.*.last_resolved",
                                        "data_type": "string",
                                        "example_values": [
                                            "2015-12-10 00:00:00"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.response_code",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.undetected_communicating_samples.*.date",
                                        "data_type": "string",
                                        "example_values": [
                                            "2019-02-01 09:03:52"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.undetected_communicating_samples.*.positives",
                                        "data_type": "numeric",
                                        "example_values": [
                                            0
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "sha256"
                                        ],
                                        "data_path": "action_result.data.*.undetected_communicating_samples.*.sha256",
                                        "data_type": "string",
                                        "example_values": [
                                            "414296de0c223c28910d99797701d4fa192208f4e30c32b0dc07da7602d7a4fb"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.undetected_communicating_samples.*.total",
                                        "data_type": "numeric",
                                        "example_values": [
                                            57
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.undetected_downloaded_samples.*.date",
                                        "data_type": "string",
                                        "example_values": [
                                            "2019-01-30 20:23:21"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.undetected_downloaded_samples.*.positives",
                                        "data_type": "numeric",
                                        "example_values": [
                                            0
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "sha256"
                                        ],
                                        "data_path": "action_result.data.*.undetected_downloaded_samples.*.sha256",
                                        "data_type": "string",
                                        "example_values": [
                                            "23926e9185d8d43c02807a838ffb373cc1977726094a4e46807c66ada9dd7660"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.undetected_downloaded_samples.*.total",
                                        "data_type": "numeric",
                                        "example_values": [
                                            71
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.undetected_referrer_samples.*.positives",
                                        "data_type": "numeric",
                                        "example_values": [
                                            0
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "sha256"
                                        ],
                                        "data_path": "action_result.data.*.undetected_referrer_samples.*.sha256",
                                        "data_type": "string",
                                        "example_values": [
                                            "01e110d94eec3ec8abed7c9bb34fd7bcc3bd06c397ec83676431fc193be3b68e"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.undetected_referrer_samples.*.total",
                                        "data_type": "numeric",
                                        "example_values": [
                                            55
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.undetected_urls.*",
                                        "data_type": "string",
                                        "example_values": [
                                            "2018-10-01 03:53:53"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.verbose_msg",
                                        "data_type": "string",
                                        "example_values": [
                                            "IP address in dataset"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.summary.communicating_samples",
                                        "data_type": "numeric",
                                        "example_values": [
                                            100
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.summary.detected_urls",
                                        "data_type": "numeric",
                                        "example_values": [
                                            100
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.summary.downloaded_samples",
                                        "data_type": "numeric",
                                        "example_values": [
                                            11
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.message",
                                        "data_type": "string",
                                        "example_values": [
                                            "Downloaded samples: 11, Detected urls: 100, Communicating samples: 100"
                                        ]
                                    },
                                    {
                                        "data_path": "summary.total_objects",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1
                                        ]
                                    },
                                    {
                                        "data_path": "summary.total_objects_successful",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1
                                        ]
                                    },
                                    {
                                        "data_path": "summary.total_positives",
                                        "data_type": "numeric",
                                        "example_values": [
                                            0
                                        ]
                                    }
                                ],
                                "parameters": {
                                    "ip": {
                                        "contains": [
                                            "ip",
                                            "ipv6"
                                        ],
                                        "data_type": "string",
                                        "default": null,
                                        "description": "IP to query",
                                        "key": "ip",
                                        "order": 0,
                                        "primary": true,
                                        "required": true
                                    }
                                },
                                "product_name": "VirusTotal",
                                "product_vendor": "VirusTotal",
                                "targets": "177",
                                "type": "reputation"
                            }
                        ],
                        "attrs": {
                            ".action": {
                                "text": "ip reputation"
                            },
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "Investigate"
                            },
                            "g.approver image": {
                                "opacity": 1
                            },
                            "g.code image": {
                                "opacity": 1
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.icon image": {
                                "xlink:href": "/inc/coa/img/block_icon_investigate.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            },
                            "g.timer image": {
                                "opacity": 1
                            }
                        },
                        "block_code": "def ip_reputation(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('ip_reputation() called')\n        \n    #phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))\n    \n    # collect data for 'ip_reputation' call\n    custom_function_results_data_1 = phantom.collect2(container=container, datapath=['merge_ip_addresses:custom_function_result.data.*.item'], action_results=results)\n\n    parameters = []\n    \n    # build parameters list for 'ip_reputation' call\n    for custom_function_results_item_1 in custom_function_results_data_1:\n        if custom_function_results_item_1[0]:\n            parameters.append({\n                'ip': custom_function_results_item_1[0],\n            })\n\n    phantom.act(action=\"ip reputation\", parameters=parameters, assets=['virustotal'], callback=reputation_format, name=\"ip_reputation\")\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": true,
                        "color": "",
                        "connected_to_start": true,
                        "connection_name": "merge ip addresses",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "ip reputation",
                        "delay": 0,
                        "description": "",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "0413c9fc-fee8-433f-ab45-9458da4c6133",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 86,
                        "line_start": 65,
                        "message": "Configuring now",
                        "name": "ip reputation",
                        "notes": "Gets IP reputation  for the ip address",
                        "number": 1,
                        "order": 4,
                        "outPorts": [
                            "out"
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 360,
                            "y": 60
                        },
                        "previous_function": "",
                        "previous_name": "ip_reputation",
                        "required_params": {
                            "ip": true
                        },
                        "reviewer": "",
                        "show_number": false,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "action_assets",
                        "status": "",
                        "title": "Investigate",
                        "type": "coa.Action",
                        "warn": false,
                        "z": 813
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "api": "set status",
                        "attrs": {
                            ".api": {
                                "text": "set status to new"
                            },
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "API"
                            },
                            "g.code image": {
                                "opacity": 1
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            }
                        },
                        "block_code": "def set_status_to_new(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('set_status_to_new() called')\n\n    phantom.set_status(container=container, status=\"New\")\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "color": "",
                        "configured": [
                            {
                                "key": "set-status",
                                "setStatusStatus": "New",
                                "setStatusStatus_display": "New"
                            }
                        ],
                        "connected_to_start": true,
                        "connection_name": "create task notes",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "set status to new",
                        "description": "",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "156a9755-033e-43eb-8d1e-f2ebc18d5f32",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 603,
                        "line_start": 596,
                        "message": "Configuring now",
                        "name": "set status",
                        "notes": "Set status to new signaling ready to pick for the analyst",
                        "number": 4,
                        "order": 15,
                        "outPorts": [
                            "out"
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 1120,
                            "y": -40
                        },
                        "previous_function": "",
                        "previous_name": "set_status_to_new",
                        "show_number": false,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "api",
                        "status": "",
                        "title": "API",
                        "type": "coa.API",
                        "warn": false,
                        "z": 815
                    },
                    {
                        "action": "post data",
                        "action_type": "generic",
                        "active": false,
                        "active_keys": {},
                        "active_values": {
                            "body": "generate_task_notes:custom_function:note_params",
                            "headers": "",
                            "location": "/note/",
                            "verify_certificate": "False"
                        },
                        "angle": 0,
                        "app": "",
                        "appid": "",
                        "approver": "",
                        "assets": [
                            {
                                "action": "post data",
                                "actions": [
                                    "post data",
                                    "get data",
                                    "get options",
                                    "get headers",
                                    "delete data",
                                    "patch data",
                                    "put data",
                                    "test connectivity"
                                ],
                                "active": true,
                                "app_name": "HTTP",
                                "app_version": "2.1.15",
                                "appid": "290b7499-0374-4930-9cdc-5e9b05d65827",
                                "asset_name": "phantom_rest_api",
                                "config_type": "asset",
                                "count": 0,
                                "fields": {
                                    "body": "generate_task_notes:custom_function:note_params",
                                    "headers": "",
                                    "location": "/note/",
                                    "verify_certificate": "False"
                                },
                                "has_app": true,
                                "id": 215,
                                "loaded": false,
                                "missing": false,
                                "name": "phantom_rest_api",
                                "output": [
                                    {
                                        "data_path": "action_result.status",
                                        "data_type": "string",
                                        "example_values": [
                                            "failed"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.parameter.body",
                                        "data_type": "numeric",
                                        "example_values": [
                                            "{\"name\": \"Bad IP\"}"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.parameter.headers",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.parameter.location",
                                        "data_type": "string",
                                        "example_values": [
                                            "/rest/assets"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.parameter.verify_certificate",
                                        "data_type": "boolean",
                                        "example_values": [
                                            "false"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "url"
                                        ],
                                        "data_path": "action_result.data.*.location",
                                        "data_type": "string",
                                        "example_values": [
                                            "http://192.168.1.26/rest/assets"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.method",
                                        "data_type": "string",
                                        "example_values": [
                                            "POST"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.parsed_response_body",
                                        "data_type": "string",
                                        "example_values": [
                                            "{\"failed\": true, \"message\": \"Requested item not found\"}"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.response_body",
                                        "data_type": "string",
                                        "example_values": [
                                            "{\"failed\": true, \"message\": \"Requested item not found\"}"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.response_headers",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.summary.reason",
                                        "data_type": "string",
                                        "example_values": [
                                            "Not Found"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.summary.status_code",
                                        "data_type": "numeric",
                                        "example_values": [
                                            404
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.message",
                                        "data_type": "string",
                                        "example_values": [
                                            "Can't process response from server. Status Code: 404 Data from server: {\"failed\": true, \"message\": \"Requested item not found\"}"
                                        ]
                                    },
                                    {
                                        "data_path": "summary.total_objects",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1
                                        ]
                                    },
                                    {
                                        "data_path": "summary.total_objects_successful",
                                        "data_type": "numeric",
                                        "example_values": [
                                            0
                                        ]
                                    }
                                ],
                                "parameters": {
                                    "body": {
                                        "data_type": "string",
                                        "default": null,
                                        "description": "POST body (query string, JSON, etc.)",
                                        "key": "body",
                                        "order": 1,
                                        "required": true
                                    },
                                    "headers": {
                                        "data_type": "string",
                                        "default": null,
                                        "description": "Additional headers (JSON object with headers)",
                                        "key": "headers",
                                        "order": 2,
                                        "required": false
                                    },
                                    "location": {
                                        "data_type": "string",
                                        "default": null,
                                        "description": "Location (e.g. path/to/endpoint)",
                                        "key": "location",
                                        "order": 0,
                                        "required": true
                                    },
                                    "verify_certificate": {
                                        "data_type": "boolean",
                                        "default": null,
                                        "description": "Verify certificates (if using HTTPS)",
                                        "key": "verify_certificate",
                                        "order": 2,
                                        "required": true
                                    }
                                },
                                "product_name": "HTTP",
                                "product_vendor": "Generic",
                                "targets": "215",
                                "type": "information"
                            }
                        ],
                        "attrs": {
                            ".action": {
                                "text": "create task notes"
                            },
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "Generic"
                            },
                            "g.approver image": {
                                "opacity": 1
                            },
                            "g.code image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_code_dark_on.svg"
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.icon image": {
                                "xlink:href": "/inc/coa/img/block_icon_generic.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            },
                            "g.timer image": {
                                "opacity": 1
                            }
                        },
                        "block_code": "def create_task_notes(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('create_task_notes() called')\n        \n    #phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))\n    \n    generate_task_notes__note_params = json.loads(phantom.get_run_data(key='generate_task_notes:note_params'))\n    # collect data for 'create_task_notes' call\n\n    parameters = []\n    \n    # build parameters list for 'create_task_notes' call\n    parameters.append({\n        'location': \"/note/\",\n        'body': generate_task_notes__note_params,\n        'headers': \"\",\n        'verify_certificate': False,\n    })\n\n    phantom.act(action=\"post data\", parameters=parameters, assets=['phantom_rest_api'], callback=set_status_to_new, name=\"create_task_notes\")\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": true,
                        "color": "",
                        "connected_to_start": true,
                        "connection_name": "geolocation, whois ip, ip reputation, ip intel",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "def create_task_notes(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('create_task_notes() called')\n        \n    #phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))\n    \n    generate_task_notes__note_params = json.loads(phantom.get_run_data(key='generate_task_notes:note_params'))\n    # collect data for 'create_task_notes' call\n\n    parameters = []\n    \n    # build parameters list for 'create_task_notes' call\n    for note_params in generate_task_notes__note_params:\n        parameters.append({\n            'location': \"/note/\",\n            'body': json.dumps(note_params),\n            'headers': \"\",\n            'verify_certificate': False,\n        })\n\n    phantom.act(action=\"post data\", parameters=parameters, assets=['phantom_rest_api'], callback=set_status_to_new, name=\"create_task_notes\")\n\n    return",
                        "custom_join": "",
                        "custom_name": "create task notes",
                        "delay": "0",
                        "description": "Customized the block with a for loop to loop thru the created notes parameters.\n\ncustom code:\n    # build parameters list for 'create_task_notes' call\n    for note_params in generate_task_notes__note_params:\n        parameters.append({\n            'body': json.dumps(note_params),\n            'headers': \"\",\n            'location': \"/note/\",\n            'verify_certificate': False,\n        })",
                        "has_custom": true,
                        "has_custom_block": true,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "4958e227-3fa8-456b-82c2-bc372cd3543a",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 639,
                        "line_start": 616,
                        "message": "Configuring now",
                        "name": "post data",
                        "notes": "Creates workbook task notes that correspond to the tasks created with the appropriate automated analysis",
                        "number": 3,
                        "order": 16,
                        "outPorts": [
                            "out"
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 880,
                            "y": -40
                        },
                        "previous_function": "",
                        "previous_name": "create_task_notes",
                        "required_params": {
                            "body": true,
                            "location": true,
                            "verify_certificate": true
                        },
                        "reviewer": "",
                        "show_number": false,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "action_assets",
                        "status": "",
                        "title": "Generic",
                        "type": "coa.Action",
                        "warn": false,
                        "z": 816
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "api": "add comment",
                        "attrs": {
                            ".api": {
                                "text": "missing data comment"
                            },
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "API"
                            },
                            "g.code image": {
                                "opacity": 1
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            }
                        },
                        "block_code": "def missing_data_comment(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('missing_data_comment() called')\n\n    phantom.comment(container=container, comment=\"Missing indicator to execute Indicator Analysis - IP playbook.  Check logic and playbook parameters\")\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "color": "",
                        "configured": [
                            {
                                "addCommentComment": "Missing indicator to execute Indicator Analysis - IP playbook.  Check logic and playbook parameters",
                                "key": "add-comment"
                            }
                        ],
                        "connected_to_start": true,
                        "connection_name": "",
                        "connection_type": "",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "missing data comment",
                        "description": "",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "7e8a5c86-a3a1-46cb-a45f-df00b5475e2e",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 457,
                        "line_start": 450,
                        "message": "Configuring now",
                        "name": "add comment",
                        "notes": "Adds a missing data comment",
                        "number": 3,
                        "order": 13,
                        "outPorts": [
                            "out"
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": -100,
                            "y": 260
                        },
                        "previous_function": "",
                        "previous_name": "missing_data_comment",
                        "show_number": false,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "api",
                        "status": "",
                        "title": "API",
                        "type": "coa.API",
                        "warn": false,
                        "z": 818
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "a1d74870-6a3d-43fd-abc2-65672c5b1376",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "a8167b06-2400-4a02-8e58-0f7cd574953b",
                            "port": "out-1",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "e4bd5885-3ad6-45f7-9671-b5622ede86d2",
                            "selector": ".port-body[type=\"input\"]"
                        },
                        "type": "link",
                        "z": 820
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "257c14d4-3bf7-4c0c-b938-9bec87347f12",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "e4bd5885-3ad6-45f7-9671-b5622ede86d2",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "c040f191-9789-4f2b-b4ed-6ed6265ea45e",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 825
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "e5d24068-af02-4c4e-bbec-a1c5a965ca95",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "e4bd5885-3ad6-45f7-9671-b5622ede86d2",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "eb0ab619-9008-4139-ade7-729e2f59b66e",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 826
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "1b5fb033-90a8-442f-ad9f-522326330e01",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "e4bd5885-3ad6-45f7-9671-b5622ede86d2",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "0413c9fc-fee8-433f-ab45-9458da4c6133",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 827
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "bc53bdad-92e9-40d9-85c9-8bd63891a5a9",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "e4bd5885-3ad6-45f7-9671-b5622ede86d2",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "cc64ef72-b0d9-4d5b-babf-84b7d9a1582c",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 828
                    },
                    {
                        ".scmName/text": "enrichment",
                        "active": false,
                        "active_keys": {},
                        "active_values": {},
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".customFunction": {
                                "text": "merge ip addresses"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".scmName": {
                                "text": "enrichment"
                            },
                            ".title": {
                                "text": "custom function"
                            },
                            ".title-info": {
                                "text": ""
                            },
                            "g.branch image": {
                                "opacity": 1
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            }
                        },
                        "block_code": "def merge_ip_addresses(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('merge_ip_addresses() called')\n    \n    filtered_artifacts_data_0 = phantom.collect2(container=container, datapath=['filtered-data:ip_address_filter:condition_1:artifact:*.cef.destinationAddress', 'filtered-data:ip_address_filter:condition_1:artifact:*.cef.dest_ip', 'filtered-data:ip_address_filter:condition_1:artifact:*.cef.sourceAddress', 'filtered-data:ip_address_filter:condition_1:artifact:*.cef.src_ip'])\n\n    parameters = []\n\n    filtered_artifacts_data_0_0 = [item[0] for item in filtered_artifacts_data_0]\n    filtered_artifacts_data_0_1 = [item[1] for item in filtered_artifacts_data_0]\n    filtered_artifacts_data_0_2 = [item[2] for item in filtered_artifacts_data_0]\n    filtered_artifacts_data_0_3 = [item[3] for item in filtered_artifacts_data_0]\n\n    parameters.append({\n        'input_1': filtered_artifacts_data_0_0,\n        'input_2': filtered_artifacts_data_0_1,\n        'input_3': filtered_artifacts_data_0_2,\n        'input_4': filtered_artifacts_data_0_3,\n        'input_5': None,\n        'input_6': None,\n        'input_7': None,\n        'input_8': None,\n        'input_9': None,\n        'input_10': None,\n    })\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n\n    # Write your custom code here...\n\n    ################################################################################\n    ## Custom Code End\n    ################################################################################    \n\n    # call custom function \"enrichment/list_merge_dedup\", returns the custom_function_run_id\n    phantom.custom_function(custom_function='enrichment/list_merge_dedup', parameters=parameters, name='merge_ip_addresses', callback=merge_ip_addresses_callback)\n\n    return",
                        "callback_code": "def merge_ip_addresses_callback(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None):\n    phantom.debug('merge_ip_addresses_callback() called')\n    \n    geolocation(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function)\n    whois_ip(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function)\n    ip_reputation(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function)\n    ip_intel(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function)\n\n    return",
                        "callback_start": 678,
                        "callsback": true,
                        "cfDisplayPath": "enrichment/list_merge_dedup",
                        "cfInputs": {
                            "input_1": {
                                "collectionType": "filtered_artifacts_data",
                                "dataPath": "filtered-data:ip_address_filter:condition_1:artifact:*.cef.destinationAddress",
                                "paramName": "filtered_artifacts_data_0_0",
                                "type": "list"
                            },
                            "input_10": {
                                "dataPath": "",
                                "type": "list"
                            },
                            "input_2": {
                                "collectionType": "filtered_artifacts_data",
                                "dataPath": "filtered-data:ip_address_filter:condition_1:artifact:*.cef.dest_ip",
                                "paramName": "filtered_artifacts_data_0_1",
                                "type": "list"
                            },
                            "input_3": {
                                "collectionType": "filtered_artifacts_data",
                                "dataPath": "filtered-data:ip_address_filter:condition_1:artifact:*.cef.sourceAddress",
                                "paramName": "filtered_artifacts_data_0_2",
                                "type": "list"
                            },
                            "input_4": {
                                "collectionType": "filtered_artifacts_data",
                                "dataPath": "filtered-data:ip_address_filter:condition_1:artifact:*.cef.src_ip",
                                "paramName": "filtered_artifacts_data_0_3",
                                "type": "list"
                            },
                            "input_5": {
                                "dataPath": "",
                                "type": "list"
                            },
                            "input_6": {
                                "dataPath": "",
                                "type": "list"
                            },
                            "input_7": {
                                "dataPath": "",
                                "type": "list"
                            },
                            "input_8": {
                                "dataPath": "",
                                "type": "list"
                            },
                            "input_9": {
                                "dataPath": "",
                                "type": "list"
                            }
                        },
                        "color": "",
                        "connected_to_start": true,
                        "connection_name": "",
                        "connection_type": "",
                        "currentVersion": true,
                        "customCodeEndLineOffset": 7,
                        "customCodeStartLine": 27,
                        "customFunction": "enrichment/list_merge_dedup",
                        "customFunctionId": null,
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "merge ip addresses",
                        "delay": 0,
                        "description": "",
                        "draftMode": false,
                        "existingCF": true,
                        "functionBlock": "custom function",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "e4bd5885-3ad6-45f7-9671-b5622ede86d2",
                        "inPorts": [
                            "in"
                        ],
                        "input_1-0": "filtered-data:ip_address_filter:condition_1:artifact:*.cef.destinationAddress",
                        "input_2-1": "filtered-data:ip_address_filter:condition_1:artifact:*.cef.dest_ip",
                        "input_3-2": "filtered-data:ip_address_filter:condition_1:artifact:*.cef.sourceAddress",
                        "input_4-3": "filtered-data:ip_address_filter:condition_1:artifact:*.cef.src_ip",
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 688,
                        "line_start": 639,
                        "message": "Configuring now",
                        "name": "list_merge_dedup",
                        "notes": "merge a list of source and destination ip addresses after filtered thru the bogon list\ndestinationAddress\ndest_ip\nsourceAddress\nsrc_ip",
                        "number": 1,
                        "order": 17,
                        "outPorts": [
                            "out"
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 100,
                            "y": -180
                        },
                        "previous_function": "",
                        "previous_name": "merge_ip_addresses",
                        "selectedCustomFunction": {
                            "description": "Merge 2-10 different data paths into a single output data path. For example, if IP addresses are stored in the fields sourceAddress, destinationAddress, and deviceAddress, then those three fields could be merged together to form a single list of IP addresses.",
                            "draftMode": false,
                            "id": 173,
                            "inputs": [
                                {
                                    "_pretty_custom_function": "list_merge_dedup",
                                    "contains_type": [
                                        "*"
                                    ],
                                    "custom_function": 173,
                                    "description": "",
                                    "id": 561,
                                    "input_type": "list",
                                    "name": "input_1",
                                    "placeholder": ""
                                },
                                {
                                    "_pretty_custom_function": "list_merge_dedup",
                                    "contains_type": [
                                        "*"
                                    ],
                                    "custom_function": 173,
                                    "description": "",
                                    "id": 562,
                                    "input_type": "list",
                                    "name": "input_2",
                                    "placeholder": ""
                                },
                                {
                                    "_pretty_custom_function": "list_merge_dedup",
                                    "contains_type": [
                                        "*"
                                    ],
                                    "custom_function": 173,
                                    "description": "",
                                    "id": 563,
                                    "input_type": "list",
                                    "name": "input_3",
                                    "placeholder": ""
                                },
                                {
                                    "_pretty_custom_function": "list_merge_dedup",
                                    "contains_type": [
                                        "*"
                                    ],
                                    "custom_function": 173,
                                    "description": "",
                                    "id": 564,
                                    "input_type": "list",
                                    "name": "input_4",
                                    "placeholder": ""
                                },
                                {
                                    "_pretty_custom_function": "list_merge_dedup",
                                    "contains_type": [
                                        "*"
                                    ],
                                    "custom_function": 173,
                                    "description": "",
                                    "id": 565,
                                    "input_type": "list",
                                    "name": "input_5",
                                    "placeholder": ""
                                },
                                {
                                    "_pretty_custom_function": "list_merge_dedup",
                                    "contains_type": [
                                        "*"
                                    ],
                                    "custom_function": 173,
                                    "description": "",
                                    "id": 566,
                                    "input_type": "list",
                                    "name": "input_6",
                                    "placeholder": ""
                                },
                                {
                                    "_pretty_custom_function": "list_merge_dedup",
                                    "contains_type": [
                                        "*"
                                    ],
                                    "custom_function": 173,
                                    "description": "",
                                    "id": 567,
                                    "input_type": "list",
                                    "name": "input_7",
                                    "placeholder": ""
                                },
                                {
                                    "_pretty_custom_function": "list_merge_dedup",
                                    "contains_type": [
                                        "*"
                                    ],
                                    "custom_function": 173,
                                    "description": "",
                                    "id": 568,
                                    "input_type": "list",
                                    "name": "input_8",
                                    "placeholder": ""
                                },
                                {
                                    "_pretty_custom_function": "list_merge_dedup",
                                    "contains_type": [
                                        "*"
                                    ],
                                    "custom_function": 173,
                                    "description": "",
                                    "id": 569,
                                    "input_type": "list",
                                    "name": "input_9",
                                    "placeholder": ""
                                },
                                {
                                    "_pretty_custom_function": "list_merge_dedup",
                                    "contains_type": [
                                        "*"
                                    ],
                                    "custom_function": 173,
                                    "description": "",
                                    "id": 570,
                                    "input_type": "list",
                                    "name": "input_10",
                                    "placeholder": ""
                                }
                            ],
                            "name": "list_merge_dedup",
                            "outputs": [
                                {
                                    "_pretty_custom_function": "list_merge_dedup",
                                    "contains_type": [
                                        "*"
                                    ],
                                    "custom_function": 173,
                                    "data_path": "*.item",
                                    "description": "A combined list of all the values from all the input lists",
                                    "id": 216
                                }
                            ],
                            "playbooks": {
                                "draft_playbooks": [],
                                "draft_version_id": null,
                                "playbooks": [
                                    {
                                        "active": false,
                                        "display_path": "enrichment/Indicator Analysis - IP_py3",
                                        "draft_mode": false,
                                        "id": 4032,
                                        "name": "Indicator Analysis - IP_py3",
                                        "viewable": true
                                    },
                                    {
                                        "active": false,
                                        "display_path": "enrichment/Indicator Analysis - URL_py3",
                                        "draft_mode": false,
                                        "id": 4033,
                                        "name": "Indicator Analysis - URL_py3",
                                        "viewable": true
                                    },
                                    {
                                        "active": false,
                                        "display_path": "enrichment/Indicator Analysis - Filehash_py3",
                                        "draft_mode": false,
                                        "id": 4034,
                                        "name": "Indicator Analysis - Filehash_py3",
                                        "viewable": true
                                    },
                                    {
                                        "active": false,
                                        "display_path": "enrichment/Get process information",
                                        "draft_mode": false,
                                        "id": 4040,
                                        "name": "Get process information",
                                        "viewable": true
                                    },
                                    {
                                        "active": false,
                                        "display_path": "enrichment/Get related event information",
                                        "draft_mode": false,
                                        "id": 4041,
                                        "name": "Get related event information",
                                        "viewable": true
                                    },
                                    {
                                        "active": false,
                                        "display_path": "enrichment/Get network process information",
                                        "draft_mode": false,
                                        "id": 4042,
                                        "name": "Get network process information",
                                        "viewable": true
                                    },
                                    {
                                        "active": false,
                                        "display_path": "enrichment/Analyze user-host activity",
                                        "draft_mode": false,
                                        "id": 4009,
                                        "name": "Analyze user-host activity",
                                        "viewable": true
                                    },
                                    {
                                        "active": false,
                                        "display_path": "enrichment/Indicator Analysis - Host-Account",
                                        "draft_mode": false,
                                        "id": 4018,
                                        "name": "Indicator Analysis - Host-Account",
                                        "viewable": true
                                    },
                                    {
                                        "active": false,
                                        "display_path": "enrichment/Indicator Analysis - Domain",
                                        "draft_mode": false,
                                        "id": 4045,
                                        "name": "Indicator Analysis - Domain",
                                        "viewable": true
                                    },
                                    {
                                        "active": false,
                                        "display_path": "enrichment/Associate Host and Account Events",
                                        "draft_mode": false,
                                        "id": 4014,
                                        "name": "Associate Host and Account Events",
                                        "viewable": true
                                    }
                                ]
                            },
                            "scmId": 63,
                            "scmName": "enrichment"
                        },
                        "show_number": false,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "repo",
                        "status": "",
                        "title": "custom function",
                        "type": "coa.CustomFunctionBlock",
                        "userGeneratedCode": "    # Write your custom code here...",
                        "warn": false,
                        "z": 834
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#637282",
                                "transform": "rotate(45 30 70)"
                            },
                            ".inPorts>.port-0>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".number": {
                                "text": 1
                            },
                            ".outPorts>.port-0": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                },
                                "ref-x": 83,
                                "ref-y": 40
                            },
                            ".outPorts>.port-0>.port-body": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                }
                            },
                            ".outPorts>.port-1": {
                                "port": {
                                    "id": "out-2",
                                    "type": "out"
                                },
                                "ref-x": 41,
                                "ref-y": 82
                            },
                            ".outPorts>.port-1>.port-body": {
                                "port": {
                                    "id": "out-2",
                                    "type": "out"
                                }
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            }
                        },
                        "block_code": "def check_ip_address(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('check_ip_address() called')\n\n    # check for 'if' condition 1\n    matched = phantom.decision(\n        container=container,\n        conditions=[\n            [\"artifact:*.cef.destinationAddress\", \"not in\", \"custom_list:bogon_list\"],\n            [\"artifact:*.cef.dest_ip\", \"not in\", \"custom_list:bogon_list\"],\n            [\"artifact:*.cef.sourceAddress\", \"not in\", \"custom_list:bogon_list\"],\n            [\"artifact:*.cef.src_ip\", \"not in\", \"custom_list:bogon_list\"],\n        ],\n        logical_operator='or')\n\n    # call connected blocks if condition 1 matched\n    if matched:\n        ip_address_filter(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function)\n        return\n\n    # call connected blocks for 'else' condition 2\n    missing_data_comment(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "",
                        "connection_type": "",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "check ip address",
                        "description": "",
                        "hasElse": true,
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "5e8c9ae4-35bd-49ad-9ea2-ce4ada576dc2",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 40,
                        "line_start": 16,
                        "name": "decision",
                        "notes": "Check for sourceAddress and if missing provide a comment that no ip addresses were found.\n\nBLUE: if destinationAddress, dest_ip, sourceAddress, src_ip and not in the bogon_list\n\nPURPLE: if missing add a comment of missing artifact",
                        "number": 1,
                        "order": 2,
                        "outPorts": [
                            "out-1",
                            "out-2"
                        ],
                        "outputs": [
                            {
                                "conditions": [
                                    {
                                        "comparison": "not in",
                                        "data_type": "",
                                        "param": "artifact:*.cef.destinationAddress",
                                        "value": "custom_list:bogon_list"
                                    },
                                    {
                                        "comparison": "not in",
                                        "data_type": "",
                                        "param": "artifact:*.cef.dest_ip",
                                        "value": "custom_list:bogon_list"
                                    },
                                    {
                                        "comparison": "not in",
                                        "data_type": "",
                                        "param": "artifact:*.cef.sourceAddress",
                                        "value": "custom_list:bogon_list"
                                    },
                                    {
                                        "comparison": "not in",
                                        "data_type": "",
                                        "param": "artifact:*.cef.src_ip",
                                        "value": "custom_list:bogon_list"
                                    }
                                ],
                                "display": "If",
                                "logic": "or",
                                "type": "if"
                            },
                            {
                                "conditions": [
                                    {
                                        "comparison": "==",
                                        "data_type": "",
                                        "param": "",
                                        "value": ""
                                    }
                                ],
                                "display": "Else",
                                "logic": "and",
                                "type": "else"
                            }
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": -180,
                            "y": -180
                        },
                        "previous_function": "",
                        "previous_name": "check_ip_address",
                        "show_number": true,
                        "size": {
                            "height": 82,
                            "width": 82
                        },
                        "state": "decision",
                        "status": "",
                        "type": "coa.Decision",
                        "warn": "",
                        "z": 835
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773",
                                "transform": "rotate(45 30 70)"
                            },
                            ".inPorts>.port-0>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".number": {
                                "text": 1
                            },
                            ".outPorts>.port-0": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                },
                                "ref-x": 83,
                                "ref-y": 40
                            },
                            ".outPorts>.port-0>.port-body": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                }
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            }
                        },
                        "block_code": "def ip_address_filter(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('ip_address_filter() called')\n\n    # collect filtered artifact ids for 'if' condition 1\n    matched_artifacts_1, matched_results_1 = phantom.condition(\n        container=container,\n        conditions=[\n            [\"artifact:*.cef.destinationAddress\", \"not in\", \"custom_list:bogon_list\"],\n            [\"artifact:*.cef.dest_ip\", \"not in\", \"custom_list:bogon_list\"],\n            [\"artifact:*.cef.sourceAddress\", \"not in\", \"custom_list:bogon_list\"],\n            [\"artifact:*.cef.src_ip\", \"not in\", \"custom_list:bogon_list\"],\n        ],\n        logical_operator='or',\n        name=\"ip_address_filter:condition_1\")\n\n    # call connected blocks if filtered artifacts or results\n    if matched_artifacts_1 or matched_results_1:\n        merge_ip_addresses(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function, filtered_artifacts=matched_artifacts_1, filtered_results=matched_results_1)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "",
                        "connection_type": "",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "ip address filter",
                        "description": "TODO:\nadd sourceAddress to destinationAddress and remove RFC 1918 addresses also",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "a8167b06-2400-4a02-8e58-0f7cd574953b",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 65,
                        "line_start": 44,
                        "name": "filter",
                        "notes": "Filters for ip addresses\n\nBLUE: if destinationAddress, dest_ip, sourceAddress, src_ip and not in the bogon_list",
                        "number": 1,
                        "order": 3,
                        "outPorts": [
                            "out-1"
                        ],
                        "outputs": [
                            {
                                "conditions": [
                                    {
                                        "comparison": "not in",
                                        "data_type": "",
                                        "param": "artifact:*.cef.destinationAddress",
                                        "value": "custom_list:bogon_list"
                                    },
                                    {
                                        "comparison": "not in",
                                        "data_type": "",
                                        "param": "artifact:*.cef.dest_ip",
                                        "value": "custom_list:bogon_list"
                                    },
                                    {
                                        "comparison": "not in",
                                        "data_type": "",
                                        "param": "artifact:*.cef.sourceAddress",
                                        "value": "custom_list:bogon_list"
                                    },
                                    {
                                        "comparison": "not in",
                                        "data_type": "",
                                        "param": "artifact:*.cef.src_ip",
                                        "value": "custom_list:bogon_list"
                                    }
                                ],
                                "display": "If",
                                "logic": "or",
                                "type": "if"
                            }
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": -40,
                            "y": -180
                        },
                        "previous_function": "",
                        "previous_name": "ip_address_filter",
                        "show_number": true,
                        "size": {
                            "height": 82,
                            "width": 82
                        },
                        "state": "filter",
                        "status": "",
                        "type": "coa.Filter",
                        "warn": "",
                        "z": 836
                    }
                ]
            },
            "notes": "INPUT: IP address artifact\nINTERACTION: VirusTotal, RecordedFuture, Whois\nACTION: ip reputation, ip intelligence, whois ip\nARTIFACTS:\nP1: get intel and reputation, create a new task and add a note with the summarized intel\nP2: if a total failure report errors"
        },
        "python_version": "3",
        "schema": 4,
        "version": "4.10.3.51237"
    },
    "create_time": "2021-05-11T01:04:55.854602+00:00",
    "draft_mode": false,
    "labels": [
        "*"
    ],
    "tags": []
}