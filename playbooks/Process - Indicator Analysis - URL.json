{
    "blockly": false,
    "blockly_xml": "<xml></xml>",
    "category": "ESCU",
    "coa": {
        "data": {
            "clean": true,
            "code_block": "",
            "description": "This playbook processes URLs not in bogon_list and creates a task note for every indicator for review by the analyst",
            "hash": "d08e3c84ea665c77b22d4c24f2d72f94dcc9251a",
            "joint": {
                "cells": [
                    {
                        "0": "S",
                        "1": "T",
                        "2": "A",
                        "3": "R",
                        "4": "T",
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "ref-x": 33,
                                "ref-y": 8,
                                "text": "START"
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.icon image": {
                                "ref-x": 13,
                                "xlink:href": "/inc/coa/img/block_icon_start.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            }
                        },
                        "block_code": "def on_start(container):\n    phantom.debug('on_start() called')\n    \n    # call 'check_urls' block\n    check_urls(container=container)\n\n    return",
                        "callback_code": "# read-only block view not available",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "",
                        "connection_type": "",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "",
                        "description": "",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "0d75d904-721f-445e-a6e1-b1d349bb4515",
                        "inPorts": [],
                        "join_code": "# read-only block view not available",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 16,
                        "line_start": 8,
                        "name": "",
                        "notes": "",
                        "number": 0,
                        "order": 1,
                        "outPorts": [
                            "out"
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": -320,
                            "y": 20
                        },
                        "previous_function": "",
                        "previous_name": "",
                        "show_number": true,
                        "size": {
                            "height": 54,
                            "width": 80
                        },
                        "status": "",
                        "title": "START",
                        "type": "coa.StartEnd",
                        "warn": false,
                        "z": 1
                    },
                    {
                        "0": "E",
                        "1": "N",
                        "2": "D",
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".title": {
                                "text": "END"
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.icon image": {
                                "xlink:href": "/inc/coa/img/block_icon_end.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            }
                        },
                        "block_code": "def on_finish(container, summary):\n    phantom.debug('on_finish() called')\n    # This function is called after all actions are completed.\n    # summary of all the action and/or all details of actions\n    # can be collected here.\n\n    # summary_json = phantom.get_summary()\n    # if 'result' in summary_json:\n        # for action_result in summary_json['result']:\n            # if 'action_run_id' in action_result:\n                # action_results = phantom.get_action_results(action_run_id=action_result['action_run_id'], result_data=False, flatten=False)\n                # phantom.debug(action_results)\n\n    return",
                        "callback_code": "# read-only block view not available",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "create task notes",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "",
                        "description": "",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "6e953e17-9b70-4c48-b2bd-a13c7a29b009",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "# read-only block view not available",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 693,
                        "line_start": 680,
                        "name": "",
                        "notes": "",
                        "number": 0,
                        "order": 16,
                        "outPorts": [],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 1380,
                            "y": 340
                        },
                        "previous_function": "",
                        "previous_name": "",
                        "show_number": true,
                        "size": {
                            "height": 54,
                            "width": 80
                        },
                        "status": "",
                        "title": "END",
                        "type": "coa.StartEnd",
                        "warn": false,
                        "z": 2
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "73526c24-64aa-4846-b4cf-0a8a478c3c81",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "0d75d904-721f-445e-a6e1-b1d349bb4515",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "5e8c9ae4-35bd-49ad-9ea2-ce4ada576dc2",
                            "selector": ".port-body[type=\"input\"]"
                        },
                        "type": "link",
                        "z": 3
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "9c65e76f-b0e0-4627-8a21-5c2bbe8163ed",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "5e8c9ae4-35bd-49ad-9ea2-ce4ada576dc2",
                            "port": "out-1",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "a8167b06-2400-4a02-8e58-0f7cd574953b",
                            "selector": ".port-body[type=\"input\"]"
                        },
                        "type": "link",
                        "z": 6
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "76b7fac7-397a-49c1-b131-45a2f657b097",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "5e8c9ae4-35bd-49ad-9ea2-ce4ada576dc2",
                            "port": "out-2",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(2) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "7e8a5c86-a3a1-46cb-a45f-df00b5475e2e",
                            "selector": ".port-body[type=\"input\"]"
                        },
                        "type": "link",
                        "z": 492
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "80d3d777-56ae-4c17-8033-e0729dac2497",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "7e8a5c86-a3a1-46cb-a45f-df00b5475e2e",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "6e953e17-9b70-4c48-b2bd-a13c7a29b009",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 642
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "f0047711-a7c8-49b4-aff9-1a20ccb37ced",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "0413c9fc-fee8-433f-ab45-9458da4c6133",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "571ee01f-7cef-4f30-b126-0ab3b76dff25",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 658
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "a36d1eba-5a14-4198-a2ff-ce17d2601f59",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "870336a0-7337-4150-9b5a-8b8e50046384",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "cde07dd8-34e9-437e-9265-1b466ef848a4",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 659
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "182193ce-0d2f-44c4-afe5-025c83f2ef6c",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "cc64ef72-b0d9-4d5b-babf-84b7d9a1582c",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "0bf4bc4e-04e8-4b45-be55-deaaa3f1626e",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 660
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "0d25463b-7cbd-4cc4-9bc7-53f5eac13719",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "571ee01f-7cef-4f30-b126-0ab3b76dff25",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "c83b471d-fa80-4fda-8c52-340c6a7e0eb2",
                            "selector": ".port-body[type=\"input\"]"
                        },
                        "type": "link",
                        "z": 688
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "6778d0b6-3106-4895-95df-94efd11f5659",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "c83b471d-fa80-4fda-8c52-340c6a7e0eb2",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "f9dc4405-ff78-4e6e-a8d6-986131e4b52f",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 693
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "1dc1c2eb-36dc-4075-a0c8-fca452307fcc",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "cde07dd8-34e9-437e-9265-1b466ef848a4",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "c83b471d-fa80-4fda-8c52-340c6a7e0eb2",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 708
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "9aefaf18-5f5f-4e0c-9dba-bb1906700754",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "0bf4bc4e-04e8-4b45-be55-deaaa3f1626e",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "c83b471d-fa80-4fda-8c52-340c6a7e0eb2",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 709
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "c676d44d-5eb3-4008-b3bb-44231902dd57",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "f37977d1-0163-4ead-a816-a14685d041d9",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "6e953e17-9b70-4c48-b2bd-a13c7a29b009",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 763
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "544976d0-b1c0-4840-ba31-215cbfcbef3f",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "f9dc4405-ff78-4e6e-a8d6-986131e4b52f",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "3b68d3b1-f185-45d2-a39c-f043afbfcf40",
                            "selector": ".port-body[type=\"input\"]"
                        },
                        "type": "link",
                        "z": 765
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "f397bb79-e33b-424c-8370-5213a2ed6d07",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "3b68d3b1-f185-45d2-a39c-f043afbfcf40",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "f37977d1-0163-4ead-a816-a14685d041d9",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 768
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "api": "set status",
                        "attrs": {
                            ".api": {
                                "text": "set status to new"
                            },
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "API"
                            },
                            "g.code image": {
                                "opacity": 1
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            }
                        },
                        "block_code": "def set_status_to_new(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('set_status_to_new() called')\n\n    phantom.set_status(container=container, status=\"New\")\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "color": "",
                        "configured": [
                            {
                                "key": "set-status",
                                "setStatusStatus": "New",
                                "setStatusStatus_display": "New"
                            }
                        ],
                        "connected_to_start": true,
                        "connection_name": "create task notes",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "set status to new",
                        "description": "",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "f37977d1-0163-4ead-a816-a14685d041d9",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 663,
                        "line_end": 597,
                        "line_start": 590,
                        "message": "Configuring now",
                        "name": "set status",
                        "notes": "Sets status to new signalling ready for pickup by analysts.",
                        "number": 4,
                        "order": 13,
                        "outPorts": [
                            "out"
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 1120,
                            "y": 140
                        },
                        "previous_function": "",
                        "previous_name": "set_status_to_new",
                        "show_number": false,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "api",
                        "status": "",
                        "title": "API",
                        "type": "coa.API",
                        "warn": false,
                        "z": 778
                    },
                    {
                        "action": "post data",
                        "action_type": "generic",
                        "active": false,
                        "active_keys": {},
                        "active_values": {
                            "body": "generate_task_notes:custom_function:note_params",
                            "headers": "",
                            "location": "/note/",
                            "verify_certificate": "False"
                        },
                        "angle": 0,
                        "app": "",
                        "appid": "",
                        "approver": "",
                        "assets": [
                            {
                                "action": "post data",
                                "actions": [
                                    "post data",
                                    "get data",
                                    "get options",
                                    "get headers",
                                    "delete data",
                                    "patch data",
                                    "put data",
                                    "test connectivity"
                                ],
                                "active": true,
                                "app_name": "HTTP",
                                "app_version": "2.1.15",
                                "appid": "290b7499-0374-4930-9cdc-5e9b05d65827",
                                "asset_name": "phantom_rest_api",
                                "config_type": "asset",
                                "count": 0,
                                "fields": {
                                    "body": "generate_task_notes:custom_function:note_params",
                                    "headers": "",
                                    "location": "/note/",
                                    "verify_certificate": "False"
                                },
                                "has_app": true,
                                "id": 215,
                                "loaded": false,
                                "missing": false,
                                "name": "phantom_rest_api",
                                "output": [
                                    {
                                        "data_path": "action_result.status",
                                        "data_type": "string",
                                        "example_values": [
                                            "failed"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.parameter.body",
                                        "data_type": "numeric",
                                        "example_values": [
                                            "{\"name\": \"Bad IP\"}"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.parameter.headers",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.parameter.location",
                                        "data_type": "string",
                                        "example_values": [
                                            "/rest/assets"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.parameter.verify_certificate",
                                        "data_type": "boolean",
                                        "example_values": [
                                            "false"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "url"
                                        ],
                                        "data_path": "action_result.data.*.location",
                                        "data_type": "string",
                                        "example_values": [
                                            "http://192.168.1.26/rest/assets"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.method",
                                        "data_type": "string",
                                        "example_values": [
                                            "POST"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.parsed_response_body",
                                        "data_type": "string",
                                        "example_values": [
                                            "{\"failed\": true, \"message\": \"Requested item not found\"}"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.response_body",
                                        "data_type": "string",
                                        "example_values": [
                                            "{\"failed\": true, \"message\": \"Requested item not found\"}"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.response_headers",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.summary.reason",
                                        "data_type": "string",
                                        "example_values": [
                                            "Not Found"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.summary.status_code",
                                        "data_type": "numeric",
                                        "example_values": [
                                            404
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.message",
                                        "data_type": "string",
                                        "example_values": [
                                            "Can't process response from server. Status Code: 404 Data from server: {\"failed\": true, \"message\": \"Requested item not found\"}"
                                        ]
                                    },
                                    {
                                        "data_path": "summary.total_objects",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1
                                        ]
                                    },
                                    {
                                        "data_path": "summary.total_objects_successful",
                                        "data_type": "numeric",
                                        "example_values": [
                                            0
                                        ]
                                    }
                                ],
                                "parameters": {
                                    "body": {
                                        "data_type": "string",
                                        "default": null,
                                        "description": "POST body (query string, JSON, etc.)",
                                        "key": "body",
                                        "order": 1,
                                        "required": true
                                    },
                                    "headers": {
                                        "data_type": "string",
                                        "default": null,
                                        "description": "Additional headers (JSON object with headers)",
                                        "key": "headers",
                                        "order": 2,
                                        "required": false
                                    },
                                    "location": {
                                        "data_type": "string",
                                        "default": null,
                                        "description": "Location (e.g. path/to/endpoint)",
                                        "key": "location",
                                        "order": 0,
                                        "required": true
                                    },
                                    "verify_certificate": {
                                        "data_type": "boolean",
                                        "default": null,
                                        "description": "Verify certificates (if using HTTPS)",
                                        "key": "verify_certificate",
                                        "order": 2,
                                        "required": true
                                    }
                                },
                                "product_name": "HTTP",
                                "product_vendor": "Generic",
                                "targets": "215",
                                "type": "information"
                            }
                        ],
                        "attrs": {
                            ".action": {
                                "text": "create task notes"
                            },
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "Generic"
                            },
                            "g.approver image": {
                                "opacity": 1
                            },
                            "g.code image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_code_dark_on.svg"
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.icon image": {
                                "xlink:href": "/inc/coa/img/block_icon_generic.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            },
                            "g.timer image": {
                                "opacity": 1
                            }
                        },
                        "block_code": "def create_task_notes(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('create_task_notes() called')\n        \n    #phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))\n    \n    generate_task_notes__note_params = json.loads(phantom.get_run_data(key='generate_task_notes:note_params'))\n    # collect data for 'create_task_notes' call\n\n    parameters = []\n    \n    # build parameters list for 'create_task_notes' call\n    parameters.append({\n        'location': \"/note/\",\n        'body': generate_task_notes__note_params,\n        'headers': \"\",\n        'verify_certificate': False,\n    })\n\n    phantom.act(action=\"post data\", parameters=parameters, assets=['phantom_rest_api'], callback=set_status_to_new, name=\"create_task_notes\")\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": true,
                        "color": "",
                        "connected_to_start": true,
                        "connection_name": "url reputation, hunt url, url intelligence",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "def create_task_notes(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('create_task_notes() called')\n        \n    #phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))\n    \n    generate_task_notes__note_params = json.loads(phantom.get_run_data(key='generate_task_notes:note_params'))\n    # collect data for 'create_task_notes' call\n\n    parameters = []\n    \n    # build parameters list for 'create_task_notes' call\n    for note_params in generate_task_notes__note_params:\n        parameters.append({\n            'location': \"/note/\",\n            'body': json.dumps(note_params),\n            'headers': \"\",\n            'verify_certificate': False,\n        })\n\n    phantom.act(action=\"post data\", parameters=parameters, assets=['phantom_rest_api'], callback=set_status_to_new, name=\"create_task_notes\")\n\n    return",
                        "custom_join": "",
                        "custom_name": "create task notes",
                        "delay": 0,
                        "description": "Customized the block with a for loop to loop thru the created notes parameters.\n\ncustom code:\n    # build parameters list for 'create_task_notes' call\n    for note_params in generate_task_notes__note_params:\n        parameters.append({\n            'body': json.dumps(note_params),\n            'headers': \"\",\n            'location': \"/note/\",\n            'verify_certificate': False,\n        })",
                        "has_custom": true,
                        "has_custom_block": true,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "3b68d3b1-f185-45d2-a39c-f043afbfcf40",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 633,
                        "line_start": 610,
                        "message": "Configuring now",
                        "name": "post data",
                        "notes": "Creates workbook task notes that correspond to the tasks created with the appropriate automated analysis\n",
                        "number": 3,
                        "order": 14,
                        "outPorts": [
                            "out"
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 880,
                            "y": 140
                        },
                        "previous_function": "",
                        "previous_name": "create_task_notes",
                        "required_params": {
                            "body": true,
                            "location": true,
                            "verify_certificate": true
                        },
                        "reviewer": "",
                        "show_number": false,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "action_assets",
                        "status": "",
                        "title": "Generic",
                        "type": "coa.Action",
                        "warn": false,
                        "z": 780
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "api": "add comment",
                        "attrs": {
                            ".api": {
                                "text": "missing data comment"
                            },
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "API"
                            },
                            "g.code image": {
                                "opacity": 1
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            }
                        },
                        "block_code": "def missing_data_comment(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('missing_data_comment() called')\n\n    phantom.comment(container=container, comment=\"Missing indicator to execute Indicator analysis - URL playbook.  Check logic and playbook parameters\")\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "color": "",
                        "configured": [
                            {
                                "addCommentComment": "Missing indicator to execute Indicator analysis - URL playbook.  Check logic and playbook parameters",
                                "key": "add-comment"
                            }
                        ],
                        "connected_to_start": true,
                        "connection_name": "",
                        "connection_type": "",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "missing data comment",
                        "description": "",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "7e8a5c86-a3a1-46cb-a45f-df00b5475e2e",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 367,
                        "line_start": 360,
                        "message": "Configuring now",
                        "name": "add comment",
                        "notes": "Adds a missing data comment",
                        "number": 3,
                        "order": 9,
                        "outPorts": [
                            "out"
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": -100,
                            "y": 320
                        },
                        "previous_function": "",
                        "previous_name": "missing_data_comment",
                        "show_number": false,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "api",
                        "status": "",
                        "title": "API",
                        "type": "coa.API",
                        "warn": false,
                        "z": 805
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "611cf4f3-7f5c-41c8-a172-95b08f9baeef",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "a8167b06-2400-4a02-8e58-0f7cd574953b",
                            "port": "out-1",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "fdc10dc5-89a2-4b33-b78c-6b56cc4565a5",
                            "selector": ".port-body[type=\"input\"]"
                        },
                        "type": "link",
                        "z": 808
                    },
                    {
                        ".scmName/text": "enrichment",
                        "active": false,
                        "active_keys": {},
                        "active_values": {},
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".customFunction": {
                                "text": "merge urls"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".scmName": {
                                "text": "enrichment"
                            },
                            ".title": {
                                "text": "custom function"
                            },
                            ".title-info": {
                                "text": ""
                            },
                            "g.branch image": {
                                "opacity": 1
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            }
                        },
                        "block_code": "def merge_urls(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('merge_urls() called')\n    \n    filtered_artifacts_data_0 = phantom.collect2(container=container, datapath=['filtered-data:url_filter:condition_1:artifact:*.cef.requestURL', 'filtered-data:url_filter:condition_1:artifact:*.cef.url', 'filtered-data:url_filter:condition_1:artifact:*.cef.http_referrer'])\n\n    parameters = []\n\n    filtered_artifacts_data_0_0 = [item[0] for item in filtered_artifacts_data_0]\n    filtered_artifacts_data_0_1 = [item[1] for item in filtered_artifacts_data_0]\n    filtered_artifacts_data_0_2 = [item[2] for item in filtered_artifacts_data_0]\n\n    parameters.append({\n        'input_1': filtered_artifacts_data_0_0,\n        'input_2': filtered_artifacts_data_0_1,\n        'input_3': filtered_artifacts_data_0_2,\n        'input_4': None,\n        'input_5': None,\n        'input_6': None,\n        'input_7': None,\n        'input_8': None,\n        'input_9': None,\n        'input_10': None,\n    })\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n\n    # Write your custom code here...\n\n    ################################################################################\n    ## Custom Code End\n    ################################################################################    \n\n    # call custom function \"enrichment/list_merge_dedup\", returns the custom_function_run_id\n    phantom.custom_function(custom_function='enrichment/list_merge_dedup', parameters=parameters, name='merge_urls', callback=merge_urls_callback)\n\n    return",
                        "callback_code": "def merge_urls_callback(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None):\n    phantom.debug('merge_urls_callback() called')\n    \n    url_reputation(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function)\n    hunt_url(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function)\n    url_intelligence(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function)\n\n    return",
                        "callback_start": 671,
                        "callsback": true,
                        "cfDisplayPath": "enrichment/list_merge_dedup",
                        "cfInputs": {
                            "input_1": {
                                "collectionType": "filtered_artifacts_data",
                                "dataPath": "filtered-data:url_filter:condition_1:artifact:*.cef.requestURL",
                                "paramName": "filtered_artifacts_data_0_0",
                                "type": "list"
                            },
                            "input_10": {
                                "dataPath": "",
                                "type": "list"
                            },
                            "input_2": {
                                "collectionType": "filtered_artifacts_data",
                                "dataPath": "filtered-data:url_filter:condition_1:artifact:*.cef.url",
                                "paramName": "filtered_artifacts_data_0_1",
                                "type": "list"
                            },
                            "input_3": {
                                "collectionType": "filtered_artifacts_data",
                                "dataPath": "filtered-data:url_filter:condition_1:artifact:*.cef.http_referrer",
                                "paramName": "filtered_artifacts_data_0_2",
                                "type": "list"
                            },
                            "input_4": {
                                "dataPath": "",
                                "type": "list"
                            },
                            "input_5": {
                                "dataPath": "",
                                "type": "list"
                            },
                            "input_6": {
                                "dataPath": "",
                                "type": "list"
                            },
                            "input_7": {
                                "dataPath": "",
                                "type": "list"
                            },
                            "input_8": {
                                "dataPath": "",
                                "type": "list"
                            },
                            "input_9": {
                                "dataPath": "",
                                "type": "list"
                            }
                        },
                        "color": "",
                        "connected_to_start": true,
                        "connection_name": "",
                        "connection_type": "",
                        "currentVersion": true,
                        "customCodeEndLineOffset": 7,
                        "customCodeStartLine": 26,
                        "customFunction": "enrichment/list_merge_dedup",
                        "customFunctionId": null,
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "merge urls",
                        "delay": 0,
                        "description": "",
                        "draftMode": false,
                        "existingCF": true,
                        "functionBlock": "custom function",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "fdc10dc5-89a2-4b33-b78c-6b56cc4565a5",
                        "inPorts": [
                            "in"
                        ],
                        "input_1-0": "filtered-data:url_filter:condition_1:artifact:*.cef.requestURL",
                        "input_2-1": "filtered-data:url_filter:condition_1:artifact:*.cef.url",
                        "input_3-2": "filtered-data:url_filter:condition_1:artifact:*.cef.http_referrer",
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 680,
                        "line_start": 633,
                        "message": "Configuring now",
                        "name": "list_merge_dedup",
                        "notes": "Merges urls and list objects:\nrequestURL\nurl\nhttp_referrer\n",
                        "number": 2,
                        "order": 15,
                        "outPorts": [
                            "out"
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 100,
                            "y": 0
                        },
                        "previous_function": "",
                        "previous_name": "merge_urls",
                        "selectedCustomFunction": {
                            "description": "Merge 2-10 different data paths into a single output data path. For example, if IP addresses are stored in the fields sourceAddress, destinationAddress, and deviceAddress, then those three fields could be merged together to form a single list of IP addresses.",
                            "draftMode": false,
                            "id": 173,
                            "inputs": [
                                {
                                    "_pretty_custom_function": "list_merge_dedup",
                                    "contains_type": [
                                        "*"
                                    ],
                                    "custom_function": 173,
                                    "description": "",
                                    "id": 561,
                                    "input_type": "list",
                                    "name": "input_1",
                                    "placeholder": ""
                                },
                                {
                                    "_pretty_custom_function": "list_merge_dedup",
                                    "contains_type": [
                                        "*"
                                    ],
                                    "custom_function": 173,
                                    "description": "",
                                    "id": 562,
                                    "input_type": "list",
                                    "name": "input_2",
                                    "placeholder": ""
                                },
                                {
                                    "_pretty_custom_function": "list_merge_dedup",
                                    "contains_type": [
                                        "*"
                                    ],
                                    "custom_function": 173,
                                    "description": "",
                                    "id": 563,
                                    "input_type": "list",
                                    "name": "input_3",
                                    "placeholder": ""
                                },
                                {
                                    "_pretty_custom_function": "list_merge_dedup",
                                    "contains_type": [
                                        "*"
                                    ],
                                    "custom_function": 173,
                                    "description": "",
                                    "id": 564,
                                    "input_type": "list",
                                    "name": "input_4",
                                    "placeholder": ""
                                },
                                {
                                    "_pretty_custom_function": "list_merge_dedup",
                                    "contains_type": [
                                        "*"
                                    ],
                                    "custom_function": 173,
                                    "description": "",
                                    "id": 565,
                                    "input_type": "list",
                                    "name": "input_5",
                                    "placeholder": ""
                                },
                                {
                                    "_pretty_custom_function": "list_merge_dedup",
                                    "contains_type": [
                                        "*"
                                    ],
                                    "custom_function": 173,
                                    "description": "",
                                    "id": 566,
                                    "input_type": "list",
                                    "name": "input_6",
                                    "placeholder": ""
                                },
                                {
                                    "_pretty_custom_function": "list_merge_dedup",
                                    "contains_type": [
                                        "*"
                                    ],
                                    "custom_function": 173,
                                    "description": "",
                                    "id": 567,
                                    "input_type": "list",
                                    "name": "input_7",
                                    "placeholder": ""
                                },
                                {
                                    "_pretty_custom_function": "list_merge_dedup",
                                    "contains_type": [
                                        "*"
                                    ],
                                    "custom_function": 173,
                                    "description": "",
                                    "id": 568,
                                    "input_type": "list",
                                    "name": "input_8",
                                    "placeholder": ""
                                },
                                {
                                    "_pretty_custom_function": "list_merge_dedup",
                                    "contains_type": [
                                        "*"
                                    ],
                                    "custom_function": 173,
                                    "description": "",
                                    "id": 569,
                                    "input_type": "list",
                                    "name": "input_9",
                                    "placeholder": ""
                                },
                                {
                                    "_pretty_custom_function": "list_merge_dedup",
                                    "contains_type": [
                                        "*"
                                    ],
                                    "custom_function": 173,
                                    "description": "",
                                    "id": 570,
                                    "input_type": "list",
                                    "name": "input_10",
                                    "placeholder": ""
                                }
                            ],
                            "name": "list_merge_dedup",
                            "outputs": [
                                {
                                    "_pretty_custom_function": "list_merge_dedup",
                                    "contains_type": [
                                        "*"
                                    ],
                                    "custom_function": 173,
                                    "data_path": "*.item",
                                    "description": "A combined list of all the values from all the input lists",
                                    "id": 216
                                }
                            ],
                            "playbooks": {
                                "draft_playbooks": [],
                                "draft_version_id": null,
                                "playbooks": [
                                    {
                                        "active": false,
                                        "display_path": "enrichment/Indicator Analysis - URL_py3",
                                        "draft_mode": false,
                                        "id": 4033,
                                        "name": "Indicator Analysis - URL_py3",
                                        "viewable": true
                                    },
                                    {
                                        "active": false,
                                        "display_path": "enrichment/Get process information",
                                        "draft_mode": false,
                                        "id": 4040,
                                        "name": "Get process information",
                                        "viewable": true
                                    },
                                    {
                                        "active": false,
                                        "display_path": "enrichment/Get related event information",
                                        "draft_mode": false,
                                        "id": 4041,
                                        "name": "Get related event information",
                                        "viewable": true
                                    },
                                    {
                                        "active": false,
                                        "display_path": "enrichment/Get network process information",
                                        "draft_mode": false,
                                        "id": 4042,
                                        "name": "Get network process information",
                                        "viewable": true
                                    },
                                    {
                                        "active": false,
                                        "display_path": "enrichment/Analyze user-host activity",
                                        "draft_mode": false,
                                        "id": 4009,
                                        "name": "Analyze user-host activity",
                                        "viewable": true
                                    },
                                    {
                                        "active": false,
                                        "display_path": "enrichment/Indicator Analysis - Host-Account",
                                        "draft_mode": false,
                                        "id": 4018,
                                        "name": "Indicator Analysis - Host-Account",
                                        "viewable": true
                                    },
                                    {
                                        "active": false,
                                        "display_path": "enrichment/Indicator Analysis - Domain",
                                        "draft_mode": false,
                                        "id": 4045,
                                        "name": "Indicator Analysis - Domain",
                                        "viewable": true
                                    },
                                    {
                                        "active": false,
                                        "display_path": "enrichment/Associate Host and Account Events",
                                        "draft_mode": false,
                                        "id": 4014,
                                        "name": "Associate Host and Account Events",
                                        "viewable": true
                                    },
                                    {
                                        "active": false,
                                        "display_path": "enrichment/Indicator Analysis - IP",
                                        "draft_mode": false,
                                        "id": 4046,
                                        "name": "Indicator Analysis - IP",
                                        "viewable": true
                                    },
                                    {
                                        "active": false,
                                        "display_path": "enrichment/Indicator Analysis - Filehash_py3",
                                        "draft_mode": false,
                                        "id": 4047,
                                        "name": "Indicator Analysis - Filehash_py3",
                                        "viewable": true
                                    }
                                ]
                            },
                            "scmId": 63,
                            "scmName": "enrichment"
                        },
                        "show_number": false,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "repo",
                        "status": "",
                        "title": "custom function",
                        "type": "coa.CustomFunctionBlock",
                        "userGeneratedCode": "    # Write your custom code here...",
                        "warn": false,
                        "z": 810
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773",
                                "transform": "rotate(45 30 70)"
                            },
                            ".inPorts>.port-0>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".number": {
                                "text": 1
                            },
                            ".outPorts>.port-0": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                },
                                "ref-x": 83,
                                "ref-y": 40
                            },
                            ".outPorts>.port-0>.port-body": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                }
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            }
                        },
                        "block_code": "def url_filter(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('url_filter() called')\n\n    # collect filtered artifact ids for 'if' condition 1\n    matched_artifacts_1, matched_results_1 = phantom.condition(\n        container=container,\n        conditions=[\n            [\"artifact:*.cef.requestURL\", \"not in\", \"custom_list:bogon_list\"],\n            [\"artifact:*.cef.url\", \"not in\", \"custom_list:bogon_list\"],\n            [\"artifact:*.cef.http_referrer\", \"==\", \"custom_list:bogon_list\"],\n        ],\n        logical_operator='or',\n        name=\"url_filter:condition_1\")\n\n    # call connected blocks if filtered artifacts or results\n    if matched_artifacts_1 or matched_results_1:\n        merge_urls(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function, filtered_artifacts=matched_artifacts_1, filtered_results=matched_results_1)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "",
                        "connection_type": "",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "url filter",
                        "description": "",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "a8167b06-2400-4a02-8e58-0f7cd574953b",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 59,
                        "line_start": 39,
                        "name": "filter",
                        "notes": "Filters for requestURL and removes allowed list objects from custom_list:bogon_list\n\nBLUE: if requestURL, url, or http_referrer exists and not in the bogon_list",
                        "number": 1,
                        "order": 3,
                        "outPorts": [
                            "out-1"
                        ],
                        "outputs": [
                            {
                                "conditions": [
                                    {
                                        "comparison": "not in",
                                        "data_type": "",
                                        "param": "artifact:*.cef.requestURL",
                                        "value": "custom_list:bogon_list"
                                    },
                                    {
                                        "comparison": "not in",
                                        "data_type": "",
                                        "param": "artifact:*.cef.url",
                                        "value": "custom_list:bogon_list"
                                    },
                                    {
                                        "comparison": "==",
                                        "data_type": "",
                                        "param": "artifact:*.cef.http_referrer",
                                        "value": "custom_list:bogon_list"
                                    }
                                ],
                                "display": "If",
                                "logic": "or",
                                "type": "if"
                            }
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": -40,
                            "y": 0
                        },
                        "previous_function": "",
                        "previous_name": "url_filter",
                        "show_number": true,
                        "size": {
                            "height": 82,
                            "width": 82
                        },
                        "state": "filter",
                        "status": "",
                        "type": "coa.Filter",
                        "warn": "",
                        "z": 811
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#637282",
                                "transform": "rotate(45 30 70)"
                            },
                            ".inPorts>.port-0>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".number": {
                                "text": 1
                            },
                            ".outPorts>.port-0": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                },
                                "ref-x": 83,
                                "ref-y": 40
                            },
                            ".outPorts>.port-0>.port-body": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                }
                            },
                            ".outPorts>.port-1": {
                                "port": {
                                    "id": "out-2",
                                    "type": "out"
                                },
                                "ref-x": 41,
                                "ref-y": 82
                            },
                            ".outPorts>.port-1>.port-body": {
                                "port": {
                                    "id": "out-2",
                                    "type": "out"
                                }
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            }
                        },
                        "block_code": "def check_urls(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('check_urls() called')\n\n    # check for 'if' condition 1\n    matched = phantom.decision(\n        container=container,\n        conditions=[\n            [\"artifact:*.cef.requestURL\", \"!=\", \"\"],\n            [\"artifact:*.cef.url\", \"!=\", \"\"],\n            [\"artifact:*.cef.http_referrer\", \"==\", \"\"],\n        ],\n        logical_operator='or')\n\n    # call connected blocks if condition 1 matched\n    if matched:\n        url_filter(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function)\n        return\n\n    # call connected blocks for 'else' condition 2\n    missing_data_comment(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "",
                        "connection_type": "",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "check urls",
                        "description": "",
                        "hasElse": true,
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "5e8c9ae4-35bd-49ad-9ea2-ce4ada576dc2",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 39,
                        "line_start": 16,
                        "name": "decision",
                        "notes": "Check for requestURL and if missing provide a comment that no ip addresses were found.\n\nGREEN: if requestURL exist\nPURPLE: if missing add a comment of missing artifact",
                        "number": 1,
                        "order": 2,
                        "outPorts": [
                            "out-1",
                            "out-2"
                        ],
                        "outputs": [
                            {
                                "conditions": [
                                    {
                                        "comparison": "!=",
                                        "data_type": "",
                                        "param": "artifact:*.cef.requestURL",
                                        "value": ""
                                    },
                                    {
                                        "comparison": "!=",
                                        "data_type": "",
                                        "param": "artifact:*.cef.url",
                                        "value": ""
                                    },
                                    {
                                        "comparison": "==",
                                        "data_type": "",
                                        "param": "artifact:*.cef.http_referrer",
                                        "value": ""
                                    }
                                ],
                                "display": "If",
                                "logic": "or",
                                "type": "if"
                            },
                            {
                                "conditions": [
                                    {
                                        "comparison": "==",
                                        "data_type": "",
                                        "param": "",
                                        "value": ""
                                    }
                                ],
                                "display": "Else",
                                "logic": "and",
                                "type": "else"
                            }
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": -180,
                            "y": 0
                        },
                        "previous_function": "",
                        "previous_name": "check_urls",
                        "show_number": true,
                        "size": {
                            "height": 82,
                            "width": 82
                        },
                        "state": "decision",
                        "status": "",
                        "type": "coa.Decision",
                        "warn": "",
                        "z": 812
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "1a9cf450-76bc-40c9-8dad-5fc241c80ac1",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "fdc10dc5-89a2-4b33-b78c-6b56cc4565a5",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "0413c9fc-fee8-433f-ab45-9458da4c6133",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 813
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "661127e0-cb2e-4dc2-8296-e67b0f2bc144",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "fdc10dc5-89a2-4b33-b78c-6b56cc4565a5",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "870336a0-7337-4150-9b5a-8b8e50046384",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 814
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "5a4b5b62-e4bb-42d5-bedd-64ee2aef9a5d",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "fdc10dc5-89a2-4b33-b78c-6b56cc4565a5",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "cc64ef72-b0d9-4d5b-babf-84b7d9a1582c",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 815
                    },
                    {
                        "action": "url reputation",
                        "action_type": "investigate",
                        "active": false,
                        "active_keys": {},
                        "active_values": {
                            "ip": "filtered-data:url_filter:condition_1:artifact:*.cef.sourceAddress",
                            "url": "merge_urls:custom_function_result.data.*.item"
                        },
                        "angle": 0,
                        "app": "",
                        "appid": "",
                        "approver": "",
                        "assets": [
                            {
                                "action": "url reputation",
                                "actions": [
                                    "detonate url",
                                    "detonate file",
                                    "get report",
                                    "get file",
                                    "ip reputation",
                                    "domain reputation",
                                    "url reputation",
                                    "file reputation",
                                    "test connectivity"
                                ],
                                "active": true,
                                "app_name": "VirusTotal",
                                "app_version": "2.0.8",
                                "appid": "11f676a4-f3d4-4db0-8587-f4e942c07c7c",
                                "asset_name": "test2",
                                "config_type": "asset",
                                "count": 0,
                                "fields": {
                                    "url": "merge_urls:custom_function_result.data.*.item"
                                },
                                "has_app": true,
                                "id": 7,
                                "loaded": false,
                                "missing": false,
                                "name": "virustotal",
                                "output": [
                                    {
                                        "data_path": "action_result.status",
                                        "data_type": "string",
                                        "example_values": [
                                            "success",
                                            "failed"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "url"
                                        ],
                                        "data_path": "action_result.parameter.url",
                                        "data_type": "string",
                                        "example_values": [
                                            "https://www.test.com"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.filescan_id",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "url"
                                        ],
                                        "data_path": "action_result.data.*.permalink",
                                        "data_type": "string",
                                        "example_values": [
                                            "https://www.test.com/url/d0e196a0c25d35dd0a84593cbae0f38333aa58529936444ea26453eab28dfc86/analysis/1549011607/"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.positives",
                                        "data_type": "numeric",
                                        "example_values": [
                                            0
                                        ]
                                    },
                                    {
                                        "column_name": "URL",
                                        "column_order": 0,
                                        "contains": [
                                            "url"
                                        ],
                                        "data_path": "action_result.data.*.resource",
                                        "data_type": "string",
                                        "example_values": [
                                            "https://www.test.com"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.response_code",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scan_date",
                                        "data_type": "string",
                                        "example_values": [
                                            "2019-02-01 09:00:07"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "virustotal scan id"
                                        ],
                                        "data_path": "action_result.data.*.scan_id",
                                        "data_type": "string",
                                        "example_values": [
                                            "d0e196a0c25d35dd0a84593cbae0f38333aa58529936444ea26453eab28dfc86-1549011607"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.*.detail",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.*.detected",
                                        "data_type": "boolean"
                                    },
                                    {
                                        "data_path": "action_result.data.*.scans.*.result",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.total",
                                        "data_type": "numeric",
                                        "example_values": [
                                            66
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "url"
                                        ],
                                        "data_path": "action_result.data.*.url",
                                        "data_type": "string",
                                        "example_values": [
                                            "https://www.test.com/"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.verbose_msg",
                                        "data_type": "string",
                                        "example_values": [
                                            "Scan finished, scan information embedded in this object"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.summary.detections",
                                        "data_type": "boolean"
                                    },
                                    {
                                        "data_path": "action_result.summary.found",
                                        "data_type": "boolean"
                                    },
                                    {
                                        "column_name": "Positives",
                                        "column_order": 2,
                                        "data_path": "action_result.summary.positives",
                                        "data_type": "numeric",
                                        "example_values": [
                                            0
                                        ]
                                    },
                                    {
                                        "column_name": "Total Scans",
                                        "column_order": 1,
                                        "data_path": "action_result.summary.total_scans",
                                        "data_type": "numeric",
                                        "example_values": [
                                            66
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.message",
                                        "data_type": "string",
                                        "example_values": [
                                            "Positives: 0, Total scans: 66"
                                        ]
                                    },
                                    {
                                        "data_path": "summary.total_objects",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1
                                        ]
                                    },
                                    {
                                        "data_path": "summary.total_objects_successful",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1
                                        ]
                                    },
                                    {
                                        "data_path": "summary.total_positives",
                                        "data_type": "numeric",
                                        "example_values": [
                                            0
                                        ]
                                    }
                                ],
                                "parameters": {
                                    "url": {
                                        "contains": [
                                            "url"
                                        ],
                                        "data_type": "string",
                                        "default": null,
                                        "description": "URL to query",
                                        "key": "url",
                                        "order": 0,
                                        "primary": true,
                                        "required": true
                                    }
                                },
                                "product_name": "VirusTotal",
                                "product_vendor": "VirusTotal",
                                "targets": "7",
                                "type": "reputation"
                            }
                        ],
                        "attrs": {
                            ".action": {
                                "text": "url reputation"
                            },
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "Investigate"
                            },
                            "g.approver image": {
                                "opacity": 1
                            },
                            "g.code image": {
                                "opacity": 1
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.icon image": {
                                "xlink:href": "/inc/coa/img/block_icon_investigate.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            },
                            "g.timer image": {
                                "opacity": 1
                            }
                        },
                        "block_code": "def url_reputation(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('url_reputation() called')\n        \n    #phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))\n    \n    # collect data for 'url_reputation' call\n    custom_function_results_data_1 = phantom.collect2(container=container, datapath=['merge_urls:custom_function_result.data.*.item'], action_results=results)\n\n    parameters = []\n    \n    # build parameters list for 'url_reputation' call\n    for custom_function_results_item_1 in custom_function_results_data_1:\n        if custom_function_results_item_1[0]:\n            parameters.append({\n                'url': custom_function_results_item_1[0],\n            })\n\n    phantom.act(action=\"url reputation\", parameters=parameters, assets=['virustotal'], callback=url_reputation_format, name=\"url_reputation\")\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": true,
                        "color": "",
                        "connected_to_start": true,
                        "connection_name": "merge urls",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "url reputation",
                        "delay": 0,
                        "description": "",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "0413c9fc-fee8-433f-ab45-9458da4c6133",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 80,
                        "line_start": 59,
                        "message": "Configuring now",
                        "name": "url reputation",
                        "notes": "Gets url reputation from VirusTotal",
                        "number": 1,
                        "order": 4,
                        "outPorts": [
                            "out"
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 360,
                            "y": 0
                        },
                        "previous_function": "",
                        "previous_name": "url_reputation",
                        "required_params": {
                            "url": true
                        },
                        "reviewer": "",
                        "show_number": false,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "action_assets",
                        "status": "",
                        "title": "Investigate",
                        "type": "coa.Action",
                        "warn": "",
                        "z": 816
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".format": {
                                "text": "url reputation format"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out-1": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out-1>.port-body": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "format"
                            },
                            "g.code image": {
                                "opacity": 1
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            }
                        },
                        "block_code": "def url_reputation_format(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('url_reputation_format() called')\n    \n    template = \"\"\"%%\n### VirusTotal Summary of `{0}`: *{1}, {2}*\n\n*VTI link: {3}*\n\nScan Date: *{4}*\n\n** Scan Results **\n\n| Scanner | Detected | Result |\n| ---- | ---- | ---- |\n| Kaspersky | {5} | {6} |\n| BitDefender | {7} | {8} | \n| Google Safe Browsing: | {9} | {10} |\n| AlienVault | {11} | {12} |\nSophos | {13} | {14} |\n| Forcepoint ThreatSeeker: | {15} | {16} |\n| ESET |  {17} | {18} |\n| MalwareDomainList | {19} | {20} |\n| Fortinet | {21} | {22} |\n\n---\n%%\"\"\"\n\n    # parameter list for template variable replacement\n    parameters = [\n        \"url_reputation:action_result.parameter.url\",\n        \"url_reputation:action_result.message\",\n        \"url_reputation:action_result.data.*.verbose_msg\",\n        \"url_reputation:action_result.data.*.permalink\",\n        \"url_reputation:action_result.data.*.scan_date\",\n        \"url_reputation:action_result.data.*.scans.Kaspersky.detected\",\n        \"url_reputation:action_result.data.*.scans.Kaspersky.result\",\n        \"url_reputation:action_result.data.*.scans.BitDefender.detected\",\n        \"url_reputation:action_result.data.*.scans.BitDefender.result\",\n        \"url_reputation:action_result.data.*.scans.Google Safebrowsing.detected\",\n        \"url_reputation:action_result.data.*.scans.Google Safebrowsing.result\",\n        \"url_reputation:action_result.data.*.scans.AlienVault.detected\",\n        \"url_reputation:action_result.data.*.scans.AlienVault.result\",\n        \"url_reputation:action_result.data.*.scans.Sophos.detected\",\n        \"url_reputation:action_result.data.*.scans.Sophos.result\",\n        \"url_reputation:action_result.data.*.scans.Forcepoint ThreatSeeker.detected\",\n        \"url_reputation:action_result.data.*.scans.Forcepoint ThreatSeeker.result\",\n        \"url_reputation:action_result.data.*.scans.ESET.detected\",\n        \"url_reputation:action_result.data.*.scans.ESET.result\",\n        \"url_reputation:action_result.data.*.scans.MalwareDomainList.detected\",\n        \"url_reputation:action_result.data.*.scans.MalwareDomainList.result\",\n        \"url_reputation:action_result.data.*.scans.Fortinet.detected\",\n        \"url_reputation:action_result.data.*.scans.Fortinet.result\",\n    ]\n\n    phantom.format(container=container, template=template, parameters=parameters, name=\"url_reputation_format\")\n\n    join_indicator_analysis(container=container)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "url reputation",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "url reputation format",
                        "description": "",
                        "format": "format",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "571ee01f-7cef-4f30-b126-0ab3b76dff25",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 304,
                        "line_start": 244,
                        "message": "Configuring now",
                        "name": "format",
                        "notes": "Create url reputation information format for note",
                        "number": 10,
                        "order": 7,
                        "outPorts": [
                            "out-1"
                        ],
                        "parameters": [
                            {
                                "position": 0,
                                "type": "",
                                "value": "url_reputation:action_result.parameter.url"
                            },
                            {
                                "position": 1,
                                "type": "",
                                "value": "url_reputation:action_result.message"
                            },
                            {
                                "position": 1,
                                "type": "",
                                "value": "url_reputation:action_result.data.*.verbose_msg"
                            },
                            {
                                "position": 1,
                                "type": "",
                                "value": "url_reputation:action_result.data.*.permalink"
                            },
                            {
                                "position": 3,
                                "type": "",
                                "value": "url_reputation:action_result.data.*.scan_date"
                            },
                            {
                                "position": 7,
                                "type": "",
                                "value": "url_reputation:action_result.data.*.scans.Kaspersky.detected"
                            },
                            {
                                "position": 8,
                                "type": "",
                                "value": "url_reputation:action_result.data.*.scans.Kaspersky.result"
                            },
                            {
                                "position": 9,
                                "type": "",
                                "value": "url_reputation:action_result.data.*.scans.BitDefender.detected"
                            },
                            {
                                "position": 10,
                                "type": "",
                                "value": "url_reputation:action_result.data.*.scans.BitDefender.result"
                            },
                            {
                                "position": 11,
                                "type": "",
                                "value": "url_reputation:action_result.data.*.scans.Google Safebrowsing.detected"
                            },
                            {
                                "position": 12,
                                "type": "",
                                "value": "url_reputation:action_result.data.*.scans.Google Safebrowsing.result"
                            },
                            {
                                "position": 13,
                                "type": "",
                                "value": "url_reputation:action_result.data.*.scans.AlienVault.detected"
                            },
                            {
                                "position": 14,
                                "type": "",
                                "value": "url_reputation:action_result.data.*.scans.AlienVault.result"
                            },
                            {
                                "position": 15,
                                "type": "",
                                "value": "url_reputation:action_result.data.*.scans.Sophos.detected"
                            },
                            {
                                "position": 16,
                                "type": "",
                                "value": "url_reputation:action_result.data.*.scans.Sophos.result"
                            },
                            {
                                "position": 17,
                                "type": "",
                                "value": "url_reputation:action_result.data.*.scans.Forcepoint ThreatSeeker.detected"
                            },
                            {
                                "position": 18,
                                "type": "",
                                "value": "url_reputation:action_result.data.*.scans.Forcepoint ThreatSeeker.result"
                            },
                            {
                                "position": 19,
                                "type": "",
                                "value": "url_reputation:action_result.data.*.scans.ESET.detected"
                            },
                            {
                                "position": 20,
                                "type": "",
                                "value": "url_reputation:action_result.data.*.scans.ESET.result"
                            },
                            {
                                "position": 21,
                                "type": "",
                                "value": "url_reputation:action_result.data.*.scans.MalwareDomainList.detected"
                            },
                            {
                                "position": 22,
                                "type": "",
                                "value": "url_reputation:action_result.data.*.scans.MalwareDomainList.result"
                            },
                            {
                                "position": 23,
                                "type": "",
                                "value": "url_reputation:action_result.data.*.scans.Fortinet.detected"
                            },
                            {
                                "position": 24,
                                "type": "",
                                "value": "url_reputation:action_result.data.*.scans.Fortinet.result"
                            }
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 600,
                            "y": 0
                        },
                        "previous_function": "",
                        "previous_name": "url_reputation_format",
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "format",
                        "status": "",
                        "template": "%%\n### VirusTotal Summary of `{0}`: *{1}, {2}*\n\n*VTI link: {3}*\n\nScan Date: *{4}*\n\n** Scan Results **\n\n| Scanner | Detected | Result |\n| ---- | ---- | ---- |\n| Kaspersky | {5} | {6} |\n| BitDefender | {7} | {8} | \n| Google Safe Browsing: | {9} | {10} |\n| AlienVault | {11} | {12} |\nSophos | {13} | {14} |\n| Forcepoint ThreatSeeker: | {15} | {16} |\n| ESET |  {17} | {18} |\n| MalwareDomainList | {19} | {20} |\n| Fortinet | {21} | {22} |\n\n---\n%%",
                        "title": "format",
                        "type": "coa.Format",
                        "warn": false,
                        "z": 817
                    },
                    {
                        "action": "hunt url",
                        "action_type": "investigate",
                        "active": false,
                        "active_keys": {},
                        "active_values": {
                            "url": "merge_urls:custom_function_result.data.*.item"
                        },
                        "angle": 0,
                        "app": "",
                        "appid": "",
                        "approver": "",
                        "assets": [
                            {
                                "action": "hunt url",
                                "actions": [
                                    "test connectivity",
                                    "detonate file",
                                    "detonate online file",
                                    "detonate url",
                                    "check url hash",
                                    "check status",
                                    "get report",
                                    "get file",
                                    "get pcap",
                                    "get file from url",
                                    "hunt url",
                                    "hunt domain",
                                    "hunt malware family",
                                    "hunt file",
                                    "hunt hash",
                                    "hunt ip",
                                    "hunt similar",
                                    "search terms"
                                ],
                                "active": true,
                                "app_name": "Falcon Sandbox",
                                "app_version": "1.1.6",
                                "appid": "8383852c-43dc-4356-ac81-4e6dd65ee23e",
                                "asset_name": "hybrid analysis",
                                "config_type": "asset",
                                "count": 0,
                                "fields": {
                                    "url": "merge_urls:custom_function_result.data.*.item"
                                },
                                "has_app": true,
                                "id": 23,
                                "loaded": false,
                                "missing": false,
                                "name": "hybrid-analysis-personal",
                                "output": [
                                    {
                                        "data_path": "action_result.status",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.message",
                                        "data_type": "string"
                                    },
                                    {
                                        "column_name": "Submit Name",
                                        "column_order": 0,
                                        "contains": [
                                            "file name"
                                        ],
                                        "data_path": "action_result.data.*.submit_name",
                                        "data_type": "string"
                                    },
                                    {
                                        "column_name": "Job Id",
                                        "column_order": 1,
                                        "contains": [
                                            "falcon sandbox job id"
                                        ],
                                        "data_path": "action_result.data.*.job_id",
                                        "data_type": "string"
                                    },
                                    {
                                        "column_name": "Sample Sha256",
                                        "column_order": 2,
                                        "contains": [
                                            "sha256"
                                        ],
                                        "data_path": "action_result.data.*.sha256",
                                        "data_type": "string"
                                    },
                                    {
                                        "column_name": "Environment",
                                        "column_order": 3,
                                        "data_path": "action_result.data.*.environment",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.type",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.environment_id",
                                        "data_type": "numeric"
                                    },
                                    {
                                        "data_path": "action_result.data.*.environment_description",
                                        "data_type": "string"
                                    },
                                    {
                                        "column_name": "Verdict",
                                        "column_order": 4,
                                        "contains": [
                                            "falcon sandbox verdict"
                                        ],
                                        "data_path": "action_result.data.*.verdict",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.threat_score",
                                        "data_type": "string"
                                    },
                                    {
                                        "column_name": "Threat Score",
                                        "column_order": 5,
                                        "data_path": "action_result.data.*.threat_score_verbose",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.summary.found",
                                        "data_type": "numeric"
                                    },
                                    {
                                        "data_path": "action_result.summary.found_by_verdict_name.unknown",
                                        "data_type": "numeric"
                                    },
                                    {
                                        "data_path": "action_result.summary.found_by_verdict_name.no_verdict",
                                        "data_type": "numeric"
                                    },
                                    {
                                        "data_path": "action_result.summary.found_by_verdict_name.no_specific_threat",
                                        "data_type": "numeric"
                                    },
                                    {
                                        "data_path": "action_result.summary.found_by_verdict_name.whitelisted",
                                        "data_type": "numeric"
                                    },
                                    {
                                        "data_path": "action_result.summary.found_by_verdict_name.suspicious",
                                        "data_type": "numeric"
                                    },
                                    {
                                        "data_path": "action_result.summary.found_by_verdict_name.malicious",
                                        "data_type": "numeric"
                                    },
                                    {
                                        "contains": [
                                            "url"
                                        ],
                                        "data_path": "action_result.parameter.url",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "summary.total_objects",
                                        "data_type": "numeric"
                                    },
                                    {
                                        "data_path": "summary.total_objects_successful",
                                        "data_type": "numeric"
                                    }
                                ],
                                "parameters": {
                                    "url": {
                                        "contains": [
                                            "url"
                                        ],
                                        "data_type": "string",
                                        "default": null,
                                        "description": "HTTP Request Substring e.g. google",
                                        "key": "url",
                                        "order": 0,
                                        "primary": true,
                                        "required": true
                                    }
                                },
                                "product_name": "Falcon Sandbox",
                                "product_vendor": "Hybrid Analysis",
                                "targets": "23",
                                "type": "sandbox"
                            }
                        ],
                        "attrs": {
                            ".action": {
                                "text": "hunt url"
                            },
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "Investigate"
                            },
                            "g.approver image": {
                                "opacity": 1
                            },
                            "g.code image": {
                                "opacity": 1
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.icon image": {
                                "xlink:href": "/inc/coa/img/block_icon_investigate.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            },
                            "g.timer image": {
                                "opacity": 1
                            }
                        },
                        "block_code": "def hunt_url(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('hunt_url() called')\n        \n    #phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))\n    \n    # collect data for 'hunt_url' call\n    custom_function_results_data_1 = phantom.collect2(container=container, datapath=['merge_urls:custom_function_result.data.*.item'], action_results=results)\n\n    parameters = []\n    \n    # build parameters list for 'hunt_url' call\n    for custom_function_results_item_1 in custom_function_results_data_1:\n        if custom_function_results_item_1[0]:\n            parameters.append({\n                'url': custom_function_results_item_1[0],\n            })\n\n    phantom.act(action=\"hunt url\", parameters=parameters, assets=['hybrid-analysis-personal'], callback=url_hunt_format, name=\"hunt_url\")\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": true,
                        "color": "",
                        "connected_to_start": true,
                        "connection_name": "merge urls",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "hunt url",
                        "delay": 0,
                        "description": "",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "870336a0-7337-4150-9b5a-8b8e50046384",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 388,
                        "line_start": 367,
                        "message": "Configuring now",
                        "name": "hunt url",
                        "notes": "Hunts detonated url information from Hybrid Analysis",
                        "number": 1,
                        "order": 10,
                        "outPorts": [
                            "out"
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 360,
                            "y": 120
                        },
                        "previous_function": "",
                        "previous_name": "hunt_url",
                        "required_params": {
                            "url": true
                        },
                        "reviewer": "",
                        "show_number": false,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "action_assets",
                        "status": "",
                        "title": "Investigate",
                        "type": "coa.Action",
                        "warn": "",
                        "z": 818
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".format": {
                                "text": "url intel format"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out-1": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out-1>.port-body": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "format"
                            },
                            "g.code image": {
                                "opacity": 1
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            }
                        },
                        "block_code": "def url_intel_format(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('url_intel_format() called')\n    \n    template = \"\"\"%%\n### Recorded Future Summary of `{0}`: *{1}*\n***Critical Label: {2}, Last seen: {3}***\n\n*RF link (Intel Card): {4}*\n\nFirst Seen: {5}\n\n***Threat List:***\n- Threat list: {6}\n- Threat list: {7}\n\n***Rules Found***\n1.  **{8}** - Evidence: {9}\n1.  **{10}** - Evidence: {11}\n1.  **{12}** - Evidence: {13}\n1.  **{14}** - Evidence: {15}\n1.  **{16}** - Evidence: {17}\n1.  **{18}** - Evidence: {19}\n\n---\n%%\"\"\"\n\n    # parameter list for template variable replacement\n    parameters = [\n        \"url_intelligence:action_result.parameter.url\",\n        \"url_intelligence:action_result.summary.riskSummary\",\n        \"url_intelligence:action_result.summary.criticalityLabel\",\n        \"url_intelligence:action_result.summary.lastSeen\",\n        \"url_intelligence:action_result.data.*.intelCard\",\n        \"url_intelligence:action_result.data.*.timestamps.firstSeen\",\n        \"url_intelligence:action_result.data.*.threatLists.0.description\",\n        \"url_intelligence:action_result.data.*.threatLists.1.description\",\n        \"url_intelligence:action_result.data.*.risk.evidenceDetails.0.rule\",\n        \"url_intelligence:action_result.data.*.risk.evidenceDetails.0.evidenceString\",\n        \"url_intelligence:action_result.data.*.risk.evidenceDetails.1.rule\",\n        \"url_intelligence:action_result.data.*.risk.evidenceDetails.1.evidenceString\",\n        \"url_intelligence:action_result.data.*.risk.evidenceDetails.2.rule\",\n        \"url_intelligence:action_result.data.*.risk.evidenceDetails.2.evidenceString\",\n        \"url_intelligence:action_result.data.*.risk.evidenceDetails.3.rule\",\n        \"url_intelligence:action_result.data.*.risk.evidenceDetails.3.evidenceString\",\n        \":url_intelligence:action_result.data.*.risk.evidenceDetails.4.rule\",\n        \"url_intelligence:action_result.data.*.risk.evidenceDetails.4.evidenceString\",\n        \"url_intelligence:action_result.data.*.risk.evidenceDetails.5.rule\",\n        \"url_intelligence:action_result.data.*.risk.evidenceDetails.5.evidenceString\",\n    ]\n\n    phantom.format(container=container, template=template, parameters=parameters, name=\"url_intel_format\")\n\n    join_indicator_analysis(container=container)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "url intelligence",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "url intel format",
                        "description": "",
                        "format": "format",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "0bf4bc4e-04e8-4b45-be55-deaaa3f1626e",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 360,
                        "line_start": 304,
                        "message": "Configuring now",
                        "name": "format",
                        "notes": "Create url intel information format for note",
                        "number": 11,
                        "order": 8,
                        "outPorts": [
                            "out-1"
                        ],
                        "parameters": [
                            {
                                "position": 0,
                                "type": "",
                                "value": "url_intelligence:action_result.parameter.url"
                            },
                            {
                                "position": 1,
                                "type": "",
                                "value": "url_intelligence:action_result.summary.riskSummary"
                            },
                            {
                                "position": 1,
                                "type": "",
                                "value": "url_intelligence:action_result.summary.criticalityLabel"
                            },
                            {
                                "position": 2,
                                "type": "",
                                "value": "url_intelligence:action_result.summary.lastSeen"
                            },
                            {
                                "position": 3,
                                "type": "",
                                "value": "url_intelligence:action_result.data.*.intelCard"
                            },
                            {
                                "position": 4,
                                "type": "",
                                "value": "url_intelligence:action_result.data.*.timestamps.firstSeen"
                            },
                            {
                                "position": 5,
                                "type": "",
                                "value": "url_intelligence:action_result.data.*.threatLists.0.description"
                            },
                            {
                                "position": 5,
                                "type": "",
                                "value": "url_intelligence:action_result.data.*.threatLists.1.description"
                            },
                            {
                                "position": 8,
                                "type": "",
                                "value": "url_intelligence:action_result.data.*.risk.evidenceDetails.0.rule"
                            },
                            {
                                "position": 9,
                                "type": "",
                                "value": "url_intelligence:action_result.data.*.risk.evidenceDetails.0.evidenceString"
                            },
                            {
                                "position": 10,
                                "type": "",
                                "value": "url_intelligence:action_result.data.*.risk.evidenceDetails.1.rule"
                            },
                            {
                                "position": 11,
                                "type": "",
                                "value": "url_intelligence:action_result.data.*.risk.evidenceDetails.1.evidenceString"
                            },
                            {
                                "position": 12,
                                "type": "",
                                "value": "url_intelligence:action_result.data.*.risk.evidenceDetails.2.rule"
                            },
                            {
                                "position": 13,
                                "type": "",
                                "value": "url_intelligence:action_result.data.*.risk.evidenceDetails.2.evidenceString"
                            },
                            {
                                "position": 14,
                                "type": "",
                                "value": "url_intelligence:action_result.data.*.risk.evidenceDetails.3.rule"
                            },
                            {
                                "position": 15,
                                "type": "",
                                "value": "url_intelligence:action_result.data.*.risk.evidenceDetails.3.evidenceString"
                            },
                            {
                                "position": 16,
                                "type": "",
                                "value": ":url_intelligence:action_result.data.*.risk.evidenceDetails.4.rule"
                            },
                            {
                                "position": 17,
                                "type": "",
                                "value": "url_intelligence:action_result.data.*.risk.evidenceDetails.4.evidenceString"
                            },
                            {
                                "position": 18,
                                "type": "",
                                "value": "url_intelligence:action_result.data.*.risk.evidenceDetails.5.rule"
                            },
                            {
                                "position": 19,
                                "type": "",
                                "value": "url_intelligence:action_result.data.*.risk.evidenceDetails.5.evidenceString"
                            }
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 600,
                            "y": 240
                        },
                        "previous_function": "",
                        "previous_name": "url_intel_format",
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "format",
                        "status": "",
                        "template": "%%\n### Recorded Future Summary of `{0}`: *{1}*\n***Critical Label: {2}, Last seen: {3}***\n\n*RF link (Intel Card): {4}*\n\nFirst Seen: {5}\n\n***Threat List:***\n- Threat list: {6}\n- Threat list: {7}\n\n***Rules Found***\n1.  **{8}** - Evidence: {9}\n1.  **{10}** - Evidence: {11}\n1.  **{12}** - Evidence: {13}\n1.  **{14}** - Evidence: {15}\n1.  **{16}** - Evidence: {17}\n1.  **{18}** - Evidence: {19}\n\n---\n%%",
                        "title": "format",
                        "type": "coa.Format",
                        "warn": false,
                        "z": 820
                    },
                    {
                        "action": "url intelligence",
                        "action_type": "investigate",
                        "active": false,
                        "active_keys": {},
                        "active_values": {
                            "ip": "filtered-data:url_filter:condition_1:artifact:*.cef.sourceAddress",
                            "url": "merge_urls:custom_function_result.data.*.item"
                        },
                        "angle": 0,
                        "app": "",
                        "appid": "",
                        "approver": "",
                        "assets": [
                            {
                                "action": "url intelligence",
                                "actions": [
                                    "ip reputation",
                                    "ip intelligence",
                                    "domain reputation",
                                    "domain intelligence",
                                    "file reputation",
                                    "file intelligence",
                                    "vulnerability reputation",
                                    "vulnerability intelligence",
                                    "url reputation",
                                    "url intelligence",
                                    "alert rule lookup",
                                    "alert data lookup",
                                    "test connectivity"
                                ],
                                "active": true,
                                "app_name": "Recorded Future",
                                "app_version": "1.2.0",
                                "appid": "6efe0e1b-76ac-4ffd-8fa0-ac58fd6efd77",
                                "asset_name": "recorded_future_500",
                                "config_type": "asset",
                                "count": 0,
                                "fields": {
                                    "url": "merge_urls:custom_function_result.data.*.item"
                                },
                                "has_app": true,
                                "id": 19,
                                "loaded": false,
                                "missing": false,
                                "name": "recorded future",
                                "output": [
                                    {
                                        "contains": [
                                            "recordedfuture result status"
                                        ],
                                        "data_path": "action_result.status",
                                        "data_type": "string",
                                        "example_values": [
                                            "success",
                                            "failed"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "url"
                                        ],
                                        "data_path": "action_result.parameter.url",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "recordedfuture entity id"
                                        ],
                                        "data_path": "action_result.data.*.entity.id",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "url"
                                        ],
                                        "data_path": "action_result.data.*.entity.name",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "recordedfuture entity type"
                                        ],
                                        "data_path": "action_result.data.*.entity.type",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "recordedfuture metrics type"
                                        ],
                                        "data_path": "action_result.data.*.metrics.*.type",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "recordedfuture metrics value"
                                        ],
                                        "data_path": "action_result.data.*.metrics.*.value",
                                        "data_type": "numeric"
                                    },
                                    {
                                        "contains": [
                                            "recordedfuture risk criticality"
                                        ],
                                        "data_path": "action_result.data.*.risk.criticality",
                                        "data_type": "numeric"
                                    },
                                    {
                                        "contains": [
                                            "recordedfuture risk criticality label"
                                        ],
                                        "data_path": "action_result.data.*.risk.criticalityLabel",
                                        "data_type": "string",
                                        "example_values": [
                                            "Very Malicious",
                                            "Malicious",
                                            "Suspicious",
                                            "Unusual"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "recordedfuture risk criticality"
                                        ],
                                        "data_path": "action_result.data.*.risk.evidenceDetails.*.criticality",
                                        "data_type": "numeric"
                                    },
                                    {
                                        "contains": [
                                            "recordedfuture risk criticality label"
                                        ],
                                        "data_path": "action_result.data.*.risk.evidenceDetails.*.criticalityLabel",
                                        "data_type": "string",
                                        "example_values": [
                                            "Very Malicious",
                                            "Malicious",
                                            "Suspicious",
                                            "Unusual"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "recordedfuture risk criticality label"
                                        ],
                                        "data_path": "action_result.data.*.risk.evidenceDetails.*.evidenceString",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "recordedfuture mitigation string"
                                        ],
                                        "data_path": "action_result.data.*.risk.evidenceDetails.*.mitigationString",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "recordedfuture evidence rule"
                                        ],
                                        "data_path": "action_result.data.*.risk.evidenceDetails.*.rule",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "recordedfuture evidence timestamp"
                                        ],
                                        "data_path": "action_result.data.*.risk.evidenceDetails.*.timestamp",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "recordedfuture risk string"
                                        ],
                                        "data_path": "action_result.data.*.risk.riskString",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "recordedfuture risk summary"
                                        ],
                                        "data_path": "action_result.data.*.risk.riskSummary",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "recordedfuture risk rules"
                                        ],
                                        "data_path": "action_result.data.*.risk.rules",
                                        "data_type": "numeric"
                                    },
                                    {
                                        "contains": [
                                            "recordedfuture risk score"
                                        ],
                                        "data_path": "action_result.data.*.risk.score",
                                        "data_type": "numeric"
                                    },
                                    {
                                        "contains": [
                                            "recordedfuture evidence firstseen"
                                        ],
                                        "data_path": "action_result.data.*.timestamps.firstSeen",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "recordedfuture evidence lastseen"
                                        ],
                                        "data_path": "action_result.data.*.timestamps.lastSeen",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "recordedfuture risk criticality label"
                                        ],
                                        "data_path": "action_result.summary.criticalityLabel",
                                        "data_type": "string",
                                        "example_values": [
                                            "Very Malicious",
                                            "Malicious",
                                            "Suspicious",
                                            "Unusual"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "recordedfuture evidence lastseen"
                                        ],
                                        "data_path": "action_result.summary.lastSeen",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "recordedfuture risk summary"
                                        ],
                                        "data_path": "action_result.summary.riskSummary",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "recordedfuture result message"
                                        ],
                                        "data_path": "action_result.message",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "recordedfuture total objects"
                                        ],
                                        "data_path": "summary.total_objects",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "recordedfuture total objects successful"
                                        ],
                                        "data_path": "summary.total_objects_successful",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1
                                        ]
                                    }
                                ],
                                "parameters": {
                                    "url": {
                                        "contains": [
                                            "url"
                                        ],
                                        "data_type": "string",
                                        "default": null,
                                        "description": "URL to query",
                                        "key": "url",
                                        "order": 0,
                                        "primary": true,
                                        "required": true
                                    }
                                },
                                "product_name": "Recorded Future App for Phantom",
                                "product_vendor": "Recorded Future, Inc",
                                "targets": "19",
                                "type": "reputation"
                            }
                        ],
                        "attrs": {
                            ".action": {
                                "text": "url intelligence"
                            },
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "Investigate"
                            },
                            "g.approver image": {
                                "opacity": 1
                            },
                            "g.code image": {
                                "opacity": 1
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.icon image": {
                                "xlink:href": "/inc/coa/img/block_icon_investigate.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            },
                            "g.timer image": {
                                "opacity": 1
                            }
                        },
                        "block_code": "def url_intelligence(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('url_intelligence() called')\n        \n    #phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))\n    \n    # collect data for 'url_intelligence' call\n    custom_function_results_data_1 = phantom.collect2(container=container, datapath=['merge_urls:custom_function_result.data.*.item'], action_results=results)\n\n    parameters = []\n    \n    # build parameters list for 'url_intelligence' call\n    for custom_function_results_item_1 in custom_function_results_data_1:\n        if custom_function_results_item_1[0]:\n            parameters.append({\n                'url': custom_function_results_item_1[0],\n            })\n\n    phantom.act(action=\"url intelligence\", parameters=parameters, assets=['recorded future'], callback=url_intel_format, name=\"url_intelligence\")\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": true,
                        "color": "",
                        "connected_to_start": true,
                        "connection_name": "merge urls",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "url intelligence",
                        "delay": 0,
                        "description": "",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "cc64ef72-b0d9-4d5b-babf-84b7d9a1582c",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 97,
                        "line_end": 101,
                        "line_start": 80,
                        "message": "Configuring now",
                        "name": "url intelligence",
                        "notes": "Gets url intelligence provided from Recorded Future",
                        "number": 1,
                        "order": 5,
                        "outPorts": [
                            "out"
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 360,
                            "y": 240
                        },
                        "previous_function": "",
                        "previous_name": "url_intelligence",
                        "required_params": {
                            "url": true
                        },
                        "reviewer": "",
                        "show_number": false,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "action_assets",
                        "status": "",
                        "title": "Investigate",
                        "type": "coa.Action",
                        "warn": "",
                        "z": 823
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".format": {
                                "text": "url hunt format"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out-1": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out-1>.port-body": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "format"
                            },
                            "g.code image": {
                                "opacity": 1
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            }
                        },
                        "block_code": "def url_hunt_format(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('url_hunt_format() called')\n    \n    template = \"\"\"%%\n### Falcon Sandbox Summary of `{0}`: *{1}, {2} - {3}*\n*Hybrid Analysis Link: https://hybrid-analysis.com/sample/{10}*\n\n| Data| Result |\n| --- | --- |\n| VX family | {4} |\n| Scan date | {5} |\n| Name(s) | {6} |\n| Environment | {7} |\n| Type | {8} |\n| sha1 | {9} |\n| sha256 | {10} |\n| Compromised Hosts | {11} |\n| Domains | {12} |\n\n---\n%%\"\"\"\n\n    # parameter list for template variable replacement\n    parameters = [\n        \"hunt_url:action_result.parameter.url\",\n        \"hunt_url:action_result.message\",\n        \"hunt_url:action_result.data.*.verdict\",\n        \"hunt_url:action_result.data.*.threat_score_verbose\",\n        \"hunt_url:action_result.data.*.vx_family\",\n        \"hunt_url:action_result.data.*.analysis_start_time\",\n        \"hunt_url:action_result.data.*.submit_name\",\n        \"hunt_url:action_result.data.*.environment\",\n        \"hunt_url:action_result.data.*.type\",\n        \"hunt_url:action_result.data.*.sha1\",\n        \"hunt_url:action_result.data.*.sha256\",\n        \"hunt_url:action_result.data.*.compromised_hosts\",\n        \"hunt_url:action_result.data.*.domains\",\n    ]\n\n    phantom.format(container=container, template=template, parameters=parameters, name=\"url_hunt_format\")\n\n    join_indicator_analysis(container=container)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "hunt url",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "url hunt format",
                        "description": "",
                        "format": "format",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "cde07dd8-34e9-437e-9265-1b466ef848a4",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 433,
                        "line_start": 388,
                        "message": "Configuring now",
                        "name": "format",
                        "notes": "Format the detonated url data if found",
                        "number": 13,
                        "order": 11,
                        "outPorts": [
                            "out-1"
                        ],
                        "parameters": [
                            {
                                "position": 0,
                                "type": "",
                                "value": "hunt_url:action_result.parameter.url"
                            },
                            {
                                "position": 1,
                                "type": "",
                                "value": "hunt_url:action_result.message"
                            },
                            {
                                "position": 2,
                                "type": "",
                                "value": "hunt_url:action_result.data.*.verdict"
                            },
                            {
                                "position": 3,
                                "type": "",
                                "value": "hunt_url:action_result.data.*.threat_score_verbose"
                            },
                            {
                                "position": 4,
                                "type": "",
                                "value": "hunt_url:action_result.data.*.vx_family"
                            },
                            {
                                "position": 5,
                                "type": "",
                                "value": "hunt_url:action_result.data.*.analysis_start_time"
                            },
                            {
                                "position": 6,
                                "type": "",
                                "value": "hunt_url:action_result.data.*.submit_name"
                            },
                            {
                                "position": 7,
                                "type": "",
                                "value": "hunt_url:action_result.data.*.environment"
                            },
                            {
                                "position": 8,
                                "type": "",
                                "value": "hunt_url:action_result.data.*.type"
                            },
                            {
                                "position": 9,
                                "type": "",
                                "value": "hunt_url:action_result.data.*.sha1"
                            },
                            {
                                "position": 10,
                                "type": "",
                                "value": "hunt_url:action_result.data.*.sha256"
                            },
                            {
                                "position": 11,
                                "type": "",
                                "value": "hunt_url:action_result.data.*.compromised_hosts"
                            },
                            {
                                "position": 12,
                                "type": "",
                                "value": "hunt_url:action_result.data.*.domains"
                            }
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 600,
                            "y": 120
                        },
                        "previous_function": "",
                        "previous_name": "url_hunt_format",
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "format",
                        "status": "",
                        "template": "%%\n### Falcon Sandbox Summary of `{0}`: *{1}, {2} - {3}*\n*Hybrid Analysis Link: https://hybrid-analysis.com/sample/{10}*\n\n| Data| Result |\n| --- | --- |\n| VX family | {4} |\n| Scan date | {5} |\n| Name(s) | {6} |\n| Environment | {7} |\n| Type | {8} |\n| sha1 | {9} |\n| sha256 | {10} |\n| Compromised Hosts | {11} |\n| Domains | {12} |\n\n---\n%%",
                        "title": "format",
                        "type": "coa.Format",
                        "warn": false,
                        "z": 824
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".functionBlock": {
                                "text": "indicator analysis"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "custom function"
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 1
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn_grey.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            }
                        },
                        "block_code": "def indicator_analysis(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('indicator_analysis() called')\n    \n    results_data_1 = phantom.collect2(container=container, datapath=['url_reputation:action_result.parameter.url', 'url_reputation:action_result.data.*.positives'], action_results=results)\n    results_data_2 = phantom.collect2(container=container, datapath=['hunt_url:action_result.parameter.url', 'hunt_url:action_result.data.*.threat_score', 'hunt_url:action_result.data.*.verdict'], action_results=results)\n    results_data_3 = phantom.collect2(container=container, datapath=['url_intelligence:action_result.parameter.url', 'url_intelligence:action_result.data.*.risk.score', 'url_intelligence:action_result.data.*.risk.criticalityLabel'], action_results=results)\n    custom_function_results_data_1 = phantom.collect2(container=container, datapath=['merge_urls:custom_function_result.data.*.item'], action_results=results)\n    results_item_1_0 = [item[0] for item in results_data_1]\n    results_item_1_1 = [item[1] for item in results_data_1]\n    results_item_2_0 = [item[0] for item in results_data_2]\n    results_item_2_1 = [item[1] for item in results_data_2]\n    results_item_2_2 = [item[2] for item in results_data_2]\n    results_item_3_0 = [item[0] for item in results_data_3]\n    results_item_3_1 = [item[1] for item in results_data_3]\n    results_item_3_2 = [item[2] for item in results_data_3]\n    custom_function_results_item_1_0 = [item[0] for item in custom_function_results_data_1]\n\n    indicator_analysis__analysis = None\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n\n    # Debug data inputs \n    \n    #phantom.debug(\"URL data\")\n    #phantom.debug(custom_function_results_data_1)\n    indicator = custom_function_results_data_1\n    \n    #phantom.debug(\"Reputation data\")\n    #phantom.debug(results_data_1)\n    rep_data = results_data_1\n    \n    #phantom.debug(\"Detonated data\")\n    #phantom.debug(results_data_2)\n    detonate_data = results_data_2\n    \n    #phantom.debug(\"Intel data\")\n    #phantom.debug(results_data_3)\n    risk_data = results_data_3\n\n    # Prepare objects for finished analysis\n    indicator_analysis__analysis = []\n    threat_level = {\n        'title':\"\",\n        'indicator':\"\",\n        'confidence':\"Low\",\n        'threat':\"Low\"\n        }\n\n    \"\"\" Calculations for Intelligence Assessment\n    Get the result information and performs the following calculation:\n\n    Threat: Values = \"High\", \"Med\", \"Low\"\n    Type of validation from source\n        High: VT >2 detected downloaded samples, Hybrid-Analysis Threat Score >50  AND RF= Very Malicious, Malicious, Risk score >50 OR FEYE Detection\n        Med: (VT >2 detected downloaded samples, Hybrid-Analysis Threat Score >50 AND/OR RF= Unusual, Suspicious, Risk score <50) OR FEYE Detection\n        Low: VT >2 detected downloaded samples, Hybrid-Analysis Threat Score >50 OR RF= Unusual, Suspicious, Risk score <50\n\n    Confidence: Detection on # of sources\n        High >2 Sources or Finished Intel\n        Med  =2 Sources\n        Low  <1 Source\n    \"\"\"\n    rep_level = 2\n    risk_level = 50\n    high_risk = ['Very Malicious','Malicious']\n    med_risk = [\"Suspicious\", 'Unusual']\n    \n    for index, item in enumerate(indicator):\n        threat_level['indicator'] = item[0]\n        phantom.debug('Analyzing indicator: {} of {}'.format(index,len(indicator)))\n        # Evaluates Reputation data\n        for rep in rep_data:\n            #phantom.debug(rep)\n            #phantom.debug('Indicator found: {} | rep value: {}'.format(rep[0],rep[1]))\n            if rep[0] == item[0] and rep[1] >= rep_level:\n                threat_level['threat'] = \"Medium\"\n                #phantom.debug('Reputation indicator found: {} | {} and setting threat to {}'.format(rep[0],rep[1],threat_level['threat']))\n            #phantom.debug('Reputation analysis update: {} | {} with threat: {} | confidence: {}'.format(rep[0],rep[1],threat_level['threat'],threat_level['confidence']))\n            \n        for detonate in detonate_data:\n            #phantom.debug(detonate)\n            #phantom.debug('Indicator found: {} | rep value: {}'.format(rep[0],rep[1]))\n            if detonate[0] == item[0] and (detonate[1] >= risk_level or detonate[2] in ['Suspicious']):\n                threat_level['threat'] = \"Medium\"\n                threat_level['confidence'] = \"Medium\"\n                #phantom.debug('Reputation indicator found: {} | {} and setting threat to {}'.format(rep[0],rep[1],threat_level['threat']))\n            elif detonate[0] == item[0] and detonate[2] in ['Malicious']:\n                threat_level['threat'] = \"High\"\n                threat_level['confidence'] = \"Medium\"\n                #phantom.debug('Reputation indicator found: {} | {} and setting threat to {}'.format(rep[0],rep[1],threat_level['threat']))\n            #phantom.debug('Reputation analysis update: {} | {} with threat: {} | confidence: {}'.format(rep[0],rep[1],threat_level['threat'],threat_level['confidence']))\n                \n        # Evaluate risk score or label\n        for risk in risk_data:\n            # Evaluates Risk Score\n            #phantom.debug(risk)\n            if risk[0] == item[0] and risk[1] > risk_level:\n                if threat_level['threat'] == \"Medium\":\n                    threat_level['threat'] = \"High\"\n                    threat_level['confidence'] = \"High\"\n                    #phantom.debug('Risk score found: {} | {} and setting threat to {}'.format(risk[0],risk[1],threat_level['threat']))\n            # Evaluates Risk Label\n            elif risk[0] == item[0] and risk[2] in high_risk:\n                if threat_level['threat'] == \"Medium\":\n                    threat_level['threat'] = \"High\"\n                    threat_level['confidence'] = \"High\"\n                    #phantom.debug('High Risk label found: {} | {} and setting threat to {}'.format(risk[0],risk[2],threat_level['threat']))\n                else:\n                    threat_level['threat'] = \"Medium\"\n                    threat_level['confidence'] = \"Medium\"\n                    #phantom.debug('Medium Risk Label found: {} | {} and setting threat to {}'.format(risk[0],risk[2],threat_level['threat']))\n            elif risk[0] == item[0] and risk[2] in med_risk:\n                if threat_level['threat'] == \"Low\":\n                    threat_level['confidence'] = \"Medium\"\n                    #phantom.debug('Medium Risk Label found: {} | {} and setting threat to {}'.format(risk[0],risk[2],threat_level['threat']))\n            #phantom.debug('Risk analysis update: {} | {}/{} with threat: {} | confidence {}'.format(risk[0],risk[1],risk[2],threat_level['threat'],threat_level['confidence']))\n\n        # Create title for note\n        threat_level['title'] = \"Analysis of Indicator: {} | Threat: {} | Confidence: {}\".format(threat_level['indicator'], threat_level['threat'], threat_level['confidence'])\n        #phantom.debug(threat_level['title'])\n        \n        # Append output value for integration\n        indicator_analysis__analysis.append({\n            'title':threat_level['title'],\n            'indicator':threat_level['indicator'],\n            'confidence':threat_level['confidence'],\n            'threat':threat_level['threat']\n        })\n\n    #phantom.debug('This is indicator analysis below:')\n    #phantom.debug(indicator_analysis__analysis)\n\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n\n    phantom.save_run_data(key='indicator_analysis:analysis', value=json.dumps(indicator_analysis__analysis))\n    generate_task_notes(container=container)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "url reputation, hunt url, url intelligence",
                        "connection_type": "action",
                        "customCodeEndLineOffset": 7,
                        "customCodeStartLine": 22,
                        "custom_callback": "",
                        "custom_code": "def indicator_analysis(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('indicator_analysis() called')\n    \n    results_data_1 = phantom.collect2(container=container, datapath=['url_reputation:action_result.parameter.url', 'url_reputation:action_result.data.*.positives'], action_results=results)\n    results_data_2 = phantom.collect2(container=container, datapath=['hunt_url:action_result.parameter.url', 'hunt_url:action_result.data.*.threat_score', 'hunt_url:action_result.data.*.verdict'], action_results=results)\n    results_data_3 = phantom.collect2(container=container, datapath=['url_intelligence:action_result.parameter.url', 'url_intelligence:action_result.data.*.risk.score', 'url_intelligence:action_result.data.*.risk.criticalityLabel'], action_results=results)\n    custom_function_results_data_1 = phantom.collect2(container=container, datapath=['merge_list:custom_function_result.data.*.item'], action_results=results)\n    results_item_1_0 = [item[0] for item in results_data_1]\n    results_item_1_1 = [item[1] for item in results_data_1]\n    results_item_2_0 = [item[0] for item in results_data_2]\n    results_item_2_1 = [item[1] for item in results_data_2]\n    results_item_2_2 = [item[2] for item in results_data_2]\n    results_item_3_0 = [item[0] for item in results_data_3]\n    results_item_3_1 = [item[1] for item in results_data_3]\n    results_item_3_2 = [item[2] for item in results_data_3]\n    custom_function_results_item_1_0 = [item[0] for item in custom_function_results_data_1]\n\n    indicator_analysis__analysis = None\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n\n    # Debug data inputs \n    \n    #phantom.debug(\"URL data\")\n    #phantom.debug(custom_function_results_data_1)\n    indicator = custom_function_results_data_1\n    \n    #phantom.debug(\"Reputation data\")\n    #phantom.debug(results_data_1)\n    rep_data = results_data_1\n    \n    #phantom.debug(\"Detonated data\")\n    #phantom.debug(results_data_2)\n    detonate_data = results_data_2\n    \n    #phantom.debug(\"Intel data\")\n    #phantom.debug(results_data_3)\n    risk_data = results_data_3\n\n    # Prepare objects for finished analysis\n    indicator_analysis__analysis = []\n    threat_level = {\n        'title':\"\",\n        'indicator':\"\",\n        'confidence':\"Low\",\n        'threat':\"Low\"\n        }\n\n    \"\"\" Calculations for Intelligence Assessment\n    Get the result information and performs the following calculation:\n\n    Threat: Values = \"High\", \"Med\", \"Low\"\n    Type of validation from source\n        High: VT >2 detected downloaded samples, Hybrid-Analysis Threat Score >50  AND RF= Very Malicious, Malicious, Risk score >50 OR FEYE Detection\n        Med: (VT >2 detected downloaded samples, Hybrid-Analysis Threat Score >50 AND/OR RF= Unusual, Suspicious, Risk score <50) OR FEYE Detection\n        Low: VT >2 detected downloaded samples, Hybrid-Analysis Threat Score >50 OR RF= Unusual, Suspicious, Risk score <50\n\n    Confidence: Detection on # of sources\n        High >2 Sources or Finished Intel\n        Med  =2 Sources\n        Low  <1 Source\n    \"\"\"\n    rep_level = 2\n    risk_level = 50\n    high_risk = ['Very Malicious','Malicious']\n    med_risk = [\"Suspicious\", 'Unusual']\n    \n    for index, item in enumerate(indicator):\n        threat_level['indicator'] = item[0]\n        phantom.debug('Analyzing indicator: {} of {}'.format(index,len(indicator)))\n        # Evaluates Reputation data\n        for rep in rep_data:\n            #phantom.debug(rep)\n            #phantom.debug('Indicator found: {} | rep value: {}'.format(rep[0],rep[1]))\n            if rep[0] == item[0] and rep[1] >= rep_level:\n                threat_level['threat'] = \"Medium\"\n                #phantom.debug('Reputation indicator found: {} | {} and setting threat to {}'.format(rep[0],rep[1],threat_level['threat']))\n            #phantom.debug('Reputation analysis update: {} | {} with threat: {} | confidence: {}'.format(rep[0],rep[1],threat_level['threat'],threat_level['confidence']))\n            \n        for detonate in detonate_data:\n            #phantom.debug(detonate)\n            #phantom.debug('Indicator found: {} | rep value: {}'.format(rep[0],rep[1]))\n            if detonate[0] == item[0] and (detonate[1] >= risk_level or detonate[2] in ['Suspicious']):\n                threat_level['threat'] = \"Medium\"\n                threat_level['confidence'] = \"Medium\"\n                #phantom.debug('Reputation indicator found: {} | {} and setting threat to {}'.format(rep[0],rep[1],threat_level['threat']))\n            elif detonate[0] == item[0] and detonate[2] in ['Malicious']:\n                threat_level['threat'] = \"High\"\n                threat_level['confidence'] = \"Medium\"\n                #phantom.debug('Reputation indicator found: {} | {} and setting threat to {}'.format(rep[0],rep[1],threat_level['threat']))\n            #phantom.debug('Reputation analysis update: {} | {} with threat: {} | confidence: {}'.format(rep[0],rep[1],threat_level['threat'],threat_level['confidence']))\n                \n        # Evaluate risk score or label\n        for risk in risk_data:\n            # Evaluates Risk Score\n            #phantom.debug(risk)\n            if risk[0] == item[0] and risk[1] > risk_level:\n                if threat_level['threat'] == \"Medium\":\n                    threat_level['threat'] = \"High\"\n                    threat_level['confidence'] = \"High\"\n                    #phantom.debug('Risk score found: {} | {} and setting threat to {}'.format(risk[0],risk[1],threat_level['threat']))\n            # Evaluates Risk Label\n            elif risk[0] == item[0] and risk[2] in high_risk:\n                if threat_level['threat'] == \"Medium\":\n                    threat_level['threat'] = \"High\"\n                    threat_level['confidence'] = \"High\"\n                    #phantom.debug('High Risk label found: {} | {} and setting threat to {}'.format(risk[0],risk[2],threat_level['threat']))\n                else:\n                    threat_level['threat'] = \"Medium\"\n                    threat_level['confidence'] = \"Medium\"\n                    #phantom.debug('Medium Risk Label found: {} | {} and setting threat to {}'.format(risk[0],risk[2],threat_level['threat']))\n            elif risk[0] == item[0] and risk[2] in med_risk:\n                if threat_level['threat'] == \"Low\":\n                    threat_level['confidence'] = \"Medium\"\n                    #phantom.debug('Medium Risk Label found: {} | {} and setting threat to {}'.format(risk[0],risk[2],threat_level['threat']))\n            #phantom.debug('Risk analysis update: {} | {}/{} with threat: {} | confidence {}'.format(risk[0],risk[1],risk[2],threat_level['threat'],threat_level['confidence']))\n\n        # Create title for note\n        threat_level['title'] = \"Analysis of Indicator: {} | Threat: {} | Confidence: {}\".format(threat_level['indicator'], threat_level['threat'], threat_level['confidence'])\n        #phantom.debug(threat_level['title'])\n        \n        # Append output value for integration\n        indicator_analysis__analysis.append({\n            'title':threat_level['title'],\n            'indicator':threat_level['indicator'],\n            'confidence':threat_level['confidence'],\n            'threat':threat_level['threat']\n        })\n\n    #phantom.debug('This is indicator analysis below:')\n    #phantom.debug(indicator_analysis__analysis)\n\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n\n    phantom.save_run_data(key='indicator_analysis:analysis', value=json.dumps(indicator_analysis__analysis))\n    generate_task_notes(container=container)\n\n    return",
                        "custom_join": "",
                        "custom_name": "indicator analysis",
                        "description": "See the doc type in the source code for calculation parameters for this indicator",
                        "functionBlock": "custom function",
                        "has_custom": true,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "c83b471d-fa80-4fda-8c52-340c6a7e0eb2",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "def join_indicator_analysis(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None):\n    phantom.debug('join_indicator_analysis() called')\n\n    # check if all connected incoming playbooks, actions, or custom functions are done i.e. have succeeded or failed\n    if phantom.completed(action_names=['url_reputation', 'hunt_url', 'url_intelligence']):\n        \n        # call connected block \"indicator_analysis\"\n        indicator_analysis(container=container, handle=handle)\n    \n    return",
                        "join_optional": [],
                        "join_start": 579,
                        "legacy": true,
                        "line_end": 590,
                        "line_start": 436,
                        "message": "Configuring now",
                        "name": "custom function",
                        "notes": "Provide an analysis of the indicator based on the vendor provided threat assessment with the number of sources and confidence in that assessment by the prevalence of the indicator in more than one occurrence.",
                        "number": 2,
                        "order": 12,
                        "outPorts": [
                            "out"
                        ],
                        "outputVariables": [
                            {
                                "position": 0,
                                "type": "",
                                "value": "analysis"
                            }
                        ],
                        "parameters": [
                            {
                                "position": 1,
                                "type": "",
                                "value": "merge_urls:custom_function_result.data.*.item"
                            },
                            {
                                "position": 1,
                                "type": "",
                                "value": "url_reputation:action_result.parameter.url"
                            },
                            {
                                "position": 2,
                                "type": "",
                                "value": "url_reputation:action_result.data.*.positives"
                            },
                            {
                                "position": 3,
                                "type": "",
                                "value": "hunt_url:action_result.parameter.url"
                            },
                            {
                                "position": 4,
                                "type": "",
                                "value": "hunt_url:action_result.data.*.threat_score"
                            },
                            {
                                "position": 5,
                                "type": "",
                                "value": "hunt_url:action_result.data.*.verdict"
                            },
                            {
                                "position": 6,
                                "type": "",
                                "value": "url_intelligence:action_result.parameter.url"
                            },
                            {
                                "position": 7,
                                "type": "",
                                "value": "url_intelligence:action_result.data.*.risk.score"
                            },
                            {
                                "position": 8,
                                "type": "",
                                "value": "url_intelligence:action_result.data.*.risk.criticalityLabel"
                            }
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 860,
                            "y": 0
                        },
                        "previous_function": "",
                        "previous_name": "indicator_analysis",
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "custom function",
                        "status": "deprecating",
                        "title": "custom function",
                        "type": "coa.FunctionBlock",
                        "userGeneratedCode": "\n    # Debug data inputs \n    \n    #phantom.debug(\"URL data\")\n    #phantom.debug(custom_function_results_data_1)\n    indicator = custom_function_results_data_1\n    \n    #phantom.debug(\"Reputation data\")\n    #phantom.debug(results_data_1)\n    rep_data = results_data_1\n    \n    #phantom.debug(\"Detonated data\")\n    #phantom.debug(results_data_2)\n    detonate_data = results_data_2\n    \n    #phantom.debug(\"Intel data\")\n    #phantom.debug(results_data_3)\n    risk_data = results_data_3\n\n    # Prepare objects for finished analysis\n    indicator_analysis__analysis = []\n    threat_level = {\n        'title':\"\",\n        'indicator':\"\",\n        'confidence':\"Low\",\n        'threat':\"Low\"\n        }\n\n    \"\"\" Calculations for Intelligence Assessment\n    Get the result information and performs the following calculation:\n\n    Threat: Values = \"High\", \"Med\", \"Low\"\n    Type of validation from source\n        High: VT >2 detected downloaded samples, Hybrid-Analysis Threat Score >50  AND RF= Very Malicious, Malicious, Risk score >50 OR FEYE Detection\n        Med: (VT >2 detected downloaded samples, Hybrid-Analysis Threat Score >50 AND/OR RF= Unusual, Suspicious, Risk score <50) OR FEYE Detection\n        Low: VT >2 detected downloaded samples, Hybrid-Analysis Threat Score >50 OR RF= Unusual, Suspicious, Risk score <50\n\n    Confidence: Detection on # of sources\n        High >2 Sources or Finished Intel\n        Med  =2 Sources\n        Low  <1 Source\n    \"\"\"\n    rep_level = 2\n    risk_level = 50\n    high_risk = ['Very Malicious','Malicious']\n    med_risk = [\"Suspicious\", 'Unusual']\n    \n    for index, item in enumerate(indicator):\n        threat_level['indicator'] = item[0]\n        phantom.debug('Analyzing indicator: {} of {}'.format(index,len(indicator)))\n        # Evaluates Reputation data\n        for rep in rep_data:\n            #phantom.debug(rep)\n            #phantom.debug('Indicator found: {} | rep value: {}'.format(rep[0],rep[1]))\n            if rep[0] == item[0] and rep[1] >= rep_level:\n                threat_level['threat'] = \"Medium\"\n                #phantom.debug('Reputation indicator found: {} | {} and setting threat to {}'.format(rep[0],rep[1],threat_level['threat']))\n            #phantom.debug('Reputation analysis update: {} | {} with threat: {} | confidence: {}'.format(rep[0],rep[1],threat_level['threat'],threat_level['confidence']))\n            \n        for detonate in detonate_data:\n            #phantom.debug(detonate)\n            #phantom.debug('Indicator found: {} | rep value: {}'.format(rep[0],rep[1]))\n            if detonate[0] == item[0] and (detonate[1] >= risk_level or detonate[2] in ['Suspicious']):\n                threat_level['threat'] = \"Medium\"\n                threat_level['confidence'] = \"Medium\"\n                #phantom.debug('Reputation indicator found: {} | {} and setting threat to {}'.format(rep[0],rep[1],threat_level['threat']))\n            elif detonate[0] == item[0] and detonate[2] in ['Malicious']:\n                threat_level['threat'] = \"High\"\n                threat_level['confidence'] = \"Medium\"\n                #phantom.debug('Reputation indicator found: {} | {} and setting threat to {}'.format(rep[0],rep[1],threat_level['threat']))\n            #phantom.debug('Reputation analysis update: {} | {} with threat: {} | confidence: {}'.format(rep[0],rep[1],threat_level['threat'],threat_level['confidence']))\n                \n        # Evaluate risk score or label\n        for risk in risk_data:\n            # Evaluates Risk Score\n            #phantom.debug(risk)\n            if risk[0] == item[0] and risk[1] > risk_level:\n                if threat_level['threat'] == \"Medium\":\n                    threat_level['threat'] = \"High\"\n                    threat_level['confidence'] = \"High\"\n                    #phantom.debug('Risk score found: {} | {} and setting threat to {}'.format(risk[0],risk[1],threat_level['threat']))\n            # Evaluates Risk Label\n            elif risk[0] == item[0] and risk[2] in high_risk:\n                if threat_level['threat'] == \"Medium\":\n                    threat_level['threat'] = \"High\"\n                    threat_level['confidence'] = \"High\"\n                    #phantom.debug('High Risk label found: {} | {} and setting threat to {}'.format(risk[0],risk[2],threat_level['threat']))\n                else:\n                    threat_level['threat'] = \"Medium\"\n                    threat_level['confidence'] = \"Medium\"\n                    #phantom.debug('Medium Risk Label found: {} | {} and setting threat to {}'.format(risk[0],risk[2],threat_level['threat']))\n            elif risk[0] == item[0] and risk[2] in med_risk:\n                if threat_level['threat'] == \"Low\":\n                    threat_level['confidence'] = \"Medium\"\n                    #phantom.debug('Medium Risk Label found: {} | {} and setting threat to {}'.format(risk[0],risk[2],threat_level['threat']))\n            #phantom.debug('Risk analysis update: {} | {}/{} with threat: {} | confidence {}'.format(risk[0],risk[1],risk[2],threat_level['threat'],threat_level['confidence']))\n\n        # Create title for note\n        threat_level['title'] = \"Analysis of Indicator: {} | Threat: {} | Confidence: {}\".format(threat_level['indicator'], threat_level['threat'], threat_level['confidence'])\n        #phantom.debug(threat_level['title'])\n        \n        # Append output value for integration\n        indicator_analysis__analysis.append({\n            'title':threat_level['title'],\n            'indicator':threat_level['indicator'],\n            'confidence':threat_level['confidence'],\n            'threat':threat_level['threat']\n        })\n\n    #phantom.debug('This is indicator analysis below:')\n    #phantom.debug(indicator_analysis__analysis)\n\n",
                        "warn": false,
                        "z": 825
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".functionBlock": {
                                "text": "generate task notes"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "custom function"
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 1
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn_grey.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            }
                        },
                        "block_code": "def generate_task_notes(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('generate_task_notes() called')\n    \n    input_parameter_0 = \"Indicator analysis\"\n    indicator_analysis__analysis = json.loads(phantom.get_run_data(key='indicator_analysis:analysis'))\n    custom_function_results_data_1 = phantom.collect2(container=container, datapath=['merge_urls:custom_function_result.data.*.item'], action_results=results)\n    formatted_data_1 = phantom.get_format_data(name='url_reputation_format__as_list')\n    formatted_data_2 = phantom.get_format_data(name='url_hunt_format__as_list')\n    formatted_data_3 = phantom.get_format_data(name='url_intel_format__as_list')\n    custom_function_results_item_1_0 = [item[0] for item in custom_function_results_data_1]\n\n    generate_task_notes__note_params = None\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n    \n    \"\"\" Maps inputs to processing values and adds debugs for task default template \"\"\"\n    note_params = []\n    \n    \"\"\" Modify for # of notes created per # of indicators example below of 5 means \n        more than 5 indicators found will produce 1 note vs 5 notes. For a maximum of 20 indicators (ip, domain, url, filehash) \"\"\"\n    note_limit = 5\n    \n    # Debug input data\n    #phantom.debug(\"Task Title:\")\n    #phantom.debug(indicator_analysis__analysis)\n    title_data = indicator_analysis__analysis\n        \n    #phantom.debug(\"Reputation Note:\")\n    #phantom.debug(formatted_data_1)\n    rep_data = formatted_data_1\n    \n    #phantom.debug(\"Hunt Note:\")\n    #phantom.debug(formatted_data_2)\n    hunt_data = formatted_data_2\n    \n    #phantom.debug(\"Intelligence Note:\")\n    #phantom.debug(formatted_data_3)\n    intel_data = formatted_data_3\n\n    #phantom.debug(\"Indicator Processed\")\n    #phantom.debug(filtered_artifacts_data_1)\n    indicators = custom_function_results_data_1\n    \n    # Organize Indicators by value with correct data for note insertion\n    for indicator in indicators:\n        for title in title_data:\n            if indicator[0] in title['indicator']:\n                indicator.append(title['title'])\n        for rep in rep_data:\n            if indicator[0] in rep:\n                indicator.append(rep)\n        for hunt in hunt_data:\n            if indicator[0] in hunt:\n                indicator.append(hunt)\n        for intel in intel_data:\n            if indicator[0] in intel:\n                indicator.append(intel)\n\n    phantom.debug(\"Reorganzied note data to indicator.\")\n    #phantom.debug(indicators)\n    \n    # Get workbook phase id\n    phantom.debug('Getting current phase')\n\n    success, message, phase_id, phase_name = phantom.get_phase()\n\n    phantom.debug(\n        'phantom.get_phase results: success: {}, message: {}, phase_id: {}, phase_name: {}'.format(success, message, phase_id, phase_name)\n    )\n    \n    # Task data for adding task notes\n    task_data = {}\n    \n    # Get the tasks for start of the workbook\n    for task in phantom.get_tasks(container=container):\n        ## gets the current phase and 1st task\n        if phase_id == task['data']['phase'] and task['data']['name'] == input_parameter_0:\n            task_data.update(task['data'])\n            phantom.debug('phantom.get_tasks found the task: task_id: {}, task_name: {}'.format(task_data['id'],task_data['name']))\n\n    \"\"\" Create multiple single indicator note or multiple notes (cusotmer defined)\n        Change the indicators length to greater than 5 artifacts if you want more notes created\n        The maximum number of notes you want created is related to the number of indicators present.\"\"\"\n    \n    title = \"Automated URL Indicator Report\"\n    if len(indicators) <= note_limit:\n        # Create loop for creating multiple notes under the same task\n        phantom.debug(\"Found {} indicators.\".format(len(indicators)))\n        phantom.debug(\"Creating Multiple indicator notes.\")\n        for indicator in indicators: \n            title = indicator[1].encode('UTF-8')\n            # Define Note content build here\n            note_content = \"{}\\n {}\\n {}\".format(indicator[4].encode('UTF-8'),indicator[3].encode('UTF-8'),indicator[2].encode('UTF-8'))\n            #phantom.debug(\"Multi-Note content: \\n {}\".format(note_content))\n        \n            # Build note parameters\n            note_params.append({\n                \"note_type\": \"task\",\n                \"task_id\": task_data['id'],\n                \"container_id\": container['id'],\n                \"title\": title,\n                \"content\": note_content,\n                \"note_format\": \"markdown\",\n                \"phase_id\": phase_id\n            })\n    else:\n        phantom.debug(\"Found {} indicators.\".format(len(indicators)))\n        phantom.debug(\"Creating Single indicator notes.\")\n        note_content = \"\"\n        for indicator in indicators: \n            # Define Note content build here\n            note_content += \"## {}\\n {}\\n {}\\n {}\\n\".format(indicator[0].encode('UTF-8'),indicator[3].encode('UTF-8'),indicator[2].encode('UTF-8'),indicator[1].encode('UTF-8'))\n            #phantom.debug(\"Single Note content: \\n {}\".format(note_content))\n\n        # Build note parameters\n        note_params.append({\n            \"note_type\": \"task\",\n            \"task_id\": task_data['id'],\n            \"container_id\": container['id'],\n            \"title\": title,\n            \"content\": note_content,\n            \"note_format\": \"markdown\",\n            \"phase_id\": phase_id\n        })    \n        \n    # Save parameters for REST calls to update\n    #phantom.debug(\"Debug Parameters:\")\n    generate_task_notes__note_params = note_params\n\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n\n    phantom.save_run_data(key='generate_task_notes:note_params', value=json.dumps(generate_task_notes__note_params))\n    create_task_notes(container=container)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "url reputation, hunt url, url intelligence",
                        "connection_type": "action",
                        "customCodeEndLineOffset": 7,
                        "customCodeStartLine": 16,
                        "custom_callback": "",
                        "custom_code": "def generate_task_notes(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('generate_task_notes() called')\n    \n    input_parameter_0 = \"Indicator analysis\"\n    indicator_analysis__analysis = json.loads(phantom.get_run_data(key='indicator_analysis:analysis'))\n    custom_function_results_data_1 = phantom.collect2(container=container, datapath=['merge_list:custom_function_result.data.*.item'], action_results=results)\n    formatted_data_1 = phantom.get_format_data(name='url_reputation_format__as_list')\n    formatted_data_2 = phantom.get_format_data(name='url_hunt_format__as_list')\n    formatted_data_3 = phantom.get_format_data(name='url_intel_format__as_list')\n    custom_function_results_item_1_0 = [item[0] for item in custom_function_results_data_1]\n\n    generate_task_notes__note_params = None\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n    \n    \"\"\" Maps inputs to processing values and adds debugs for task default template \"\"\"\n    note_params = []\n    \n    \"\"\" Modify for # of notes created per # of indicators example below of 5 means \n        more than 5 indicators found will produce 1 note vs 5 notes. For a maximum of 20 indicators (ip, domain, url, filehash) \"\"\"\n    note_limit = 5\n    \n    # Debug input data\n    #phantom.debug(\"Task Title:\")\n    #phantom.debug(indicator_analysis__analysis)\n    title_data = indicator_analysis__analysis\n        \n    #phantom.debug(\"Reputation Note:\")\n    #phantom.debug(formatted_data_1)\n    rep_data = formatted_data_1\n    \n    #phantom.debug(\"Hunt Note:\")\n    #phantom.debug(formatted_data_2)\n    hunt_data = formatted_data_2\n    \n    #phantom.debug(\"Intelligence Note:\")\n    #phantom.debug(formatted_data_3)\n    intel_data = formatted_data_3\n\n    #phantom.debug(\"Indicator Processed\")\n    #phantom.debug(filtered_artifacts_data_1)\n    indicators = custom_function_results_data_1\n    \n    # Organize Indicators by value with correct data for note insertion\n    for indicator in indicators:\n        for title in title_data:\n            if indicator[0] in title['indicator']:\n                indicator.append(title['title'])\n        for rep in rep_data:\n            if indicator[0] in rep:\n                indicator.append(rep)\n        for hunt in hunt_data:\n            if indicator[0] in hunt:\n                indicator.append(hunt)\n        for intel in intel_data:\n            if indicator[0] in intel:\n                indicator.append(intel)\n\n    phantom.debug(\"Reorganzied note data to indicator.\")\n    #phantom.debug(indicators)\n    \n    # Get workbook phase id\n    phantom.debug('Getting current phase')\n\n    success, message, phase_id, phase_name = phantom.get_phase()\n\n    phantom.debug(\n        'phantom.get_phase results: success: {}, message: {}, phase_id: {}, phase_name: {}'.format(success, message, phase_id, phase_name)\n    )\n    \n    # Task data for adding task notes\n    task_data = {}\n    \n    # Get the tasks for start of the workbook\n    for task in phantom.get_tasks(container=container):\n        ## gets the current phase and 1st task\n        if phase_id == task['data']['phase'] and task['data']['name'] == input_parameter_0:\n            task_data.update(task['data'])\n            phantom.debug('phantom.get_tasks found the task: task_id: {}, task_name: {}'.format(task_data['id'],task_data['name']))\n\n    \"\"\" Create multiple single indicator note or multiple notes (cusotmer defined)\n        Change the indicators length to greater than 5 artifacts if you want more notes created\n        The maximum number of notes you want created is related to the number of indicators present.\"\"\"\n    \n    title = \"Automated URL Indicator Report\"\n    if len(indicators) <= note_limit:\n        # Create loop for creating multiple notes under the same task\n        phantom.debug(\"Found {} indicators.\".format(len(indicators)))\n        phantom.debug(\"Creating Multiple indicator notes.\")\n        for indicator in indicators: \n            title = indicator[1].encode('UTF-8')\n            # Define Note content build here\n            note_content = \"{}\\n {}\\n {}\".format(indicator[4].encode('UTF-8'),indicator[3].encode('UTF-8'),indicator[2].encode('UTF-8'))\n            #phantom.debug(\"Multi-Note content: \\n {}\".format(note_content))\n        \n            # Build note parameters\n            note_params.append({\n                \"note_type\": \"task\",\n                \"task_id\": task_data['id'],\n                \"container_id\": container['id'],\n                \"title\": title,\n                \"content\": note_content,\n                \"note_format\": \"markdown\",\n                \"phase_id\": phase_id\n            })\n    else:\n        phantom.debug(\"Found {} indicators.\".format(len(indicators)))\n        phantom.debug(\"Creating Single indicator notes.\")\n        note_content = \"\"\n        for indicator in indicators: \n            # Define Note content build here\n            note_content += \"## {}\\n {}\\n {}\\n {}\\n\".format(indicator[0].encode('UTF-8'),indicator[3].encode('UTF-8'),indicator[2].encode('UTF-8'),indicator[1].encode('UTF-8'))\n            #phantom.debug(\"Single Note content: \\n {}\".format(note_content))\n\n        # Build note parameters\n        note_params.append({\n            \"note_type\": \"task\",\n            \"task_id\": task_data['id'],\n            \"container_id\": container['id'],\n            \"title\": title,\n            \"content\": note_content,\n            \"note_format\": \"markdown\",\n            \"phase_id\": phase_id\n        })    \n        \n    # Save parameters for REST calls to update\n    #phantom.debug(\"Debug Parameters:\")\n    generate_task_notes__note_params = note_params\n\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n\n    phantom.save_run_data(key='generate_task_notes:note_params', value=json.dumps(generate_task_notes__note_params))\n    create_task_notes(container=container)\n\n    return",
                        "custom_join": "",
                        "custom_name": "generate task notes",
                        "description": "Param 0 = Name of the task to update",
                        "functionBlock": "custom function",
                        "has_custom": true,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "f9dc4405-ff78-4e6e-a8d6-986131e4b52f",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 157,
                        "legacy": true,
                        "line_end": 244,
                        "line_start": 104,
                        "message": "Configuring now",
                        "name": "custom function",
                        "notes": "Create task notes:\n\nGets the phase, loops thru all the intel and creates the notes in task \"Analyze Indicator and reputation\" for each indicator found.",
                        "number": 1,
                        "order": 6,
                        "outPorts": [
                            "out"
                        ],
                        "outputVariables": [
                            {
                                "position": 1,
                                "type": "",
                                "value": "note_params"
                            }
                        ],
                        "parameters": [
                            {
                                "position": 0,
                                "type": "",
                                "value": "Indicator analysis"
                            },
                            {
                                "position": 1,
                                "type": "",
                                "value": "indicator_analysis:custom_function:analysis"
                            },
                            {
                                "position": 2,
                                "type": "",
                                "value": "url_reputation_format:formatted_data.*"
                            },
                            {
                                "position": 2,
                                "type": "",
                                "value": "url_hunt_format:formatted_data.*"
                            },
                            {
                                "position": 3,
                                "type": "",
                                "value": "url_intel_format:formatted_data.*"
                            },
                            {
                                "position": 6,
                                "type": "",
                                "value": "merge_urls:custom_function_result.data.*.item"
                            }
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 1120,
                            "y": 0
                        },
                        "previous_function": "",
                        "previous_name": "generate_task_notes",
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "custom function",
                        "status": "deprecating",
                        "title": "custom function",
                        "type": "coa.FunctionBlock",
                        "userGeneratedCode": "    \n    \"\"\" Maps inputs to processing values and adds debugs for task default template \"\"\"\n    note_params = []\n    \n    \"\"\" Modify for # of notes created per # of indicators example below of 5 means \n        more than 5 indicators found will produce 1 note vs 5 notes. For a maximum of 20 indicators (ip, domain, url, filehash) \"\"\"\n    note_limit = 5\n    \n    # Debug input data\n    #phantom.debug(\"Task Title:\")\n    #phantom.debug(indicator_analysis__analysis)\n    title_data = indicator_analysis__analysis\n        \n    #phantom.debug(\"Reputation Note:\")\n    #phantom.debug(formatted_data_1)\n    rep_data = formatted_data_1\n    \n    #phantom.debug(\"Hunt Note:\")\n    #phantom.debug(formatted_data_2)\n    hunt_data = formatted_data_2\n    \n    #phantom.debug(\"Intelligence Note:\")\n    #phantom.debug(formatted_data_3)\n    intel_data = formatted_data_3\n\n    #phantom.debug(\"Indicator Processed\")\n    #phantom.debug(filtered_artifacts_data_1)\n    indicators = custom_function_results_data_1\n    \n    # Organize Indicators by value with correct data for note insertion\n    for indicator in indicators:\n        for title in title_data:\n            if indicator[0] in title['indicator']:\n                indicator.append(title['title'])\n        for rep in rep_data:\n            if indicator[0] in rep:\n                indicator.append(rep)\n        for hunt in hunt_data:\n            if indicator[0] in hunt:\n                indicator.append(hunt)\n        for intel in intel_data:\n            if indicator[0] in intel:\n                indicator.append(intel)\n\n    phantom.debug(\"Reorganzied note data to indicator.\")\n    #phantom.debug(indicators)\n    \n    # Get workbook phase id\n    phantom.debug('Getting current phase')\n\n    success, message, phase_id, phase_name = phantom.get_phase()\n\n    phantom.debug(\n        'phantom.get_phase results: success: {}, message: {}, phase_id: {}, phase_name: {}'.format(success, message, phase_id, phase_name)\n    )\n    \n    # Task data for adding task notes\n    task_data = {}\n    \n    # Get the tasks for start of the workbook\n    for task in phantom.get_tasks(container=container):\n        ## gets the current phase and 1st task\n        if phase_id == task['data']['phase'] and task['data']['name'] == input_parameter_0:\n            task_data.update(task['data'])\n            phantom.debug('phantom.get_tasks found the task: task_id: {}, task_name: {}'.format(task_data['id'],task_data['name']))\n\n    \"\"\" Create multiple single indicator note or multiple notes (cusotmer defined)\n        Change the indicators length to greater than 5 artifacts if you want more notes created\n        The maximum number of notes you want created is related to the number of indicators present.\"\"\"\n    \n    title = \"Automated URL Indicator Report\"\n    if len(indicators) <= note_limit:\n        # Create loop for creating multiple notes under the same task\n        phantom.debug(\"Found {} indicators.\".format(len(indicators)))\n        phantom.debug(\"Creating Multiple indicator notes.\")\n        for indicator in indicators: \n            title = indicator[1].encode('UTF-8')\n            # Define Note content build here\n            note_content = \"{}\\n {}\\n {}\".format(indicator[4].encode('UTF-8'),indicator[3].encode('UTF-8'),indicator[2].encode('UTF-8'))\n            #phantom.debug(\"Multi-Note content: \\n {}\".format(note_content))\n        \n            # Build note parameters\n            note_params.append({\n                \"note_type\": \"task\",\n                \"task_id\": task_data['id'],\n                \"container_id\": container['id'],\n                \"title\": title,\n                \"content\": note_content,\n                \"note_format\": \"markdown\",\n                \"phase_id\": phase_id\n            })\n    else:\n        phantom.debug(\"Found {} indicators.\".format(len(indicators)))\n        phantom.debug(\"Creating Single indicator notes.\")\n        note_content = \"\"\n        for indicator in indicators: \n            # Define Note content build here\n            note_content += \"## {}\\n {}\\n {}\\n {}\\n\".format(indicator[0].encode('UTF-8'),indicator[3].encode('UTF-8'),indicator[2].encode('UTF-8'),indicator[1].encode('UTF-8'))\n            #phantom.debug(\"Single Note content: \\n {}\".format(note_content))\n\n        # Build note parameters\n        note_params.append({\n            \"note_type\": \"task\",\n            \"task_id\": task_data['id'],\n            \"container_id\": container['id'],\n            \"title\": title,\n            \"content\": note_content,\n            \"note_format\": \"markdown\",\n            \"phase_id\": phase_id\n        })    \n        \n    # Save parameters for REST calls to update\n    #phantom.debug(\"Debug Parameters:\")\n    generate_task_notes__note_params = note_params\n\n",
                        "warn": false,
                        "z": 826
                    }
                ]
            },
            "notes": "INPUT: url artifact\nINTERACTION: VirusTotal, RecordedFuture, Whois\nACTION: url reputation, url intelligence, hunt urls\nARTIFACTS:\nP1: get intel and reputation, create a new task and add a note with the summarized intel\nP2: if a total failure report errors"
        },
        "python_version": "3",
        "schema": 4,
        "version": "4.10.3.51237"
    },
    "create_time": "2021-05-11T01:49:46.912666+00:00",
    "draft_mode": false,
    "labels": [
        "*"
    ],
    "tags": []
}