{
    "blockly": false,
    "blockly_xml": "<xml></xml>",
    "category": "ESCU",
    "coa": {
        "data": {
            "clean": true,
            "code_block": "",
            "description": "This playbook processes domains not in bogon_list and creates a task note for every indicator for review by the analyst",
            "hash": "fbd9493c282b095de37823be8f0a24e0897f192c",
            "joint": {
                "cells": [
                    {
                        "0": "S",
                        "1": "T",
                        "2": "A",
                        "3": "R",
                        "4": "T",
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "ref-x": 33,
                                "ref-y": 8,
                                "text": "START"
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.icon image": {
                                "ref-x": 13,
                                "xlink:href": "/inc/coa/img/block_icon_start.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            }
                        },
                        "block_code": "def on_start(container):\n    phantom.debug('on_start() called')\n    \n    # call 'check_domain' block\n    check_domain(container=container)\n\n    return",
                        "callback_code": "# read-only block view not available",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "",
                        "connection_type": "",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "",
                        "description": "",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "0d75d904-721f-445e-a6e1-b1d349bb4515",
                        "inPorts": [],
                        "join_code": "# read-only block view not available",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 16,
                        "line_start": 8,
                        "name": "",
                        "notes": "",
                        "number": 0,
                        "order": 1,
                        "outPorts": [
                            "out"
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": -340,
                            "y": 20
                        },
                        "previous_function": "",
                        "previous_name": "",
                        "show_number": true,
                        "size": {
                            "height": 54,
                            "width": 80
                        },
                        "status": "",
                        "title": "START",
                        "type": "coa.StartEnd",
                        "warn": false,
                        "z": 1
                    },
                    {
                        "0": "E",
                        "1": "N",
                        "2": "D",
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".title": {
                                "text": "END"
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.icon image": {
                                "xlink:href": "/inc/coa/img/block_icon_end.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            }
                        },
                        "block_code": "def on_finish(container, summary):\n    phantom.debug('on_finish() called')\n    # This function is called after all actions are completed.\n    # summary of all the action and/or all details of actions\n    # can be collected here.\n\n    # summary_json = phantom.get_summary()\n    # if 'result' in summary_json:\n        # for action_result in summary_json['result']:\n            # if 'action_run_id' in action_result:\n                # action_results = phantom.get_action_results(action_run_id=action_result['action_run_id'], result_data=False, flatten=False)\n                # phantom.debug(action_results)\n\n    return",
                        "callback_code": "# read-only block view not available",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "create task notes",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "",
                        "description": "",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "6e953e17-9b70-4c48-b2bd-a13c7a29b009",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "# read-only block view not available",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 735,
                        "line_start": 722,
                        "name": "",
                        "notes": "",
                        "number": 0,
                        "order": 18,
                        "outPorts": [],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 1580,
                            "y": 520
                        },
                        "previous_function": "",
                        "previous_name": "",
                        "show_number": true,
                        "size": {
                            "height": 54,
                            "width": 80
                        },
                        "status": "",
                        "title": "END",
                        "type": "coa.StartEnd",
                        "warn": false,
                        "z": 2
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "73526c24-64aa-4846-b4cf-0a8a478c3c81",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "0d75d904-721f-445e-a6e1-b1d349bb4515",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "5e8c9ae4-35bd-49ad-9ea2-ce4ada576dc2",
                            "selector": ".port-body[type=\"input\"]"
                        },
                        "type": "link",
                        "z": 3
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "9c65e76f-b0e0-4627-8a21-5c2bbe8163ed",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "5e8c9ae4-35bd-49ad-9ea2-ce4ada576dc2",
                            "port": "out-1",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "a8167b06-2400-4a02-8e58-0f7cd574953b",
                            "selector": ".port-body[type=\"input\"]"
                        },
                        "type": "link",
                        "z": 6
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "76b7fac7-397a-49c1-b131-45a2f657b097",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "5e8c9ae4-35bd-49ad-9ea2-ce4ada576dc2",
                            "port": "out-2",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(2) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "7e8a5c86-a3a1-46cb-a45f-df00b5475e2e",
                            "selector": ".port-body[type=\"input\"]"
                        },
                        "type": "link",
                        "z": 492
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "e1acb98f-e785-45e7-925c-2e9e3cdb6f7d",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "7e8a5c86-a3a1-46cb-a45f-df00b5475e2e",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "6e953e17-9b70-4c48-b2bd-a13c7a29b009",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 602
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "c7881316-3edf-4dd0-b5f5-568c8250d912",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "c040f191-9789-4f2b-b4ed-6ed6265ea45e",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "9220597e-477b-4a65-bf04-0ea9e9fcd19a",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 645
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "65397ce2-12a8-45c5-9874-fc0c8cbf9645",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "eb0ab619-9008-4139-ade7-729e2f59b66e",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "2e08bb76-1525-4612-ac24-f813b75d0e56",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 646
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "87b55b85-1fea-45bf-af5a-d6c72f9130d9",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "b55b1d28-b59c-49ba-bbe9-fa8be86abe23",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "82869762-2361-42f3-90e8-79b91699e7c5",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 647
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "54fa9a42-04ef-4847-b784-4c1b43634dcb",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "9220597e-477b-4a65-bf04-0ea9e9fcd19a",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "d0fa3a24-a849-473f-a72f-7a8368754ae3",
                            "selector": ".port-body[type=\"input\"]"
                        },
                        "type": "link",
                        "z": 689
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "2d04951c-1dca-4570-b0ec-be2276f22de8",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "2e08bb76-1525-4612-ac24-f813b75d0e56",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "d0fa3a24-a849-473f-a72f-7a8368754ae3",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 693
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "0f413c4a-5ae9-4a91-a376-525d7bd105af",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "82869762-2361-42f3-90e8-79b91699e7c5",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "d0fa3a24-a849-473f-a72f-7a8368754ae3",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 694
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "1303966a-f48b-42a1-a48f-8e51bc72fae2",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "d0fa3a24-a849-473f-a72f-7a8368754ae3",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "f9dc4405-ff78-4e6e-a8d6-986131e4b52f",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 698
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "7d7cc2a5-c86a-4b57-b7bc-71390dce0b26",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "b14b0aac-3ff9-48de-b578-18e7a0585c9d",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "ef98d41d-2ca4-4a9f-9224-6f9d7e179dde",
                            "selector": ".port-body[type=\"input\"]"
                        },
                        "type": "link",
                        "z": 706
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "f0a8e4ca-fdad-4807-be61-79ff2095daa1",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "ef98d41d-2ca4-4a9f-9224-6f9d7e179dde",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "d0fa3a24-a849-473f-a72f-7a8368754ae3",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 708
                    },
                    {
                        "action": "hunt domain",
                        "action_type": "investigate",
                        "active": false,
                        "active_keys": {},
                        "active_values": {
                            "domain": "merge_domains:custom_function_result.data.*.item"
                        },
                        "angle": 0,
                        "app": "",
                        "appid": "",
                        "approver": "",
                        "assets": [
                            {
                                "action": "hunt domain",
                                "actions": [
                                    "test connectivity",
                                    "detonate file",
                                    "detonate online file",
                                    "detonate url",
                                    "check url hash",
                                    "check status",
                                    "get report",
                                    "get file",
                                    "get pcap",
                                    "get file from url",
                                    "hunt url",
                                    "hunt domain",
                                    "hunt malware family",
                                    "hunt file",
                                    "hunt hash",
                                    "hunt ip",
                                    "hunt similar",
                                    "search terms"
                                ],
                                "active": true,
                                "app_name": "Falcon Sandbox",
                                "app_version": "1.1.6",
                                "appid": "8383852c-43dc-4356-ac81-4e6dd65ee23e",
                                "asset_name": "hybrid-analysis-personal",
                                "config_type": "asset",
                                "count": 0,
                                "fields": {
                                    "domain": "merge_domains:custom_function_result.data.*.item"
                                },
                                "has_app": true,
                                "id": 179,
                                "loaded": false,
                                "missing": false,
                                "name": "hybrid-analysis-personal",
                                "output": [
                                    {
                                        "data_path": "action_result.status",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.message",
                                        "data_type": "string"
                                    },
                                    {
                                        "column_name": "Submit Name",
                                        "column_order": 0,
                                        "contains": [
                                            "file name"
                                        ],
                                        "data_path": "action_result.data.*.submit_name",
                                        "data_type": "string"
                                    },
                                    {
                                        "column_name": "Job Id",
                                        "column_order": 1,
                                        "contains": [
                                            "falcon sandbox job id"
                                        ],
                                        "data_path": "action_result.data.*.job_id",
                                        "data_type": "string"
                                    },
                                    {
                                        "column_name": "Sample Sha256",
                                        "column_order": 2,
                                        "contains": [
                                            "sha256"
                                        ],
                                        "data_path": "action_result.data.*.sha256",
                                        "data_type": "string"
                                    },
                                    {
                                        "column_name": "Environment",
                                        "column_order": 3,
                                        "data_path": "action_result.data.*.environment",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.type",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.environment_id",
                                        "data_type": "numeric"
                                    },
                                    {
                                        "data_path": "action_result.data.*.environment_description",
                                        "data_type": "string"
                                    },
                                    {
                                        "column_name": "Verdict",
                                        "column_order": 4,
                                        "contains": [
                                            "falcon sandbox verdict"
                                        ],
                                        "data_path": "action_result.data.*.verdict",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.threat_score",
                                        "data_type": "string"
                                    },
                                    {
                                        "column_name": "Threat Score",
                                        "column_order": 5,
                                        "data_path": "action_result.data.*.threat_score_verbose",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.summary.found",
                                        "data_type": "numeric"
                                    },
                                    {
                                        "data_path": "action_result.summary.found_by_verdict_name.unknown",
                                        "data_type": "numeric"
                                    },
                                    {
                                        "data_path": "action_result.summary.found_by_verdict_name.no_verdict",
                                        "data_type": "numeric"
                                    },
                                    {
                                        "data_path": "action_result.summary.found_by_verdict_name.no_specific_threat",
                                        "data_type": "numeric"
                                    },
                                    {
                                        "data_path": "action_result.summary.found_by_verdict_name.whitelisted",
                                        "data_type": "numeric"
                                    },
                                    {
                                        "data_path": "action_result.summary.found_by_verdict_name.suspicious",
                                        "data_type": "numeric"
                                    },
                                    {
                                        "data_path": "action_result.summary.found_by_verdict_name.malicious",
                                        "data_type": "numeric"
                                    },
                                    {
                                        "contains": [
                                            "domain"
                                        ],
                                        "data_path": "action_result.parameter.domain",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "summary.total_objects",
                                        "data_type": "numeric"
                                    },
                                    {
                                        "data_path": "summary.total_objects_successful",
                                        "data_type": "numeric"
                                    }
                                ],
                                "parameters": {
                                    "domain": {
                                        "contains": [
                                            "domain"
                                        ],
                                        "data_type": "string",
                                        "default": null,
                                        "description": "Domain e.g. checkip.dyndns.org",
                                        "key": "domain",
                                        "order": 0,
                                        "primary": true,
                                        "required": true
                                    }
                                },
                                "product_name": "Falcon Sandbox",
                                "product_vendor": "Hybrid Analysis",
                                "targets": "179",
                                "type": "sandbox"
                            }
                        ],
                        "attrs": {
                            ".action": {
                                "text": "hunt domain"
                            },
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "Investigate"
                            },
                            "g.approver image": {
                                "opacity": 1
                            },
                            "g.code image": {
                                "opacity": 1
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.icon image": {
                                "xlink:href": "/inc/coa/img/block_icon_investigate.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            },
                            "g.timer image": {
                                "opacity": 1
                            }
                        },
                        "block_code": "def hunt_domain(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('hunt_domain() called')\n        \n    #phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))\n    \n    # collect data for 'hunt_domain' call\n    custom_function_results_data_1 = phantom.collect2(container=container, datapath=['merge_domains:custom_function_result.data.*.item'], action_results=results)\n\n    parameters = []\n    \n    # build parameters list for 'hunt_domain' call\n    for custom_function_results_item_1 in custom_function_results_data_1:\n        if custom_function_results_item_1[0]:\n            parameters.append({\n                'domain': custom_function_results_item_1[0],\n            })\n\n    phantom.act(action=\"hunt domain\", parameters=parameters, assets=['hybrid-analysis-personal'], callback=domain_hunt_format, name=\"hunt_domain\")\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": true,
                        "color": "",
                        "connected_to_start": true,
                        "connection_name": "merge domains",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "hunt domain",
                        "delay": 0,
                        "description": "",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "b14b0aac-3ff9-48de-b578-18e7a0585c9d",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 593,
                        "line_start": 572,
                        "message": "Configuring now",
                        "name": "hunt domain",
                        "notes": "Create detonated information format for note",
                        "number": 1,
                        "order": 13,
                        "outPorts": [
                            "out"
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 340,
                            "y": 280
                        },
                        "previous_function": "",
                        "previous_name": "hunt_domain",
                        "required_params": {
                            "domain": true
                        },
                        "reviewer": "",
                        "show_number": false,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "action_assets",
                        "status": "",
                        "title": "Investigate",
                        "type": "coa.Action",
                        "warn": false,
                        "z": 748
                    },
                    {
                        "action": "domain intelligence",
                        "action_type": "investigate",
                        "active": false,
                        "active_keys": {},
                        "active_values": {
                            "domain": "merge_domains:custom_function_result.data.*.item"
                        },
                        "angle": 0,
                        "app": "",
                        "appid": "",
                        "approver": "",
                        "assets": [
                            {
                                "action": "domain intelligence",
                                "actions": [
                                    "ip reputation",
                                    "ip intelligence",
                                    "domain reputation",
                                    "domain intelligence",
                                    "file reputation",
                                    "file intelligence",
                                    "vulnerability reputation",
                                    "vulnerability intelligence",
                                    "url reputation",
                                    "url intelligence",
                                    "alert rule lookup",
                                    "alert data lookup",
                                    "test connectivity"
                                ],
                                "active": true,
                                "app_name": "Recorded Future",
                                "app_version": "1.2.0",
                                "appid": "6efe0e1b-76ac-4ffd-8fa0-ac58fd6efd77",
                                "asset_name": "recorded_future_500",
                                "config_type": "asset",
                                "count": 0,
                                "fields": {
                                    "domain": "merge_domains:custom_function_result.data.*.item"
                                },
                                "has_app": true,
                                "id": 19,
                                "loaded": false,
                                "missing": false,
                                "name": "recorded future",
                                "output": [
                                    {
                                        "contains": [
                                            "recordedfuture result status"
                                        ],
                                        "data_path": "action_result.status",
                                        "data_type": "string",
                                        "example_values": [
                                            "success",
                                            "failed"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "domain"
                                        ],
                                        "data_path": "action_result.parameter.domain",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "recordedfuture entity id"
                                        ],
                                        "data_path": "action_result.data.*.entity.id",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "domain"
                                        ],
                                        "data_path": "action_result.data.*.entity.name",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "recordedfuture entity type"
                                        ],
                                        "data_path": "action_result.data.*.entity.type",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "recordedfuture intelligence card url"
                                        ],
                                        "data_path": "action_result.data.*.intelCard",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "recordedfuture metrics type"
                                        ],
                                        "data_path": "action_result.data.*.metrics.*.type",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "recordedfuture metrics value"
                                        ],
                                        "data_path": "action_result.data.*.metrics.*.value",
                                        "data_type": "numeric"
                                    },
                                    {
                                        "contains": [
                                            "recordedfuture related entities count"
                                        ],
                                        "data_path": "action_result.data.*.relatedEntities.*.entities.*.count",
                                        "data_type": "numeric"
                                    },
                                    {
                                        "contains": [
                                            "recordedfuture entity id"
                                        ],
                                        "data_path": "action_result.data.*.relatedEntities.*.entities.*.entity.id",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "recordedfuture entity name"
                                        ],
                                        "data_path": "action_result.data.*.relatedEntities.*.entities.*.entity.name",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "recordedfuture entity type"
                                        ],
                                        "data_path": "action_result.data.*.relatedEntities.*.entities.*.entity.type",
                                        "data_type": "string",
                                        "example_values": [
                                            "Hash"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "recordedfuture related entity type"
                                        ],
                                        "data_path": "action_result.data.*.relatedEntities.*.type",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "recordedfuture risk criticality"
                                        ],
                                        "data_path": "action_result.data.*.risk.criticality",
                                        "data_type": "numeric"
                                    },
                                    {
                                        "contains": [
                                            "recordedfuture risk criticality label"
                                        ],
                                        "data_path": "action_result.data.*.risk.criticalityLabel",
                                        "data_type": "string",
                                        "example_values": [
                                            "Very Malicious"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "recordedfuture risk criticality"
                                        ],
                                        "data_path": "action_result.data.*.risk.evidenceDetails.*.criticality",
                                        "data_type": "numeric"
                                    },
                                    {
                                        "contains": [
                                            "recordedfuture risk criticality label"
                                        ],
                                        "data_path": "action_result.data.*.risk.evidenceDetails.*.criticalityLabel",
                                        "data_type": "string",
                                        "example_values": [
                                            "Unusual"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "recordedfuture evidence string"
                                        ],
                                        "data_path": "action_result.data.*.risk.evidenceDetails.*.evidenceString",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "recordedfuture mitigation string"
                                        ],
                                        "data_path": "action_result.data.*.risk.evidenceDetails.*.mitigationString",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "recordedfuture evidence rule"
                                        ],
                                        "data_path": "action_result.data.*.risk.evidenceDetails.*.rule",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "recordedfuture evidence timestamp"
                                        ],
                                        "data_path": "action_result.data.*.risk.evidenceDetails.*.timestamp",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "recordedfuture risk string"
                                        ],
                                        "data_path": "action_result.data.*.risk.riskString",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "recordedfuture risk summary"
                                        ],
                                        "data_path": "action_result.data.*.risk.riskSummary",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "recordedfuture risk rules"
                                        ],
                                        "data_path": "action_result.data.*.risk.rules",
                                        "data_type": "numeric"
                                    },
                                    {
                                        "contains": [
                                            "recordedfuture risk score"
                                        ],
                                        "data_path": "action_result.data.*.risk.score",
                                        "data_type": "numeric"
                                    },
                                    {
                                        "contains": [
                                            "recordedfuture threatlist description"
                                        ],
                                        "data_path": "action_result.data.*.threatLists.*.description",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "recordedfuture threatlist id"
                                        ],
                                        "data_path": "action_result.data.*.threatLists.*.id",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "recordedfuture threatlist name"
                                        ],
                                        "data_path": "action_result.data.*.threatLists.*.name",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "recordedfuture threatlist type"
                                        ],
                                        "data_path": "action_result.data.*.threatLists.*.type",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "recordedfuture evidence firstseen"
                                        ],
                                        "data_path": "action_result.data.*.timestamps.firstSeen",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "recordedfuture evidence lastseen"
                                        ],
                                        "data_path": "action_result.data.*.timestamps.lastSeen",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "recordedfuture risk criticality label"
                                        ],
                                        "data_path": "action_result.summary.criticalityLabel",
                                        "data_type": "string",
                                        "example_values": [
                                            "Very Malicious"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "recordedfuture evidence lastseen"
                                        ],
                                        "data_path": "action_result.summary.lastSeen",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "recordedfuture risk summary"
                                        ],
                                        "data_path": "action_result.summary.riskSummary",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "recordedfuture result message"
                                        ],
                                        "data_path": "action_result.message",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "recordedfuture total objects"
                                        ],
                                        "data_path": "summary.total_objects",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "recordedfuture total objects successful"
                                        ],
                                        "data_path": "summary.total_objects_successful",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1
                                        ]
                                    }
                                ],
                                "parameters": {
                                    "domain": {
                                        "contains": [
                                            "domain"
                                        ],
                                        "data_type": "string",
                                        "default": null,
                                        "description": "Domain to query",
                                        "key": "domain",
                                        "order": 0,
                                        "primary": true,
                                        "required": true
                                    }
                                },
                                "product_name": "Recorded Future App for Phantom",
                                "product_vendor": "Recorded Future, Inc",
                                "targets": "19",
                                "type": "reputation"
                            }
                        ],
                        "attrs": {
                            ".action": {
                                "text": "domain intelligence"
                            },
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "Investigate"
                            },
                            "g.approver image": {
                                "opacity": 1
                            },
                            "g.code image": {
                                "opacity": 1
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.icon image": {
                                "xlink:href": "/inc/coa/img/block_icon_investigate.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            },
                            "g.timer image": {
                                "opacity": 1
                            }
                        },
                        "block_code": "def domain_intelligence(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('domain_intelligence() called')\n        \n    #phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))\n    \n    # collect data for 'domain_intelligence' call\n    custom_function_results_data_1 = phantom.collect2(container=container, datapath=['merge_domains:custom_function_result.data.*.item'], action_results=results)\n\n    parameters = []\n    \n    # build parameters list for 'domain_intelligence' call\n    for custom_function_results_item_1 in custom_function_results_data_1:\n        if custom_function_results_item_1[0]:\n            parameters.append({\n                'domain': custom_function_results_item_1[0],\n            })\n\n    phantom.act(action=\"domain intelligence\", parameters=parameters, assets=['recorded future'], callback=domain_intel_format, name=\"domain_intelligence\")\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": true,
                        "color": "",
                        "connected_to_start": true,
                        "connection_name": "merge domains",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "domain intelligence",
                        "delay": 0,
                        "description": "",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "b55b1d28-b59c-49ba-bbe9-fa8be86abe23",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 359,
                        "line_start": 338,
                        "message": "Configuring now",
                        "name": "domain intelligence",
                        "notes": "Get domain intelligence information",
                        "number": 1,
                        "order": 10,
                        "outPorts": [
                            "out"
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 340,
                            "y": 420
                        },
                        "previous_function": "",
                        "previous_name": "domain_intelligence",
                        "required_params": {
                            "domain": true
                        },
                        "reviewer": "",
                        "show_number": false,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "action_assets",
                        "status": "",
                        "title": "Investigate",
                        "type": "coa.Action",
                        "warn": false,
                        "z": 774
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".format": {
                                "text": "domain whois format"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out-1": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out-1>.port-body": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "format"
                            },
                            "g.code image": {
                                "opacity": 1
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            }
                        },
                        "block_code": "def domain_whois_format(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('domain_whois_format() called')\n    \n    template = \"\"\"%%\n### Whois Registration of {0} : *Updated Date: {1}*\n\n- Registrar: {2}\n- Expiration: {3}\n- Creation: {4}\n\n----\n%%\"\"\"\n\n    # parameter list for template variable replacement\n    parameters = [\n        \"whois_domain:action_result.parameter.domain\",\n        \"whois_domain:action_result.data.*.updated_date\",\n        \"whois_domain:action_result.data.*.registrar\",\n        \"whois_domain:action_result.data.*.expiration_date\",\n        \"whois_domain:action_result.data.*.creation_date\",\n    ]\n\n    phantom.format(container=container, template=template, parameters=parameters, name=\"domain_whois_format\")\n\n    join_indicator_analysis(container=container)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "whois domain",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "domain whois format",
                        "description": "",
                        "format": "format",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "9220597e-477b-4a65-bf04-0ea9e9fcd19a",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 262,
                        "line_start": 234,
                        "message": "Configuring now",
                        "name": "format",
                        "notes": "Create whois format of data",
                        "number": 3,
                        "order": 6,
                        "outPorts": [
                            "out-1"
                        ],
                        "parameters": [
                            {
                                "position": 0,
                                "type": "",
                                "value": "whois_domain:action_result.parameter.domain"
                            },
                            {
                                "position": 1,
                                "type": "",
                                "value": "whois_domain:action_result.data.*.updated_date"
                            },
                            {
                                "position": 1,
                                "type": "",
                                "value": "whois_domain:action_result.data.*.registrar"
                            },
                            {
                                "position": 3,
                                "type": "",
                                "value": "whois_domain:action_result.data.*.expiration_date"
                            },
                            {
                                "position": 4,
                                "type": "",
                                "value": "whois_domain:action_result.data.*.creation_date"
                            }
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 580,
                            "y": 0
                        },
                        "previous_function": "",
                        "previous_name": "domain_whois_format",
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "format",
                        "status": "",
                        "template": "%%\n### Whois Registration of {0} : *Updated Date: {1}*\n\n- Registrar: {2}\n- Expiration: {3}\n- Creation: {4}\n\n----\n%%",
                        "title": "format",
                        "type": "coa.Format",
                        "warn": false,
                        "z": 788
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "56141426-4229-4e1b-b09a-9dd1bacb8636",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "7f4e43b2-15cc-438c-b423-14e3a40d7858",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "6e953e17-9b70-4c48-b2bd-a13c7a29b009",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 803
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "api": "add comment",
                        "attrs": {
                            ".api": {
                                "text": "missing data comment"
                            },
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "API"
                            },
                            "g.code image": {
                                "opacity": 1
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            }
                        },
                        "block_code": "def missing_data_comment(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('missing_data_comment() called')\n\n    phantom.comment(container=container, comment=\"Missing indicator to execute Indicator Analysis - Domain playbook.  Check logic and playbook parameters\")\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "color": "",
                        "configured": [
                            {
                                "addCommentComment": "Missing indicator to execute Indicator Analysis - Domain playbook.  Check logic and playbook parameters",
                                "key": "add-comment"
                            }
                        ],
                        "connected_to_start": true,
                        "connection_name": "",
                        "connection_type": "",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "missing data comment",
                        "description": "",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "7e8a5c86-a3a1-46cb-a45f-df00b5475e2e",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 338,
                        "line_start": 331,
                        "message": "Configuring now",
                        "name": "add comment",
                        "notes": "Adds a missing data comment",
                        "number": 3,
                        "order": 9,
                        "outPorts": [
                            "out"
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": -120,
                            "y": 500
                        },
                        "previous_function": "",
                        "previous_name": "missing_data_comment",
                        "show_number": false,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "api",
                        "status": "",
                        "title": "API",
                        "type": "coa.API",
                        "warn": false,
                        "z": 808
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".functionBlock": {
                                "text": "indicator analysis"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "custom function"
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 1
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn_grey.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            }
                        },
                        "block_code": "def indicator_analysis(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('indicator_analysis() called')\n    \n    results_data_1 = phantom.collect2(container=container, datapath=['domain_reputation:action_result.parameter.domain', 'domain_reputation:action_result.summary.downloaded_samples'], action_results=results)\n    results_data_2 = phantom.collect2(container=container, datapath=['hunt_domain:action_result.parameter.domain', 'hunt_domain:action_result.summary.found', 'hunt_domain:action_result.summary.found_by_verdict_name.malicious'], action_results=results)\n    results_data_3 = phantom.collect2(container=container, datapath=['domain_intelligence:action_result.parameter.domain', 'domain_intelligence:action_result.data.*.risk.score', 'domain_intelligence:action_result.data.*.risk.criticality'], action_results=results)\n    custom_function_results_data_1 = phantom.collect2(container=container, datapath=['merge_domains:custom_function_result.data.*.item'], action_results=results)\n    results_item_1_0 = [item[0] for item in results_data_1]\n    results_item_1_1 = [item[1] for item in results_data_1]\n    results_item_2_0 = [item[0] for item in results_data_2]\n    results_item_2_1 = [item[1] for item in results_data_2]\n    results_item_2_2 = [item[2] for item in results_data_2]\n    results_item_3_0 = [item[0] for item in results_data_3]\n    results_item_3_1 = [item[1] for item in results_data_3]\n    results_item_3_2 = [item[2] for item in results_data_3]\n    custom_function_results_item_1_0 = [item[0] for item in custom_function_results_data_1]\n\n    indicator_analysis__analysis = None\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n\n    # Debug data inputs \n    \n    #phantom.debug(\"IP data)\n    #phantom.debug(custom_function_results_data_1)\n    indicator = custom_function_results_data_1\n    \n    #phantom.debug(\"Reputation data\")\n    #phantom.debug(results_data_1)\n    rep_data = results_data_1\n    \n    #phantom.debug(\"Detonated data\")\n    #phantom.debug(results_data_2)\n    hunt_data = results_data_2\n    \n    #phantom.debug(\"Intel Risk Data\")\n    #phantom.debug(results_data_3)\n    risk_data = results_data_3\n    \n    # Prepare objects for finished analysis\n    indicator_analysis__analysis = []\n    threat_level = {\n        'title':\"\",\n        'indicator':\"\",\n        'confidence':\"Low\",\n        'threat':\"Low\"\n        }\n\n    \"\"\" Calculations for Intelligence Assessment\n    Get the result information and performs the following calculation:\n\n    Threat: Values = \"High\", \"Med\", \"Low\"\n    Type of validation from source\n        High: VT >5 detected downloaded samples, Hybrid-Analysis Found Domain References >5  AND RF= Very Malicious, Malicious, Risk score >50 OR FEYE Detection\n        Med: (VT >5 detected downloaded samples, Hybrid-Analysis Found Domain References >5 AND/OR RF= Unusual, Suspicious, Risk score <50) OR FEYE Detection\n        Low: VT >5 detected downloaded samples, Hybrid-Analysis Found Domain References >5 OR RF= Unusual, Suspicious, Risk score <50\n\n    Confidence: Detection on # of sources\n        High >2 Sources or Finished Intel\n        Med  =2 Sources\n        Low  <1 Source\n    \"\"\"\n    rep_level = 5\n    risk_level = 50\n    high_risk = ['Very Malicious','Malicious']\n    med_risk = [\"Suspicious\", 'Unusual']\n    \n    for item in indicator:\n        threat_level['indicator'] = item[0]\n        phantom.debug('Analyzing indicator: {}'.format(threat_level['indicator']))\n        # Evaluates Reputation data\n        for rep in rep_data:\n            #phantom.debug(rep)\n            #phantom.debug('Indicator found: {} | rep value: {}'.format(rep[0],rep[1]))\n            if rep[0] == item[0] and rep[1] >= rep_level:\n                threat_level['threat'] = \"Medium\"\n                #phantom.debug('Reputation indicator found: {} | {} and setting threat to {}'.format(rep[0],rep[1],threat_level['threat']))\n            #phantom.debug('Reputation analysis update: {} | {} with threat: {} | confidence: {}'.format(rep[0],rep[1],threat_level['threat'],threat_level['confidence']))\n            \n        for hunt in hunt_data:\n            #phantom.debug(detonate)\n            #phantom.debug('Indicator found: {} | rep value: {}'.format(rep[0],rep[1]))\n            if hunt[0] == item[0] and (hunt[1] >= rep_level or hunt[2] in ['Suspicious']):\n                threat_level['threat'] = \"Medium\"\n                threat_level['confidence'] = \"Medium\"\n                #phantom.debug('Hunt Medium indicator found: {} | {} and setting threat to {}'.format(rep[0],rep[1],threat_level['threat']))\n            elif hunt[0] == item[0] and hunt[2] in ['Malicious']:\n                threat_level['threat'] = \"High\"\n                threat_level['confidence'] = \"Medium\"\n                #phantom.debug('Hunt High indicator found: {} | {} and setting threat to {}'.format(rep[0],rep[1],threat_level['threat']))\n            #phantom.debug('Hunt analysis update: {} | {} with threat: {} | confidence: {}'.format(rep[0],rep[1],threat_level['threat'],threat_level['confidence']))\n                \n        # Evaluate risk score or label\n        for risk in risk_data:\n            # Evaluates Risk Score\n            #phantom.debug(risk)\n            if risk[0] == item[0] and risk[1] > risk_level:\n                if threat_level['threat'] == \"Medium\":\n                    threat_level['threat'] = \"High\"\n                    threat_level['confidence'] = \"High\"\n                    #phantom.debug('Risk score High found: {} | {} and setting threat to {}'.format(risk[0],risk[1],threat_level['threat']))\n            # Evaluates Risk Label\n            elif risk[0] == item[0] and risk[2] in high_risk:\n                if threat_level['threat'] == \"Medium\":\n                    threat_level['threat'] = \"High\"\n                    threat_level['confidence'] = \"High\"\n                    #phantom.debug('High Risk label High/High found: {} | {} and setting threat to {}'.format(risk[0],risk[2],threat_level['threat']))\n                else:\n                    threat_level['threat'] = \"Medium\"\n                    threat_level['confidence'] = \"Medium\"\n                    #phantom.debug('Medium Risk Label Medium found: {} | {} and setting threat to {}'.format(risk[0],risk[2],threat_level['threat']))\n            elif risk[0] == item[0] and risk[2] in med_risk:\n                if threat_level['threat'] == \"Low\":\n                    threat_level['confidence'] = \"Medium\"\n                    #phantom.debug('Medium Risk Low/Medium Label found: {} | {} and setting threat to {}'.format(risk[0],risk[2],threat_level['threat']))\n            #phantom.debug('Risk analysis update: {} | {}/{} with threat: {} | confidence {}'.format(risk[0],risk[1],risk[2],threat_level['threat'],threat_level['confidence']))\n\n        # Create title for note\n        threat_level['title'] = \"Analysis of Indicator: {} | Threat: {} | Confidence: {} \".format(threat_level['indicator'], threat_level['threat'], threat_level['confidence'])\n        phantom.debug(threat_level['title'])\n        \n        # Append output value for integration\n        indicator_analysis__analysis.append({\n            'title':threat_level['title'],\n            'indicator':threat_level['indicator'],\n            'confidence':threat_level['confidence'],\n            'threat':threat_level['threat']\n        })\n\n    #phantom.debug('This is indicator analysis below:')\n    #phantom.debug(indicator_analysis__analysis)\n\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n\n    phantom.save_run_data(key='indicator_analysis:analysis', value=json.dumps(indicator_analysis__analysis))\n    generate_task_notes(container=container)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "whois domain, domain reputation, domain intelligence, hunt domain",
                        "connection_type": "action",
                        "customCodeEndLineOffset": 7,
                        "customCodeStartLine": 22,
                        "custom_callback": "",
                        "custom_code": "def indicator_analysis(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('indicator_analysis() called')\n    \n    results_data_1 = phantom.collect2(container=container, datapath=['domain_reputation:action_result.parameter.domain', 'domain_reputation:action_result.data.*.detected_downloaded_samples.*.positives'], action_results=results)\n    results_data_2 = phantom.collect2(container=container, datapath=['hunt_domain:action_result.parameter.domain', 'hunt_domain:action_result.summary.found', 'hunt_domain:action_result.summary.found_by_verdict_name.malicious'], action_results=results)\n    results_data_3 = phantom.collect2(container=container, datapath=['domain_intelligence:action_result.parameter.domain', 'domain_intelligence:action_result.data.*.risk.score', 'domain_intelligence:action_result.data.*.risk.criticality'], action_results=results)\n    custom_function_results_data_1 = phantom.collect2(container=container, datapath=['merge_list:custom_function_result.data.*.item'], action_results=results)\n    results_item_1_0 = [item[0] for item in results_data_1]\n    results_item_1_1 = [item[1] for item in results_data_1]\n    results_item_2_0 = [item[0] for item in results_data_2]\n    results_item_2_1 = [item[1] for item in results_data_2]\n    results_item_2_2 = [item[2] for item in results_data_2]\n    results_item_3_0 = [item[0] for item in results_data_3]\n    results_item_3_1 = [item[1] for item in results_data_3]\n    results_item_3_2 = [item[2] for item in results_data_3]\n    custom_function_results_item_1_0 = [item[0] for item in custom_function_results_data_1]\n\n    indicator_analysis__analysis = None\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n\n    # Debug data inputs \n    \n    #phantom.debug(\"IP data)\n    #phantom.debug(custom_function_results_data_1)\n    indicator = custom_function_results_data_1\n    \n    #phantom.debug(\"Reputation data\")\n    #phantom.debug(results_data_1)\n    rep_data = results_data_1\n    \n    #phantom.debug(\"Detonated data\")\n    #phantom.debug(results_data_2)\n    hunt_data = results_data_2\n    \n    #phantom.debug(\"Intel Risk Data\")\n    #phantom.debug(results_data_3)\n    risk_data = results_data_3\n    \n    # Prepare objects for finished analysis\n    indicator_analysis__analysis = []\n    threat_level = {\n        'title':\"\",\n        'indicator':\"\",\n        'confidence':\"Low\",\n        'threat':\"Low\"\n        }\n\n    \"\"\" Calculations for Intelligence Assessment\n    Get the result information and performs the following calculation:\n\n    Threat: Values = \"High\", \"Med\", \"Low\"\n    Type of validation from source\n        High: VT >5 detected downloaded samples, Hybrid-Analysis Found Domain References >5  AND RF= Very Malicious, Malicious, Risk score >50 OR FEYE Detection\n        Med: (VT >5 detected downloaded samples, Hybrid-Analysis Found Domain References >5 AND/OR RF= Unusual, Suspicious, Risk score <50) OR FEYE Detection\n        Low: VT >5 detected downloaded samples, Hybrid-Analysis Found Domain References >5 OR RF= Unusual, Suspicious, Risk score <50\n\n    Confidence: Detection on # of sources\n        High >2 Sources or Finished Intel\n        Med  =2 Sources\n        Low  <1 Source\n    \"\"\"\n    rep_level = 5\n    risk_level = 50\n    high_risk = ['Very Malicious','Malicious']\n    med_risk = [\"Suspicious\", 'Unusual']\n    \n    for item in indicator:\n        threat_level['indicator'] = item[0]\n        phantom.debug('Analyzing indicator: {}'.format(threat_level['indicator']))\n        # Evaluates Reputation data\n        for rep in rep_data:\n            #phantom.debug(rep)\n            #phantom.debug('Indicator found: {} | rep value: {}'.format(rep[0],rep[1]))\n            if rep[0] == item[0] and rep[1] >= rep_level:\n                threat_level['threat'] = \"Medium\"\n                #phantom.debug('Reputation indicator found: {} | {} and setting threat to {}'.format(rep[0],rep[1],threat_level['threat']))\n            #phantom.debug('Reputation analysis update: {} | {} with threat: {} | confidence: {}'.format(rep[0],rep[1],threat_level['threat'],threat_level['confidence']))\n            \n        for hunt in hunt_data:\n            #phantom.debug(detonate)\n            #phantom.debug('Indicator found: {} | rep value: {}'.format(rep[0],rep[1]))\n            if hunt[0] == item[0] and (hunt[1] >= rep_level or hunt[2] in ['Suspicious']):\n                threat_level['threat'] = \"Medium\"\n                threat_level['confidence'] = \"Medium\"\n                #phantom.debug('Hunt Medium indicator found: {} | {} and setting threat to {}'.format(rep[0],rep[1],threat_level['threat']))\n            elif hunt[0] == item[0] and hunt[2] in ['Malicious']:\n                threat_level['threat'] = \"High\"\n                threat_level['confidence'] = \"Medium\"\n                #phantom.debug('Hunt High indicator found: {} | {} and setting threat to {}'.format(rep[0],rep[1],threat_level['threat']))\n            #phantom.debug('Hunt analysis update: {} | {} with threat: {} | confidence: {}'.format(rep[0],rep[1],threat_level['threat'],threat_level['confidence']))\n                \n        # Evaluate risk score or label\n        for risk in risk_data:\n            # Evaluates Risk Score\n            #phantom.debug(risk)\n            if risk[0] == item[0] and risk[1] > risk_level:\n                if threat_level['threat'] == \"Medium\":\n                    threat_level['threat'] = \"High\"\n                    threat_level['confidence'] = \"High\"\n                    #phantom.debug('Risk score High found: {} | {} and setting threat to {}'.format(risk[0],risk[1],threat_level['threat']))\n            # Evaluates Risk Label\n            elif risk[0] == item[0] and risk[2] in high_risk:\n                if threat_level['threat'] == \"Medium\":\n                    threat_level['threat'] = \"High\"\n                    threat_level['confidence'] = \"High\"\n                    #phantom.debug('High Risk label High/High found: {} | {} and setting threat to {}'.format(risk[0],risk[2],threat_level['threat']))\n                else:\n                    threat_level['threat'] = \"Medium\"\n                    threat_level['confidence'] = \"Medium\"\n                    #phantom.debug('Medium Risk Label Medium found: {} | {} and setting threat to {}'.format(risk[0],risk[2],threat_level['threat']))\n            elif risk[0] == item[0] and risk[2] in med_risk:\n                if threat_level['threat'] == \"Low\":\n                    threat_level['confidence'] = \"Medium\"\n                    #phantom.debug('Medium Risk Low/Medium Label found: {} | {} and setting threat to {}'.format(risk[0],risk[2],threat_level['threat']))\n            #phantom.debug('Risk analysis update: {} | {}/{} with threat: {} | confidence {}'.format(risk[0],risk[1],risk[2],threat_level['threat'],threat_level['confidence']))\n\n        # Create title for note\n        threat_level['title'] = \"Analysis of Indicator: {} | Threat: {} | Confidence: {} \".format(threat_level['indicator'], threat_level['threat'], threat_level['confidence'])\n        phantom.debug(threat_level['title'])\n        \n        # Append output value for integration\n        indicator_analysis__analysis.append({\n            'title':threat_level['title'],\n            'indicator':threat_level['indicator'],\n            'confidence':threat_level['confidence'],\n            'threat':threat_level['threat']\n        })\n\n    #phantom.debug('This is indicator analysis below:')\n    #phantom.debug(indicator_analysis__analysis)\n\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n\n    phantom.save_run_data(key='indicator_analysis:analysis', value=json.dumps(indicator_analysis__analysis))\n    generate_task_notes(container=container)\n\n    return",
                        "custom_join": "",
                        "custom_name": "indicator analysis",
                        "description": "See the doc type in the source code for calculation parameters for this indicator",
                        "functionBlock": "custom function",
                        "has_custom": true,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "d0fa3a24-a849-473f-a72f-7a8368754ae3",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "def join_indicator_analysis(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None):\n    phantom.debug('join_indicator_analysis() called')\n\n    # check if all connected incoming playbooks, actions, or custom functions are done i.e. have succeeded or failed\n    if phantom.completed(action_names=['whois_domain', 'domain_reputation', 'domain_intelligence', 'hunt_domain']):\n        \n        # call connected block \"indicator_analysis\"\n        indicator_analysis(container=container, handle=handle)\n    \n    return",
                        "join_optional": [],
                        "join_start": 561,
                        "legacy": true,
                        "line_end": 572,
                        "line_start": 418,
                        "message": "Configuring now",
                        "name": "custom function",
                        "notes": "Provide an analysis of the indicator based on the vendor provided threat assessment with the number of sources and confidence in that assessment by the prevalence of the indicator in more than one occurrence.",
                        "number": 2,
                        "order": 12,
                        "outPorts": [
                            "out"
                        ],
                        "outputVariables": [
                            {
                                "position": 0,
                                "type": "",
                                "value": "analysis"
                            }
                        ],
                        "parameters": [
                            {
                                "position": 0,
                                "type": "",
                                "value": "merge_domains:custom_function_result.data.*.item"
                            },
                            {
                                "position": 1,
                                "type": "",
                                "value": "domain_reputation:action_result.parameter.domain"
                            },
                            {
                                "position": 2,
                                "type": "",
                                "value": "domain_reputation:action_result.summary.downloaded_samples"
                            },
                            {
                                "position": 3,
                                "type": "",
                                "value": "hunt_domain:action_result.parameter.domain"
                            },
                            {
                                "position": 4,
                                "type": "",
                                "value": "hunt_domain:action_result.summary.found"
                            },
                            {
                                "position": 5,
                                "type": "",
                                "value": "hunt_domain:action_result.summary.found_by_verdict_name.malicious"
                            },
                            {
                                "position": 6,
                                "type": "",
                                "value": "domain_intelligence:action_result.parameter.domain"
                            },
                            {
                                "position": 7,
                                "type": "",
                                "value": "domain_intelligence:action_result.data.*.risk.score"
                            },
                            {
                                "position": 8,
                                "type": "",
                                "value": "domain_intelligence:action_result.data.*.risk.criticality"
                            }
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 840,
                            "y": 0
                        },
                        "previous_function": "",
                        "previous_name": "indicator_analysis",
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "custom function",
                        "status": "deprecating",
                        "title": "custom function",
                        "type": "coa.FunctionBlock",
                        "userGeneratedCode": "\n    # Debug data inputs \n    \n    #phantom.debug(\"IP data)\n    #phantom.debug(custom_function_results_data_1)\n    indicator = custom_function_results_data_1\n    \n    #phantom.debug(\"Reputation data\")\n    #phantom.debug(results_data_1)\n    rep_data = results_data_1\n    \n    #phantom.debug(\"Detonated data\")\n    #phantom.debug(results_data_2)\n    hunt_data = results_data_2\n    \n    #phantom.debug(\"Intel Risk Data\")\n    #phantom.debug(results_data_3)\n    risk_data = results_data_3\n    \n    # Prepare objects for finished analysis\n    indicator_analysis__analysis = []\n    threat_level = {\n        'title':\"\",\n        'indicator':\"\",\n        'confidence':\"Low\",\n        'threat':\"Low\"\n        }\n\n    \"\"\" Calculations for Intelligence Assessment\n    Get the result information and performs the following calculation:\n\n    Threat: Values = \"High\", \"Med\", \"Low\"\n    Type of validation from source\n        High: VT >5 detected downloaded samples, Hybrid-Analysis Found Domain References >5  AND RF= Very Malicious, Malicious, Risk score >50 OR FEYE Detection\n        Med: (VT >5 detected downloaded samples, Hybrid-Analysis Found Domain References >5 AND/OR RF= Unusual, Suspicious, Risk score <50) OR FEYE Detection\n        Low: VT >5 detected downloaded samples, Hybrid-Analysis Found Domain References >5 OR RF= Unusual, Suspicious, Risk score <50\n\n    Confidence: Detection on # of sources\n        High >2 Sources or Finished Intel\n        Med  =2 Sources\n        Low  <1 Source\n    \"\"\"\n    rep_level = 5\n    risk_level = 50\n    high_risk = ['Very Malicious','Malicious']\n    med_risk = [\"Suspicious\", 'Unusual']\n    \n    for item in indicator:\n        threat_level['indicator'] = item[0]\n        phantom.debug('Analyzing indicator: {}'.format(threat_level['indicator']))\n        # Evaluates Reputation data\n        for rep in rep_data:\n            #phantom.debug(rep)\n            #phantom.debug('Indicator found: {} | rep value: {}'.format(rep[0],rep[1]))\n            if rep[0] == item[0] and rep[1] >= rep_level:\n                threat_level['threat'] = \"Medium\"\n                #phantom.debug('Reputation indicator found: {} | {} and setting threat to {}'.format(rep[0],rep[1],threat_level['threat']))\n            #phantom.debug('Reputation analysis update: {} | {} with threat: {} | confidence: {}'.format(rep[0],rep[1],threat_level['threat'],threat_level['confidence']))\n            \n        for hunt in hunt_data:\n            #phantom.debug(detonate)\n            #phantom.debug('Indicator found: {} | rep value: {}'.format(rep[0],rep[1]))\n            if hunt[0] == item[0] and (hunt[1] >= rep_level or hunt[2] in ['Suspicious']):\n                threat_level['threat'] = \"Medium\"\n                threat_level['confidence'] = \"Medium\"\n                #phantom.debug('Hunt Medium indicator found: {} | {} and setting threat to {}'.format(rep[0],rep[1],threat_level['threat']))\n            elif hunt[0] == item[0] and hunt[2] in ['Malicious']:\n                threat_level['threat'] = \"High\"\n                threat_level['confidence'] = \"Medium\"\n                #phantom.debug('Hunt High indicator found: {} | {} and setting threat to {}'.format(rep[0],rep[1],threat_level['threat']))\n            #phantom.debug('Hunt analysis update: {} | {} with threat: {} | confidence: {}'.format(rep[0],rep[1],threat_level['threat'],threat_level['confidence']))\n                \n        # Evaluate risk score or label\n        for risk in risk_data:\n            # Evaluates Risk Score\n            #phantom.debug(risk)\n            if risk[0] == item[0] and risk[1] > risk_level:\n                if threat_level['threat'] == \"Medium\":\n                    threat_level['threat'] = \"High\"\n                    threat_level['confidence'] = \"High\"\n                    #phantom.debug('Risk score High found: {} | {} and setting threat to {}'.format(risk[0],risk[1],threat_level['threat']))\n            # Evaluates Risk Label\n            elif risk[0] == item[0] and risk[2] in high_risk:\n                if threat_level['threat'] == \"Medium\":\n                    threat_level['threat'] = \"High\"\n                    threat_level['confidence'] = \"High\"\n                    #phantom.debug('High Risk label High/High found: {} | {} and setting threat to {}'.format(risk[0],risk[2],threat_level['threat']))\n                else:\n                    threat_level['threat'] = \"Medium\"\n                    threat_level['confidence'] = \"Medium\"\n                    #phantom.debug('Medium Risk Label Medium found: {} | {} and setting threat to {}'.format(risk[0],risk[2],threat_level['threat']))\n            elif risk[0] == item[0] and risk[2] in med_risk:\n                if threat_level['threat'] == \"Low\":\n                    threat_level['confidence'] = \"Medium\"\n                    #phantom.debug('Medium Risk Low/Medium Label found: {} | {} and setting threat to {}'.format(risk[0],risk[2],threat_level['threat']))\n            #phantom.debug('Risk analysis update: {} | {}/{} with threat: {} | confidence {}'.format(risk[0],risk[1],risk[2],threat_level['threat'],threat_level['confidence']))\n\n        # Create title for note\n        threat_level['title'] = \"Analysis of Indicator: {} | Threat: {} | Confidence: {} \".format(threat_level['indicator'], threat_level['threat'], threat_level['confidence'])\n        phantom.debug(threat_level['title'])\n        \n        # Append output value for integration\n        indicator_analysis__analysis.append({\n            'title':threat_level['title'],\n            'indicator':threat_level['indicator'],\n            'confidence':threat_level['confidence'],\n            'threat':threat_level['threat']\n        })\n\n    #phantom.debug('This is indicator analysis below:')\n    #phantom.debug(indicator_analysis__analysis)\n\n",
                        "warn": false,
                        "z": 811
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "api": "set status",
                        "attrs": {
                            ".api": {
                                "text": "set status to new"
                            },
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "API"
                            },
                            "g.code image": {
                                "opacity": 1
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            }
                        },
                        "block_code": "def set_status_to_new(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('set_status_to_new() called')\n\n    phantom.set_status(container=container, status=\"New\")\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "color": "",
                        "configured": [
                            {
                                "key": "set-status",
                                "setStatusStatus": "New",
                                "setStatusStatus_display": "New"
                            }
                        ],
                        "connected_to_start": true,
                        "connection_name": "create task notes",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "set status to new",
                        "description": "",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "7f4e43b2-15cc-438c-b423-14e3a40d7858",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 635,
                        "line_start": 628,
                        "message": "Configuring now",
                        "name": "set status",
                        "notes": "Sets the status to new signalling the ready for the analyst.",
                        "number": 4,
                        "order": 15,
                        "outPorts": [
                            "out"
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 1100,
                            "y": 140
                        },
                        "previous_function": "",
                        "previous_name": "set_status_to_new",
                        "show_number": false,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "api",
                        "status": "",
                        "title": "API",
                        "type": "coa.API",
                        "warn": false,
                        "z": 814
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "57fabeed-ec3c-4fcf-a4e5-5e05f5038586",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "f9dc4405-ff78-4e6e-a8d6-986131e4b52f",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "ac9bc6ad-6200-434f-96ad-8c223ea7f177",
                            "selector": ".port-body[type=\"input\"]"
                        },
                        "type": "link",
                        "z": 816
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "67c7bf97-53e1-4ae2-96dd-e322b3d3d1d7",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "ac9bc6ad-6200-434f-96ad-8c223ea7f177",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "7f4e43b2-15cc-438c-b423-14e3a40d7858",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 821
                    },
                    {
                        "action": "post data",
                        "action_type": "generic",
                        "active": false,
                        "active_keys": {},
                        "active_values": {
                            "body": "generate_task_notes:custom_function:note_params",
                            "headers": "",
                            "location": "/note/",
                            "verify_certificate": "False"
                        },
                        "angle": 0,
                        "app": "",
                        "appid": "",
                        "approver": "",
                        "assets": [
                            {
                                "action": "post data",
                                "actions": [
                                    "post data",
                                    "get data",
                                    "get options",
                                    "get headers",
                                    "delete data",
                                    "patch data",
                                    "put data",
                                    "test connectivity"
                                ],
                                "active": true,
                                "app_name": "HTTP",
                                "app_version": "2.1.15",
                                "appid": "290b7499-0374-4930-9cdc-5e9b05d65827",
                                "asset_name": "phantom_rest_api",
                                "config_type": "asset",
                                "count": 0,
                                "fields": {
                                    "body": "generate_task_notes:custom_function:note_params",
                                    "headers": "",
                                    "location": "/note/",
                                    "verify_certificate": "False"
                                },
                                "has_app": true,
                                "id": 215,
                                "loaded": false,
                                "missing": false,
                                "name": "phantom_rest_api",
                                "output": [
                                    {
                                        "data_path": "action_result.status",
                                        "data_type": "string",
                                        "example_values": [
                                            "failed"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.parameter.body",
                                        "data_type": "numeric",
                                        "example_values": [
                                            "{\"name\": \"Bad IP\"}"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.parameter.headers",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.parameter.location",
                                        "data_type": "string",
                                        "example_values": [
                                            "/rest/assets"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.parameter.verify_certificate",
                                        "data_type": "boolean",
                                        "example_values": [
                                            "false"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "url"
                                        ],
                                        "data_path": "action_result.data.*.location",
                                        "data_type": "string",
                                        "example_values": [
                                            "http://192.168.1.26/rest/assets"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.method",
                                        "data_type": "string",
                                        "example_values": [
                                            "POST"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.parsed_response_body",
                                        "data_type": "string",
                                        "example_values": [
                                            "{\"failed\": true, \"message\": \"Requested item not found\"}"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.response_body",
                                        "data_type": "string",
                                        "example_values": [
                                            "{\"failed\": true, \"message\": \"Requested item not found\"}"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.response_headers",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.summary.reason",
                                        "data_type": "string",
                                        "example_values": [
                                            "Not Found"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.summary.status_code",
                                        "data_type": "numeric",
                                        "example_values": [
                                            404
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.message",
                                        "data_type": "string",
                                        "example_values": [
                                            "Can't process response from server. Status Code: 404 Data from server: {\"failed\": true, \"message\": \"Requested item not found\"}"
                                        ]
                                    },
                                    {
                                        "data_path": "summary.total_objects",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1
                                        ]
                                    },
                                    {
                                        "data_path": "summary.total_objects_successful",
                                        "data_type": "numeric",
                                        "example_values": [
                                            0
                                        ]
                                    }
                                ],
                                "parameters": {
                                    "body": {
                                        "data_type": "string",
                                        "default": null,
                                        "description": "POST body (query string, JSON, etc.)",
                                        "key": "body",
                                        "order": 1,
                                        "required": true
                                    },
                                    "headers": {
                                        "data_type": "string",
                                        "default": null,
                                        "description": "Additional headers (JSON object with headers)",
                                        "key": "headers",
                                        "order": 2,
                                        "required": false
                                    },
                                    "location": {
                                        "data_type": "string",
                                        "default": null,
                                        "description": "Location (e.g. path/to/endpoint)",
                                        "key": "location",
                                        "order": 0,
                                        "required": true
                                    },
                                    "verify_certificate": {
                                        "data_type": "boolean",
                                        "default": null,
                                        "description": "Verify certificates (if using HTTPS)",
                                        "key": "verify_certificate",
                                        "order": 2,
                                        "required": true
                                    }
                                },
                                "product_name": "HTTP",
                                "product_vendor": "Generic",
                                "targets": "215",
                                "type": "information"
                            }
                        ],
                        "attrs": {
                            ".action": {
                                "text": "create task notes"
                            },
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "Generic"
                            },
                            "g.approver image": {
                                "opacity": 1
                            },
                            "g.code image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_code_dark_on.svg"
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.icon image": {
                                "xlink:href": "/inc/coa/img/block_icon_generic.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            },
                            "g.timer image": {
                                "opacity": 1
                            }
                        },
                        "block_code": "def create_task_notes(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('create_task_notes() called')\n        \n    #phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))\n    \n    generate_task_notes__note_params = json.loads(phantom.get_run_data(key='generate_task_notes:note_params'))\n    # collect data for 'create_task_notes' call\n\n    parameters = []\n    \n    # build parameters list for 'create_task_notes' call\n    parameters.append({\n        'location': \"/note/\",\n        'body': generate_task_notes__note_params,\n        'headers': \"\",\n        'verify_certificate': False,\n    })\n\n    phantom.act(action=\"post data\", parameters=parameters, assets=['phantom_rest_api'], callback=set_status_to_new, name=\"create_task_notes\")\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": true,
                        "color": "",
                        "connected_to_start": true,
                        "connection_name": "whois domain, domain reputation, domain intelligence, hunt domain",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "def create_task_notes(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('create_task_notes() called')\n        \n    #phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))\n    \n    generate_task_notes__note_params = json.loads(phantom.get_run_data(key='generate_task_notes:note_params'))\n    # collect data for 'create_task_notes' call\n\n    parameters = []\n    \n    # build parameters list for 'create_task_notes' call\n    for note_params in generate_task_notes__note_params:\n        parameters.append({\n            'location': \"/note/\",\n            'body': json.dumps(note_params),\n            'headers': \"\",\n            'verify_certificate': False,\n        })\n\n    phantom.act(action=\"post data\", parameters=parameters, assets=['phantom_rest_api'], callback=set_status_to_new, name=\"create_task_notes\")\n\n    return",
                        "custom_join": "",
                        "custom_name": "create task notes",
                        "delay": 0,
                        "description": "Customized the block with a for loop to loop thru the created notes parameters.\n\ncustom code:\n    # build parameters list for 'create_task_notes' call\n    for note_params in generate_task_notes__note_params:\n        parameters.append({\n            'body': json.dumps(note_params),\n            'headers': \"\",\n            'location': \"/note/\",\n            'verify_certificate': False,\n        })",
                        "has_custom": true,
                        "has_custom_block": true,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "ac9bc6ad-6200-434f-96ad-8c223ea7f177",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 671,
                        "line_start": 648,
                        "message": "Configuring now",
                        "name": "post data",
                        "notes": "Creates workbook task notes that correspond to the tasks created with the appropriate automated analysis\n",
                        "number": 3,
                        "order": 16,
                        "outPorts": [
                            "out"
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 860,
                            "y": 140
                        },
                        "previous_function": "",
                        "previous_name": "create_task_notes",
                        "required_params": {
                            "body": true,
                            "location": true,
                            "verify_certificate": true
                        },
                        "reviewer": "",
                        "show_number": false,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "action_assets",
                        "status": "",
                        "title": "Generic",
                        "type": "coa.Action",
                        "warn": false,
                        "z": 824
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".functionBlock": {
                                "text": "generate task notes"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "custom function"
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 1
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn_grey.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            }
                        },
                        "block_code": "def generate_task_notes(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('generate_task_notes() called')\n    \n    input_parameter_0 = \"Indicator analysis\"\n    indicator_analysis__analysis = json.loads(phantom.get_run_data(key='indicator_analysis:analysis'))\n    custom_function_results_data_1 = phantom.collect2(container=container, datapath=['merge_domains:custom_function_result.data.*.item'], action_results=results)\n    formatted_data_1 = phantom.get_format_data(name='domain_whois_format__as_list')\n    formatted_data_2 = phantom.get_format_data(name='domain_reputation_format__as_list')\n    formatted_data_3 = phantom.get_format_data(name='domain_hunt_format__as_list')\n    formatted_data_4 = phantom.get_format_data(name='domain_intel_format__as_list')\n    custom_function_results_item_1_0 = [item[0] for item in custom_function_results_data_1]\n\n    generate_task_notes__note_params = None\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n    \n    \"\"\" Maps inputs to processing values and adds debugs for task default template \"\"\"\n    note_params = []\n    \n    \"\"\" Modify for # of notes created per # of indicators example below of 5 means \n        more than 5 indicators found will produce 1 note vs 5 notes. For a maximum of 20 indicators (ip, domain, url, filehash) \"\"\"\n    note_limit = 5\n    \n    # debug input data\n    #phantom.debug(\"Note Title:\")\n    #phantom.debug(indicator_analysis__analysis)\n    title_data = indicator_analysis__analysis\n        \n    #phantom.debug(\"Whois Note:\")\n    #phantom.debug(formatted_data_1)\n    whois_data = formatted_data_1\n    \n    #phantom.debug(\"Reputation Note:\")\n    #phantom.debug(formatted_data_2)\n    rep_data = formatted_data_2\n    \n    #phantom.debug(\"Hunt Note:\")\n    #phantom.debug(formatted_data_3)\n    hunt_data = formatted_data_3\n    \n    #phantom.debug(\"Intelligence Note:\")\n    #phantom.debug(formatted_data_4)\n    intel_data = formatted_data_4\n    \n    phantom.debug(\"Processing Indicators\")\n    #phantom.debug(custom_function_results_data_1)\n    indicators = custom_function_results_data_1\n    \n    # Organize IOCs by value with correct data for note insertion\n    for indicator in indicators:\n        for title in title_data:\n            if indicator[0] in title['indicator']:\n                indicator.append(title['title'])\n        for whois in whois_data:\n            if indicator[0] in whois:\n                indicator.append(whois)\n        for rep in rep_data:\n            if indicator[0] in rep:\n                indicator.append(rep)\n        for hunt in hunt_data:\n            if indicator[0] in hunt:\n                indicator.append(hunt)\n        for intel in intel_data:\n            if indicator[0] in intel:\n                indicator.append(intel)\n    \n    phantom.debug(\"Reorganzied indicator data for notes.\")\n    #phantom.debug(indicators)\n    \n    # Get workbook phase id\n    phantom.debug('Getting current phase')\n\n    success, message, phase_id, phase_name = phantom.get_phase()\n\n    phantom.debug(\n        'phantom.get_phase results: success: {}, message: {}, phase_id: {}, phase_name: {}'.format(success, message, phase_id, phase_name)\n    )\n    \n    # Task data for adding task notes\n    task_data = {}\n    \n    # Get the tasks for start of the workbook\n    for task in phantom.get_tasks(container=container):\n        ## gets the current phase and 1st task\n        if phase_id == task['data']['phase'] and task['data']['name'] == input_parameter_0:\n            task_data.update(task['data'])\n            phantom.debug('phantom.get_tasks found the task: task_id: {}, task_name: {}'.format(task_data['id'],task_data['name']))\n\n    \"\"\" Create multiple single indicator note or multiple notes (cusotmer defined)\n        Change the indicators length to greater than 5 artifacts if you want more notes created\n        The maximum number of notes you want created is related to the number of indicators present.\"\"\"\n    \n    title = \"Automated Domain Indicator Report\"\n    if len(indicators) <= note_limit:\n        # Create loop for creating multiple notes under the same task\n        phantom.debug(\"Found {} indicators.\".format(len(indicators)))\n        phantom.debug(\"Creating Multiple indicator notes.\")\n        for indicator in indicators: \n            title = indicator[1].encode('UTF-8')\n            # Define Note content build here\n            note_content = \"{}\\n {}\\n {}\\n {}\".format(indicator[5].encode('UTF-8'),indicator[4].encode('UTF-8'),indicator[3].encode('UTF-8'),indicator[2].encode('UTF-8'))\n            #phantom.debug(\"Multi-Note content: \\n {}\".format(note_content))\n        \n            # Build note parameters\n            note_params.append({\n                \"note_type\": \"task\",\n                \"task_id\": task_data['id'],\n                \"container_id\": container['id'],\n                \"title\": title,\n                \"content\": note_content,\n                \"note_format\": \"markdown\",\n                \"phase_id\": phase_id\n            })\n    else:\n        phantom.debug(\"Found {} indicators.\".format(len(indicators)))\n        phantom.debug(\"Creating Single indicator notes.\")\n        note_content = \"\"\n        for indicator in indicators: \n            # Define Note content build here\n            note_content += \"## {}\\n {}\\n {}\\n {}\\n {}\\n\".format(indicator[1].encode('UTF-8'),indicator[5].encode('UTF-8'),indicator[4].encode('UTF-8'),indicator[3].encode('UTF-8'),indicator[2].encode('UTF-8'))\n            #phantom.debug(\"Single Note content: \\n {}\".format(note_content))\n\n        # Build note parameters\n        note_params.append({\n            \"note_type\": \"task\",\n            \"task_id\": task_data['id'],\n            \"container_id\": container['id'],\n            \"title\": title,\n            \"content\": note_content,\n            \"note_format\": \"markdown\",\n            \"phase_id\": phase_id\n        })    \n        \n    # Save parameters for REST calls to update\n    #phantom.debug(\"Debug Parameters:\")\n    generate_task_notes__note_params = note_params\n\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n\n    phantom.save_run_data(key='generate_task_notes:note_params', value=json.dumps(generate_task_notes__note_params))\n    create_task_notes(container=container)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "whois domain, domain reputation, domain intelligence, hunt domain",
                        "connection_type": "action",
                        "customCodeEndLineOffset": 7,
                        "customCodeStartLine": 17,
                        "custom_callback": "",
                        "custom_code": "def generate_task_notes(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('generate_task_notes() called')\n    \n    input_parameter_0 = \"Indicator Analysis\"\n    indicator_analysis__analysis = json.loads(phantom.get_run_data(key='indicator_analysis:analysis'))\n    custom_function_results_data_1 = phantom.collect2(container=container, datapath=['merge_list:custom_function_result.data.*.item'], action_results=results)\n    formatted_data_1 = phantom.get_format_data(name='domain_whois_format__as_list')\n    formatted_data_2 = phantom.get_format_data(name='domain_reputation_format__as_list')\n    formatted_data_3 = phantom.get_format_data(name='domain_hunt_format__as_list')\n    formatted_data_4 = phantom.get_format_data(name='domain_intel_format__as_list')\n    custom_function_results_item_1_0 = [item[0] for item in custom_function_results_data_1]\n\n    generate_task_notes__note_params = None\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n    \n    \"\"\" Maps inputs to processing values and adds debugs for task default template \"\"\"\n    note_params = []\n    \n    \"\"\" Modify for # of notes created per # of indicators example below of 5 means \n        more than 5 indicators found will produce 1 note vs 5 notes. For a maximum of 20 indicators (ip, domain, url, filehash) \"\"\"\n    note_limit = 5\n    \n    # debug input data\n    #phantom.debug(\"Note Title:\")\n    #phantom.debug(indicator_analysis__analysis)\n    title_data = indicator_analysis__analysis\n        \n    #phantom.debug(\"Whois Note:\")\n    #phantom.debug(formatted_data_1)\n    whois_data = formatted_data_1\n    \n    #phantom.debug(\"Reputation Note:\")\n    #phantom.debug(formatted_data_2)\n    rep_data = formatted_data_2\n    \n    #phantom.debug(\"Hunt Note:\")\n    #phantom.debug(formatted_data_3)\n    hunt_data = formatted_data_3\n    \n    #phantom.debug(\"Intelligence Note:\")\n    #phantom.debug(formatted_data_4)\n    intel_data = formatted_data_4\n    \n    phantom.debug(\"Processing Indicators\")\n    #phantom.debug(custom_function_results_data_1)\n    indicators = custom_function_results_data_1\n    \n    # Organize IOCs by value with correct data for note insertion\n    for indicator in indicators:\n        for title in title_data:\n            if indicator[0] in title['indicator']:\n                indicator.append(title['title'])\n        for whois in whois_data:\n            if indicator[0] in whois:\n                indicator.append(whois)\n        for rep in rep_data:\n            if indicator[0] in rep:\n                indicator.append(rep)\n        for hunt in hunt_data:\n            if indicator[0] in hunt:\n                indicator.append(hunt)\n        for intel in intel_data:\n            if indicator[0] in intel:\n                indicator.append(intel)\n    \n    phantom.debug(\"Reorganzied indicator data for notes.\")\n    #phantom.debug(indicators)\n    \n    # Get workbook phase id\n    phantom.debug('Getting current phase')\n\n    success, message, phase_id, phase_name = phantom.get_phase()\n\n    phantom.debug(\n        'phantom.get_phase results: success: {}, message: {}, phase_id: {}, phase_name: {}'.format(success, message, phase_id, phase_name)\n    )\n    \n    # Task data for adding task notes\n    task_data = {}\n    \n    # Get the tasks for start of the workbook\n    for task in phantom.get_tasks(container=container):\n        ## gets the current phase and 1st task\n        if phase_id == task['data']['phase'] and task['data']['name'] == input_parameter_0:\n            task_data.update(task['data'])\n            phantom.debug('phantom.get_tasks found the task: task_id: {}, task_name: {}'.format(task_data['id'],task_data['name']))\n\n    \"\"\" Create multiple single indicator note or multiple notes (cusotmer defined)\n        Change the indicators length to greater than 5 artifacts if you want more notes created\n        The maximum number of notes you want created is related to the number of indicators present.\"\"\"\n    \n    title = \"Automated Domain Indicator Report\"\n    if len(indicators) <= note_limit:\n        # Create loop for creating multiple notes under the same task\n        phantom.debug(\"Found {} indicators.\".format(len(indicators)))\n        phantom.debug(\"Creating Multiple indicator notes.\")\n        for indicator in indicators: \n            title = indicator[1].encode('UTF-8')\n            # Define Note content build here\n            note_content = \"{}\\n {}\\n {}\\n {}\".format(indicator[5].encode('UTF-8'),indicator[4].encode('UTF-8'),indicator[3].encode('UTF-8'),indicator[2].encode('UTF-8'))\n            #phantom.debug(\"Multi-Note content: \\n {}\".format(note_content))\n        \n            # Build note parameters\n            note_params.append({\n                \"note_type\": \"task\",\n                \"task_id\": task_data['id'],\n                \"container_id\": container['id'],\n                \"title\": title,\n                \"content\": note_content,\n                \"note_format\": \"markdown\",\n                \"phase_id\": phase_id\n            })\n    else:\n        phantom.debug(\"Found {} indicators.\".format(len(indicators)))\n        phantom.debug(\"Creating Single indicator notes.\")\n        note_content = \"\"\n        for indicator in indicators: \n            # Define Note content build here\n            note_content += \"## {}\\n {}\\n {}\\n {}\\n {}\\n\".format(indicator[1].encode('UTF-8'),indicator[5].encode('UTF-8'),indicator[4].encode('UTF-8'),indicator[3].encode('UTF-8'),indicator[2].encode('UTF-8'))\n            #phantom.debug(\"Single Note content: \\n {}\".format(note_content))\n\n        # Build note parameters\n        note_params.append({\n            \"note_type\": \"task\",\n            \"task_id\": task_data['id'],\n            \"container_id\": container['id'],\n            \"title\": title,\n            \"content\": note_content,\n            \"note_format\": \"markdown\",\n            \"phase_id\": phase_id\n        })    \n        \n    # Save parameters for REST calls to update\n    #phantom.debug(\"Debug Parameters:\")\n    generate_task_notes__note_params = note_params\n\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n\n    phantom.save_run_data(key='generate_task_notes:note_params', value=json.dumps(generate_task_notes__note_params))\n    create_task_notes(container=container)\n\n    return",
                        "custom_join": "",
                        "custom_name": "generate task notes",
                        "description": "",
                        "functionBlock": "custom function",
                        "has_custom": true,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "f9dc4405-ff78-4e6e-a8d6-986131e4b52f",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 157,
                        "legacy": true,
                        "line_end": 234,
                        "line_start": 86,
                        "message": "Configuring now",
                        "name": "custom function",
                        "notes": "Create task notes:\n\nGets the phase, loops thru all the intel and creates the notes in task \"Indicator Analysis\" for each indicator found.",
                        "number": 1,
                        "order": 5,
                        "outPorts": [
                            "out"
                        ],
                        "outputVariables": [
                            {
                                "position": 1,
                                "type": "",
                                "value": "note_params"
                            }
                        ],
                        "parameters": [
                            {
                                "position": 0,
                                "type": "",
                                "value": "Indicator analysis"
                            },
                            {
                                "position": 1,
                                "type": "",
                                "value": "indicator_analysis:custom_function:analysis"
                            },
                            {
                                "position": 2,
                                "type": "",
                                "value": "domain_whois_format:formatted_data.*"
                            },
                            {
                                "position": 3,
                                "type": "",
                                "value": "domain_reputation_format:formatted_data.*"
                            },
                            {
                                "position": 3,
                                "type": "",
                                "value": "domain_hunt_format:formatted_data.*"
                            },
                            {
                                "position": 4,
                                "type": "",
                                "value": "domain_intel_format:formatted_data.*"
                            },
                            {
                                "position": 6,
                                "type": "",
                                "value": "merge_domains:custom_function_result.data.*.item"
                            }
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 1100,
                            "y": 0
                        },
                        "previous_function": "",
                        "previous_name": "generate_task_notes",
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "custom function",
                        "status": "deprecating",
                        "title": "custom function",
                        "type": "coa.FunctionBlock",
                        "userGeneratedCode": "    \n    \"\"\" Maps inputs to processing values and adds debugs for task default template \"\"\"\n    note_params = []\n    \n    \"\"\" Modify for # of notes created per # of indicators example below of 5 means \n        more than 5 indicators found will produce 1 note vs 5 notes. For a maximum of 20 indicators (ip, domain, url, filehash) \"\"\"\n    note_limit = 5\n    \n    # debug input data\n    #phantom.debug(\"Note Title:\")\n    #phantom.debug(indicator_analysis__analysis)\n    title_data = indicator_analysis__analysis\n        \n    #phantom.debug(\"Whois Note:\")\n    #phantom.debug(formatted_data_1)\n    whois_data = formatted_data_1\n    \n    #phantom.debug(\"Reputation Note:\")\n    #phantom.debug(formatted_data_2)\n    rep_data = formatted_data_2\n    \n    #phantom.debug(\"Hunt Note:\")\n    #phantom.debug(formatted_data_3)\n    hunt_data = formatted_data_3\n    \n    #phantom.debug(\"Intelligence Note:\")\n    #phantom.debug(formatted_data_4)\n    intel_data = formatted_data_4\n    \n    phantom.debug(\"Processing Indicators\")\n    #phantom.debug(custom_function_results_data_1)\n    indicators = custom_function_results_data_1\n    \n    # Organize IOCs by value with correct data for note insertion\n    for indicator in indicators:\n        for title in title_data:\n            if indicator[0] in title['indicator']:\n                indicator.append(title['title'])\n        for whois in whois_data:\n            if indicator[0] in whois:\n                indicator.append(whois)\n        for rep in rep_data:\n            if indicator[0] in rep:\n                indicator.append(rep)\n        for hunt in hunt_data:\n            if indicator[0] in hunt:\n                indicator.append(hunt)\n        for intel in intel_data:\n            if indicator[0] in intel:\n                indicator.append(intel)\n    \n    phantom.debug(\"Reorganzied indicator data for notes.\")\n    #phantom.debug(indicators)\n    \n    # Get workbook phase id\n    phantom.debug('Getting current phase')\n\n    success, message, phase_id, phase_name = phantom.get_phase()\n\n    phantom.debug(\n        'phantom.get_phase results: success: {}, message: {}, phase_id: {}, phase_name: {}'.format(success, message, phase_id, phase_name)\n    )\n    \n    # Task data for adding task notes\n    task_data = {}\n    \n    # Get the tasks for start of the workbook\n    for task in phantom.get_tasks(container=container):\n        ## gets the current phase and 1st task\n        if phase_id == task['data']['phase'] and task['data']['name'] == input_parameter_0:\n            task_data.update(task['data'])\n            phantom.debug('phantom.get_tasks found the task: task_id: {}, task_name: {}'.format(task_data['id'],task_data['name']))\n\n    \"\"\" Create multiple single indicator note or multiple notes (cusotmer defined)\n        Change the indicators length to greater than 5 artifacts if you want more notes created\n        The maximum number of notes you want created is related to the number of indicators present.\"\"\"\n    \n    title = \"Automated Domain Indicator Report\"\n    if len(indicators) <= note_limit:\n        # Create loop for creating multiple notes under the same task\n        phantom.debug(\"Found {} indicators.\".format(len(indicators)))\n        phantom.debug(\"Creating Multiple indicator notes.\")\n        for indicator in indicators: \n            title = indicator[1].encode('UTF-8')\n            # Define Note content build here\n            note_content = \"{}\\n {}\\n {}\\n {}\".format(indicator[5].encode('UTF-8'),indicator[4].encode('UTF-8'),indicator[3].encode('UTF-8'),indicator[2].encode('UTF-8'))\n            #phantom.debug(\"Multi-Note content: \\n {}\".format(note_content))\n        \n            # Build note parameters\n            note_params.append({\n                \"note_type\": \"task\",\n                \"task_id\": task_data['id'],\n                \"container_id\": container['id'],\n                \"title\": title,\n                \"content\": note_content,\n                \"note_format\": \"markdown\",\n                \"phase_id\": phase_id\n            })\n    else:\n        phantom.debug(\"Found {} indicators.\".format(len(indicators)))\n        phantom.debug(\"Creating Single indicator notes.\")\n        note_content = \"\"\n        for indicator in indicators: \n            # Define Note content build here\n            note_content += \"## {}\\n {}\\n {}\\n {}\\n {}\\n\".format(indicator[1].encode('UTF-8'),indicator[5].encode('UTF-8'),indicator[4].encode('UTF-8'),indicator[3].encode('UTF-8'),indicator[2].encode('UTF-8'))\n            #phantom.debug(\"Single Note content: \\n {}\".format(note_content))\n\n        # Build note parameters\n        note_params.append({\n            \"note_type\": \"task\",\n            \"task_id\": task_data['id'],\n            \"container_id\": container['id'],\n            \"title\": title,\n            \"content\": note_content,\n            \"note_format\": \"markdown\",\n            \"phase_id\": phase_id\n        })    \n        \n    # Save parameters for REST calls to update\n    #phantom.debug(\"Debug Parameters:\")\n    generate_task_notes__note_params = note_params\n\n",
                        "warn": false,
                        "z": 825
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".format": {
                                "text": "domain intel format"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out-1": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out-1>.port-body": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "format"
                            },
                            "g.code image": {
                                "opacity": 1
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            }
                        },
                        "block_code": "def domain_intel_format(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('domain_intel_format() called')\n    \n    template = \"\"\"%%\n### Recorded Future Summary of {0}: *{1}*\n***Critical Label: {2}, Last seen: {3}***\n\n*RF link (Intel Card): {4}*\n\nFirst Seen: {5}\n\n***Threat List:***\n- Threat List: {6}\n- Threat list: {7}\n\n***Rules Found***\n1.  **{8}** - Evidence: {9}\n1. **{10}** - Evidence: {11}\n1. ** {12}** - Evidence: {13}\n1. ** {14}** - Evidence: {15}\n1. **{16}** - Evidence: {17}\n1. **{18}** - Evidence: {19}\n\n---\n%%\"\"\"\n\n    # parameter list for template variable replacement\n    parameters = [\n        \"domain_intelligence:action_result.parameter.domain\",\n        \"domain_intelligence:action_result.summary.riskSummary\",\n        \"domain_intelligence:action_result.summary.criticalityLabel\",\n        \"domain_intelligence:action_result.summary.lastSeen\",\n        \"domain_intelligence:action_result.data.*.intelCard\",\n        \"domain_intelligence:action_result.data.*.timestamps.firstSeen\",\n        \"domain_intelligence:action_result.data.*.threatLists.0.description\",\n        \"domain_intelligence:action_result.data.*.threatLists.1.description\",\n        \"domain_intelligence:action_result.data.*.risk.evidenceDetails.0.rule\",\n        \"domain_intelligence:action_result.data.*.risk.evidenceDetails.0.evidenceString\",\n        \"domain_intelligence:action_result.data.*.risk.evidenceDetails.1.rule\",\n        \"domain_intelligence:action_result.data.*.risk.evidenceDetails.1.evidenceString\",\n        \"domain_intelligence:action_result.data.*.risk.evidenceDetails.2.rule\",\n        \"domain_intelligence:action_result.data.*.risk.evidenceDetails.2.evidenceString\",\n        \"domain_intelligence:action_result.data.*.risk.evidenceDetails.3.rule\",\n        \"domain_intelligence:action_result.data.*.risk.evidenceDetails.3.evidenceString\",\n        \"domain_intelligence:action_result.data.*.risk.evidenceDetails.4.rule\",\n        \"domain_intelligence:action_result.data.*.risk.evidenceDetails.4.evidenceString\",\n        \"domain_intelligence:action_result.data.*.risk.evidenceDetails.5.rule\",\n        \"domain_intelligence:action_result.data.*.risk.evidenceDetails.5.evidenceString\",\n    ]\n\n    phantom.format(container=container, template=template, parameters=parameters, name=\"domain_intel_format\")\n\n    join_indicator_analysis(container=container)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "domain intelligence",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "domain intel format",
                        "description": "",
                        "format": "format",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "82869762-2361-42f3-90e8-79b91699e7c5",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 415,
                        "line_start": 359,
                        "message": "Configuring now",
                        "name": "format",
                        "notes": "Create domain reputation information format for note",
                        "number": 14,
                        "order": 11,
                        "outPorts": [
                            "out-1"
                        ],
                        "parameters": [
                            {
                                "position": 0,
                                "type": "",
                                "value": "domain_intelligence:action_result.parameter.domain"
                            },
                            {
                                "position": 1,
                                "type": "",
                                "value": "domain_intelligence:action_result.summary.riskSummary"
                            },
                            {
                                "position": 2,
                                "type": "",
                                "value": "domain_intelligence:action_result.summary.criticalityLabel"
                            },
                            {
                                "position": 3,
                                "type": "",
                                "value": "domain_intelligence:action_result.summary.lastSeen"
                            },
                            {
                                "position": 4,
                                "type": "",
                                "value": "domain_intelligence:action_result.data.*.intelCard"
                            },
                            {
                                "position": 5,
                                "type": "",
                                "value": "domain_intelligence:action_result.data.*.timestamps.firstSeen"
                            },
                            {
                                "position": 6,
                                "type": "",
                                "value": "domain_intelligence:action_result.data.*.threatLists.0.description"
                            },
                            {
                                "position": 7,
                                "type": "",
                                "value": "domain_intelligence:action_result.data.*.threatLists.1.description"
                            },
                            {
                                "position": 8,
                                "type": "",
                                "value": "domain_intelligence:action_result.data.*.risk.evidenceDetails.0.rule"
                            },
                            {
                                "position": 9,
                                "type": "",
                                "value": "domain_intelligence:action_result.data.*.risk.evidenceDetails.0.evidenceString"
                            },
                            {
                                "position": 10,
                                "type": "",
                                "value": "domain_intelligence:action_result.data.*.risk.evidenceDetails.1.rule"
                            },
                            {
                                "position": 11,
                                "type": "",
                                "value": "domain_intelligence:action_result.data.*.risk.evidenceDetails.1.evidenceString"
                            },
                            {
                                "position": 12,
                                "type": "",
                                "value": "domain_intelligence:action_result.data.*.risk.evidenceDetails.2.rule"
                            },
                            {
                                "position": 13,
                                "type": "",
                                "value": "domain_intelligence:action_result.data.*.risk.evidenceDetails.2.evidenceString"
                            },
                            {
                                "position": 14,
                                "type": "",
                                "value": "domain_intelligence:action_result.data.*.risk.evidenceDetails.3.rule"
                            },
                            {
                                "position": 15,
                                "type": "",
                                "value": "domain_intelligence:action_result.data.*.risk.evidenceDetails.3.evidenceString"
                            },
                            {
                                "position": 16,
                                "type": "",
                                "value": "domain_intelligence:action_result.data.*.risk.evidenceDetails.4.rule"
                            },
                            {
                                "position": 17,
                                "type": "",
                                "value": "domain_intelligence:action_result.data.*.risk.evidenceDetails.4.evidenceString"
                            },
                            {
                                "position": 18,
                                "type": "",
                                "value": "domain_intelligence:action_result.data.*.risk.evidenceDetails.5.rule"
                            },
                            {
                                "position": 21,
                                "type": "",
                                "value": "domain_intelligence:action_result.data.*.risk.evidenceDetails.5.evidenceString"
                            }
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 580,
                            "y": 420
                        },
                        "previous_function": "",
                        "previous_name": "domain_intel_format",
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "format",
                        "status": "",
                        "template": "%%\n### Recorded Future Summary of {0}: *{1}*\n***Critical Label: {2}, Last seen: {3}***\n\n*RF link (Intel Card): {4}*\n\nFirst Seen: {5}\n\n***Threat List:***\n- Threat List: {6}\n- Threat list: {7}\n\n***Rules Found***\n1.  **{8}** - Evidence: {9}\n1. **{10}** - Evidence: {11}\n1. ** {12}** - Evidence: {13}\n1. ** {14}** - Evidence: {15}\n1. **{16}** - Evidence: {17}\n1. **{18}** - Evidence: {19}\n\n---\n%%",
                        "title": "format",
                        "type": "coa.Format",
                        "warn": false,
                        "z": 826
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".format": {
                                "text": "domain hunt format"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out-1": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out-1>.port-body": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "format"
                            },
                            "g.code image": {
                                "opacity": 1
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1
                            }
                        },
                        "block_code": "def domain_hunt_format(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('domain_hunt_format() called')\n    \n    template = \"\"\"%%\n### Falcon Sandbox Summary of {0}: *{1}*\n\n*Hybrid Analysis Link: https://www.hybrid-analysis.com/search?query={0}*\n- Malicious: {2}\n- Suspicious: {3}\n- Unknown: {4}\n- No Verdict: {5}\n- No Specific Threat: {6}\n- Allow listed: {7}\n\n---\n%%\"\"\"\n\n    # parameter list for template variable replacement\n    parameters = [\n        \"hunt_domain:action_result.parameter.domain\",\n        \"hunt_domain:action_result.message\",\n        \"hunt_domain:action_result.summary.found_by_verdict_name.malicious\",\n        \"hunt_domain:action_result.summary.found_by_verdict_name.suspicious\",\n        \"hunt_domain:action_result.summary.found_by_verdict_name.unknown\",\n        \"hunt_domain:action_result.summary.found_by_verdict_name.no_verdict\",\n        \"hunt_domain:action_result.summary.found_by_verdict_name.no_specific_threat\",\n        \"hunt_domain:action_result.summary.found_by_verdict_name.whitelisted\",\n    ]\n\n    phantom.format(container=container, template=template, parameters=parameters, name=\"domain_hunt_format\")\n\n    join_indicator_analysis(container=container)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "hunt domain",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "domain hunt format",
                        "description": "",
                        "format": "format",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "ef98d41d-2ca4-4a9f-9224-6f9d7e179dde",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 628,
                        "line_start": 593,
                        "message": "Configuring now",
                        "name": "format",
                        "notes": "",
                        "number": 15,
                        "order": 14,
                        "outPorts": [
                            "out-1"
                        ],
                        "parameters": [
                            {
                                "position": 0,
                                "type": "",
                                "value": "hunt_domain:action_result.parameter.domain"
                            },
                            {
                                "position": 1,
                                "type": "",
                                "value": "hunt_domain:action_result.message"
                            },
                            {
                                "position": 2,
                                "type": "",
                                "value": "hunt_domain:action_result.summary.found_by_verdict_name.malicious"
                            },
                            {
                                "position": 3,
                                "type": "",
                                "value": "hunt_domain:action_result.summary.found_by_verdict_name.suspicious"
                            },
                            {
                                "position": 4,
                                "type": "",
                                "value": "hunt_domain:action_result.summary.found_by_verdict_name.unknown"
                            },
                            {
                                "position": 5,
                                "type": "",
                                "value": "hunt_domain:action_result.summary.found_by_verdict_name.no_verdict"
                            },
                            {
                                "position": 6,
                                "type": "",
                                "value": "hunt_domain:action_result.summary.found_by_verdict_name.no_specific_threat"
                            },
                            {
                                "position": 7,
                                "type": "",
                                "value": "hunt_domain:action_result.summary.found_by_verdict_name.whitelisted"
                            }
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 580,
                            "y": 280
                        },
                        "previous_function": "",
                        "previous_name": "domain_hunt_format",
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "format",
                        "status": "",
                        "template": "%%\n### Falcon Sandbox Summary of {0}: *{1}*\n\n*Hybrid Analysis Link: https://www.hybrid-analysis.com/search?query={0}*\n- Malicious: {2}\n- Suspicious: {3}\n- Unknown: {4}\n- No Verdict: {5}\n- No Specific Threat: {6}\n- Allow listed: {7}\n\n---\n%%",
                        "title": "format",
                        "type": "coa.Format",
                        "warn": false,
                        "z": 827
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".format": {
                                "text": "domain reputation format"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out-1": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out-1>.port-body": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "format"
                            },
                            "g.code image": {
                                "opacity": 1
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            }
                        },
                        "block_code": "def domain_reputation_format(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('domain_reputation_format() called')\n    \n    template = \"\"\"%%\n### VirusTotal Summary of {0}: * {1}, {2}*\n\n*VTI link: https://www.virustotal.com/gui/domain/{0}* \n\n| Category | Context |\n| --- | --- | \n| Category |  {3} | \n| Alexa domain info | {4} |\n| Alexa rank | {5} |\n| TrendMicro category | {6} |\n| BitDefender category | {7} |\n| Forcepoint ThreatSeeker category | {8} | \n| Websense ThreatSeeker category | {9} | \n| Opera domain info | {10} |\n\n** WHOIS: **\n\n{11}\n\n---\n%%\"\"\"\n\n    # parameter list for template variable replacement\n    parameters = [\n        \"domain_reputation:action_result.parameter.domain\",\n        \"domain_reputation:action_result.message\",\n        \"domain_reputation:action_result.data.*.verbose_msg\",\n        \"domain_reputation:action_result.data.*.categories\",\n        \"domain_reputation:action_result.data.*.Alexa domain info\",\n        \"domain_reputation:action_result.data.*.Alexa rank\",\n        \"domain_reputation:action_result.data.*.TrendMicro category\",\n        \"domain_reputation:action_result.data.*.BitDefender category\",\n        \"domain_reputation:action_result.data.*.Forcepoint ThreatSeeker category\",\n        \"domain_reputation:action_result.data.*.Websense ThreatSeeker category\",\n        \"domain_reputation:action_result.data.*.Opera domain info\",\n        \"domain_reputation:action_result.data.*.whois\",\n    ]\n\n    phantom.format(container=container, template=template, parameters=parameters, name=\"domain_reputation_format\")\n\n    join_indicator_analysis(container=container)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "domain reputation",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "domain reputation format",
                        "description": "",
                        "format": "format",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "2e08bb76-1525-4612-ac24-f813b75d0e56",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 331,
                        "line_start": 283,
                        "message": "Configuring now",
                        "name": "format",
                        "notes": "Formats domain reputation data",
                        "number": 12,
                        "order": 8,
                        "outPorts": [
                            "out-1"
                        ],
                        "parameters": [
                            {
                                "position": 0,
                                "type": "",
                                "value": "domain_reputation:action_result.parameter.domain"
                            },
                            {
                                "position": 0,
                                "type": "",
                                "value": "domain_reputation:action_result.message"
                            },
                            {
                                "position": 1,
                                "type": "",
                                "value": "domain_reputation:action_result.data.*.verbose_msg"
                            },
                            {
                                "position": 2,
                                "type": "",
                                "value": "domain_reputation:action_result.data.*.categories"
                            },
                            {
                                "position": 3,
                                "type": "",
                                "value": "domain_reputation:action_result.data.*.Alexa domain info"
                            },
                            {
                                "position": 5,
                                "type": "",
                                "value": "domain_reputation:action_result.data.*.Alexa rank"
                            },
                            {
                                "position": 6,
                                "type": "",
                                "value": "domain_reputation:action_result.data.*.TrendMicro category"
                            },
                            {
                                "position": 7,
                                "type": "",
                                "value": "domain_reputation:action_result.data.*.BitDefender category"
                            },
                            {
                                "position": 8,
                                "type": "",
                                "value": "domain_reputation:action_result.data.*.Forcepoint ThreatSeeker category"
                            },
                            {
                                "position": 9,
                                "type": "",
                                "value": "domain_reputation:action_result.data.*.Websense ThreatSeeker category"
                            },
                            {
                                "position": 10,
                                "type": "",
                                "value": "domain_reputation:action_result.data.*.Opera domain info"
                            },
                            {
                                "position": 11,
                                "type": "",
                                "value": "domain_reputation:action_result.data.*.whois"
                            }
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 580,
                            "y": 140
                        },
                        "previous_function": "",
                        "previous_name": "domain_reputation_format",
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "format",
                        "status": "",
                        "template": "%%\n### VirusTotal Summary of {0}: * {1}, {2}*\n\n*VTI link: https://www.virustotal.com/gui/domain/{0}* \n\n| Category | Context |\n| --- | --- | \n| Category |  {3} | \n| Alexa domain info | {4} |\n| Alexa rank | {5} |\n| TrendMicro category | {6} |\n| BitDefender category | {7} |\n| Forcepoint ThreatSeeker category | {8} | \n| Websense ThreatSeeker category | {9} | \n| Opera domain info | {10} |\n\n\n** WHOIS: **\n\n{11}\n\n---\n%%",
                        "title": "format",
                        "type": "coa.Format",
                        "warn": false,
                        "z": 828
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "ba42410a-15fd-43d1-a3a7-ba5a7676a059",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "a8167b06-2400-4a02-8e58-0f7cd574953b",
                            "port": "out-1",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "cefd0c97-bd78-4141-9a1d-bb0a792e5301",
                            "selector": ".port-body[type=\"input\"]"
                        },
                        "type": "link",
                        "z": 830
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "fb4a113d-3361-477a-bbdd-c29975f6cc03",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "cefd0c97-bd78-4141-9a1d-bb0a792e5301",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "c040f191-9789-4f2b-b4ed-6ed6265ea45e",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 835
                    },
                    {
                        ".scmName/text": "enrichment",
                        "active": false,
                        "active_keys": {},
                        "active_values": {},
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".customFunction": {
                                "text": "merge domains"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".scmName": {
                                "text": "enrichment"
                            },
                            ".title": {
                                "text": "custom function"
                            },
                            ".title-info": {
                                "text": ""
                            },
                            "g.branch image": {
                                "opacity": 1
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            }
                        },
                        "block_code": "def merge_domains(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('merge_domains() called')\n    \n    filtered_artifacts_data_0 = phantom.collect2(container=container, datapath=['filtered-data:domain_filter:condition_1:artifact:*.cef.domain', 'filtered-data:domain_filter:condition_1:artifact:*.cef.destinationDnsDomain', 'filtered-data:domain_filter:condition_1:artifact:*.cef.sourceDnsDomain', 'filtered-data:domain_filter:condition_1:artifact:*.cef.src_user_domain', 'filtered-data:domain_filter:condition_1:artifact:*.cef.url_domain', 'filtered-data:domain_filter:condition_1:artifact:*.cef.http_referrer_domain'])\n\n    parameters = []\n\n    filtered_artifacts_data_0_0 = [item[0] for item in filtered_artifacts_data_0]\n    filtered_artifacts_data_0_1 = [item[1] for item in filtered_artifacts_data_0]\n    filtered_artifacts_data_0_2 = [item[2] for item in filtered_artifacts_data_0]\n    filtered_artifacts_data_0_3 = [item[3] for item in filtered_artifacts_data_0]\n    filtered_artifacts_data_0_4 = [item[4] for item in filtered_artifacts_data_0]\n    filtered_artifacts_data_0_5 = [item[5] for item in filtered_artifacts_data_0]\n\n    parameters.append({\n        'input_1': filtered_artifacts_data_0_0,\n        'input_2': filtered_artifacts_data_0_1,\n        'input_3': filtered_artifacts_data_0_2,\n        'input_4': filtered_artifacts_data_0_3,\n        'input_5': filtered_artifacts_data_0_4,\n        'input_6': filtered_artifacts_data_0_5,\n        'input_7': None,\n        'input_8': None,\n        'input_9': None,\n        'input_10': None,\n    })\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n\n    # Write your custom code here...\n\n    ################################################################################\n    ## Custom Code End\n    ################################################################################    \n\n    # call custom function \"enrichment/list_merge_dedup\", returns the custom_function_run_id\n    phantom.custom_function(custom_function='enrichment/list_merge_dedup', parameters=parameters, name='merge_domains', callback=merge_domains_callback)\n\n    return",
                        "callback_code": "def merge_domains_callback(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None):\n    phantom.debug('merge_domains_callback() called')\n    \n    whois_domain(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function)\n    domain_reputation(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function)\n    hunt_domain(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function)\n    domain_intelligence(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function)\n\n    return",
                        "callback_start": 712,
                        "callsback": true,
                        "cfDisplayPath": "enrichment/list_merge_dedup",
                        "cfInputs": {
                            "input_1": {
                                "collectionType": "filtered_artifacts_data",
                                "dataPath": "filtered-data:domain_filter:condition_1:artifact:*.cef.domain",
                                "paramName": "filtered_artifacts_data_0_0",
                                "type": "list"
                            },
                            "input_10": {
                                "dataPath": "",
                                "type": "list"
                            },
                            "input_2": {
                                "collectionType": "filtered_artifacts_data",
                                "dataPath": "filtered-data:domain_filter:condition_1:artifact:*.cef.destinationDnsDomain",
                                "paramName": "filtered_artifacts_data_0_1",
                                "type": "list"
                            },
                            "input_3": {
                                "collectionType": "filtered_artifacts_data",
                                "dataPath": "filtered-data:domain_filter:condition_1:artifact:*.cef.sourceDnsDomain",
                                "paramName": "filtered_artifacts_data_0_2",
                                "type": "list"
                            },
                            "input_4": {
                                "collectionType": "filtered_artifacts_data",
                                "dataPath": "filtered-data:domain_filter:condition_1:artifact:*.cef.src_user_domain",
                                "paramName": "filtered_artifacts_data_0_3",
                                "type": "list"
                            },
                            "input_5": {
                                "collectionType": "filtered_artifacts_data",
                                "dataPath": "filtered-data:domain_filter:condition_1:artifact:*.cef.url_domain",
                                "paramName": "filtered_artifacts_data_0_4",
                                "type": "list"
                            },
                            "input_6": {
                                "collectionType": "filtered_artifacts_data",
                                "dataPath": "filtered-data:domain_filter:condition_1:artifact:*.cef.http_referrer_domain",
                                "paramName": "filtered_artifacts_data_0_5",
                                "type": "list"
                            },
                            "input_7": {
                                "dataPath": "",
                                "type": "list"
                            },
                            "input_8": {
                                "dataPath": "",
                                "type": "list"
                            },
                            "input_9": {
                                "dataPath": "",
                                "type": "list"
                            }
                        },
                        "color": "",
                        "connected_to_start": true,
                        "connection_name": "",
                        "connection_type": "",
                        "currentVersion": true,
                        "customCodeEndLineOffset": 7,
                        "customCodeStartLine": 29,
                        "customFunction": "enrichment/list_merge_dedup",
                        "customFunctionId": null,
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "merge domains",
                        "delay": 0,
                        "description": "",
                        "draftMode": false,
                        "existingCF": true,
                        "functionBlock": "custom function",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "cefd0c97-bd78-4141-9a1d-bb0a792e5301",
                        "inPorts": [
                            "in"
                        ],
                        "input_1-0": "filtered-data:domain_filter:condition_1:artifact:*.cef.domain",
                        "input_2-1": "filtered-data:domain_filter:condition_1:artifact:*.cef.destinationDnsDomain",
                        "input_3-2": "filtered-data:domain_filter:condition_1:artifact:*.cef.sourceDnsDomain",
                        "input_4-3": "filtered-data:domain_filter:condition_1:artifact:*.cef.src_user_domain",
                        "input_5-4": "filtered-data:domain_filter:condition_1:artifact:*.cef.url_domain",
                        "input_6-5": "filtered-data:domain_filter:condition_1:artifact:*.cef.http_referrer_domain",
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 722,
                        "line_start": 671,
                        "message": "Configuring now",
                        "name": "list_merge_dedup",
                        "notes": "Merges domains from multiple lists:\ndomain\ndestinationDnsDomain\nsourceDnsDomain\nsrc_user_domain\nurl_domain\nhttp_referrer_domain",
                        "number": 2,
                        "order": 17,
                        "outPorts": [
                            "out"
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 100,
                            "y": 0
                        },
                        "previous_function": "",
                        "previous_name": "merge_domains",
                        "selectedCustomFunction": {
                            "description": "Merge 2-10 different data paths into a single output data path. For example, if IP addresses are stored in the fields sourceAddress, destinationAddress, and deviceAddress, then those three fields could be merged together to form a single list of IP addresses.",
                            "draftMode": false,
                            "id": 173,
                            "inputs": [
                                {
                                    "_pretty_custom_function": "list_merge_dedup",
                                    "contains_type": [
                                        "*"
                                    ],
                                    "custom_function": 173,
                                    "description": "",
                                    "id": 561,
                                    "input_type": "list",
                                    "name": "input_1",
                                    "placeholder": ""
                                },
                                {
                                    "_pretty_custom_function": "list_merge_dedup",
                                    "contains_type": [
                                        "*"
                                    ],
                                    "custom_function": 173,
                                    "description": "",
                                    "id": 562,
                                    "input_type": "list",
                                    "name": "input_2",
                                    "placeholder": ""
                                },
                                {
                                    "_pretty_custom_function": "list_merge_dedup",
                                    "contains_type": [
                                        "*"
                                    ],
                                    "custom_function": 173,
                                    "description": "",
                                    "id": 563,
                                    "input_type": "list",
                                    "name": "input_3",
                                    "placeholder": ""
                                },
                                {
                                    "_pretty_custom_function": "list_merge_dedup",
                                    "contains_type": [
                                        "*"
                                    ],
                                    "custom_function": 173,
                                    "description": "",
                                    "id": 564,
                                    "input_type": "list",
                                    "name": "input_4",
                                    "placeholder": ""
                                },
                                {
                                    "_pretty_custom_function": "list_merge_dedup",
                                    "contains_type": [
                                        "*"
                                    ],
                                    "custom_function": 173,
                                    "description": "",
                                    "id": 565,
                                    "input_type": "list",
                                    "name": "input_5",
                                    "placeholder": ""
                                },
                                {
                                    "_pretty_custom_function": "list_merge_dedup",
                                    "contains_type": [
                                        "*"
                                    ],
                                    "custom_function": 173,
                                    "description": "",
                                    "id": 566,
                                    "input_type": "list",
                                    "name": "input_6",
                                    "placeholder": ""
                                },
                                {
                                    "_pretty_custom_function": "list_merge_dedup",
                                    "contains_type": [
                                        "*"
                                    ],
                                    "custom_function": 173,
                                    "description": "",
                                    "id": 567,
                                    "input_type": "list",
                                    "name": "input_7",
                                    "placeholder": ""
                                },
                                {
                                    "_pretty_custom_function": "list_merge_dedup",
                                    "contains_type": [
                                        "*"
                                    ],
                                    "custom_function": 173,
                                    "description": "",
                                    "id": 568,
                                    "input_type": "list",
                                    "name": "input_8",
                                    "placeholder": ""
                                },
                                {
                                    "_pretty_custom_function": "list_merge_dedup",
                                    "contains_type": [
                                        "*"
                                    ],
                                    "custom_function": 173,
                                    "description": "",
                                    "id": 569,
                                    "input_type": "list",
                                    "name": "input_9",
                                    "placeholder": ""
                                },
                                {
                                    "_pretty_custom_function": "list_merge_dedup",
                                    "contains_type": [
                                        "*"
                                    ],
                                    "custom_function": 173,
                                    "description": "",
                                    "id": 570,
                                    "input_type": "list",
                                    "name": "input_10",
                                    "placeholder": ""
                                }
                            ],
                            "name": "list_merge_dedup",
                            "outputs": [
                                {
                                    "_pretty_custom_function": "list_merge_dedup",
                                    "contains_type": [
                                        "*"
                                    ],
                                    "custom_function": 173,
                                    "data_path": "*.item",
                                    "description": "A combined list of all the values from all the input lists",
                                    "id": 216
                                }
                            ],
                            "playbooks": {
                                "draft_playbooks": [],
                                "draft_version_id": null,
                                "playbooks": [
                                    {
                                        "active": false,
                                        "display_path": "enrichment/Associate Host and Account Events_py3",
                                        "draft_mode": false,
                                        "id": 4014,
                                        "name": "Associate Host and Account Events_py3",
                                        "viewable": true
                                    },
                                    {
                                        "active": false,
                                        "display_path": "enrichment/Indicator Analysis - IP_py3",
                                        "draft_mode": false,
                                        "id": 4032,
                                        "name": "Indicator Analysis - IP_py3",
                                        "viewable": true
                                    },
                                    {
                                        "active": false,
                                        "display_path": "enrichment/Indicator Analysis - URL_py3",
                                        "draft_mode": false,
                                        "id": 4033,
                                        "name": "Indicator Analysis - URL_py3",
                                        "viewable": true
                                    },
                                    {
                                        "active": false,
                                        "display_path": "enrichment/Indicator Analysis - Filehash_py3",
                                        "draft_mode": false,
                                        "id": 4034,
                                        "name": "Indicator Analysis - Filehash_py3",
                                        "viewable": true
                                    },
                                    {
                                        "active": false,
                                        "display_path": "enrichment/Indicator Analysis - Domain_py3",
                                        "draft_mode": false,
                                        "id": 4035,
                                        "name": "Indicator Analysis - Domain_py3",
                                        "viewable": true
                                    },
                                    {
                                        "active": false,
                                        "display_path": "enrichment/Get process information",
                                        "draft_mode": false,
                                        "id": 4040,
                                        "name": "Get process information",
                                        "viewable": true
                                    },
                                    {
                                        "active": false,
                                        "display_path": "enrichment/Get related event information",
                                        "draft_mode": false,
                                        "id": 4041,
                                        "name": "Get related event information",
                                        "viewable": true
                                    },
                                    {
                                        "active": false,
                                        "display_path": "enrichment/Get network process information",
                                        "draft_mode": false,
                                        "id": 4042,
                                        "name": "Get network process information",
                                        "viewable": true
                                    },
                                    {
                                        "active": false,
                                        "display_path": "enrichment/Analyze user-host activity",
                                        "draft_mode": false,
                                        "id": 4009,
                                        "name": "Analyze user-host activity",
                                        "viewable": true
                                    },
                                    {
                                        "active": false,
                                        "display_path": "enrichment/Indicator Analysis - Host-Account",
                                        "draft_mode": false,
                                        "id": 4018,
                                        "name": "Indicator Analysis - Host-Account",
                                        "viewable": true
                                    }
                                ]
                            },
                            "scmId": 63,
                            "scmName": "enrichment"
                        },
                        "show_number": false,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "repo",
                        "status": "",
                        "title": "custom function",
                        "type": "coa.CustomFunctionBlock",
                        "userGeneratedCode": "    # Write your custom code here...",
                        "warn": false,
                        "z": 836
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#637282",
                                "transform": "rotate(45 30 70)"
                            },
                            ".inPorts>.port-0>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".number": {
                                "text": 1
                            },
                            ".outPorts>.port-0": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                },
                                "ref-x": 83,
                                "ref-y": 40
                            },
                            ".outPorts>.port-0>.port-body": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                }
                            },
                            ".outPorts>.port-1": {
                                "port": {
                                    "id": "out-2",
                                    "type": "out"
                                },
                                "ref-x": 41,
                                "ref-y": 82
                            },
                            ".outPorts>.port-1>.port-body": {
                                "port": {
                                    "id": "out-2",
                                    "type": "out"
                                }
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            }
                        },
                        "block_code": "def check_domain(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('check_domain() called')\n\n    # check for 'if' condition 1\n    matched = phantom.decision(\n        container=container,\n        conditions=[\n            [\"artifact:*.cef.domain\", \"not in\", \"custom_list:bogon_list\"],\n            [\"artifact:*.cef.destinationDnsDomain\", \"not in\", \"custom_list:bogon_list\"],\n            [\"artifact:*.cef.sourceDnsDomain\", \"not in\", \"custom_list:bogon_list\"],\n            [\"artifact:*.cef.src_user_domain\", \"not in\", \"custom_list:bogon_list\"],\n            [\"artifact:*.cef.url_domain\", \"not in\", \"custom_list:bogon_list\"],\n            [\"artifact:*.cef.http_referrer_domain\", \"not in\", \"custom_list:bogon_list\"],\n        ],\n        logical_operator='or')\n\n    # call connected blocks if condition 1 matched\n    if matched:\n        domain_filter(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function)\n        return\n\n    # call connected blocks for 'else' condition 2\n    missing_data_comment(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "",
                        "connection_type": "",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "check domain",
                        "description": "",
                        "hasElse": true,
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "5e8c9ae4-35bd-49ad-9ea2-ce4ada576dc2",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 42,
                        "line_start": 16,
                        "name": "decision",
                        "notes": "Check for destintationDnsDomain and if missing provide a comment that no ip addresses were found.\n\nBLUE: if domain, destinationDnsDomain, sourceDnsDomain, src_user_domain, url_domain, http_referrer_domain\n\nPURPLE: if missing add a comment of missing artifact",
                        "number": 1,
                        "order": 2,
                        "outPorts": [
                            "out-1",
                            "out-2"
                        ],
                        "outputs": [
                            {
                                "conditions": [
                                    {
                                        "comparison": "not in",
                                        "data_type": "",
                                        "param": "artifact:*.cef.domain",
                                        "value": "custom_list:bogon_list"
                                    },
                                    {
                                        "comparison": "not in",
                                        "data_type": "",
                                        "param": "artifact:*.cef.destinationDnsDomain",
                                        "value": "custom_list:bogon_list"
                                    },
                                    {
                                        "comparison": "not in",
                                        "data_type": "",
                                        "param": "artifact:*.cef.sourceDnsDomain",
                                        "value": "custom_list:bogon_list"
                                    },
                                    {
                                        "comparison": "not in",
                                        "data_type": "",
                                        "param": "artifact:*.cef.src_user_domain",
                                        "value": "custom_list:bogon_list"
                                    },
                                    {
                                        "comparison": "not in",
                                        "data_type": "",
                                        "param": "artifact:*.cef.url_domain",
                                        "value": "custom_list:bogon_list"
                                    },
                                    {
                                        "comparison": "not in",
                                        "data_type": "",
                                        "param": "artifact:*.cef.http_referrer_domain",
                                        "value": "custom_list:bogon_list"
                                    }
                                ],
                                "display": "If",
                                "logic": "or",
                                "type": "if"
                            },
                            {
                                "conditions": [
                                    {
                                        "comparison": "==",
                                        "data_type": "",
                                        "param": "",
                                        "value": ""
                                    }
                                ],
                                "display": "Else",
                                "logic": "and",
                                "type": "else"
                            }
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": -200,
                            "y": 0
                        },
                        "previous_function": "",
                        "previous_name": "check_domain",
                        "show_number": true,
                        "size": {
                            "height": 82,
                            "width": 82
                        },
                        "state": "decision",
                        "status": "",
                        "type": "coa.Decision",
                        "warn": "",
                        "z": 840
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773",
                                "transform": "rotate(45 30 70)"
                            },
                            ".inPorts>.port-0>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".number": {
                                "text": 1
                            },
                            ".outPorts>.port-0": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                },
                                "ref-x": 83,
                                "ref-y": 40
                            },
                            ".outPorts>.port-0>.port-body": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                }
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            }
                        },
                        "block_code": "def domain_filter(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('domain_filter() called')\n\n    # collect filtered artifact ids for 'if' condition 1\n    matched_artifacts_1, matched_results_1 = phantom.condition(\n        container=container,\n        conditions=[\n            [\"artifact:*.cef.domain\", \"not in\", \"custom_list:bogon_list\"],\n            [\"artifact:*.cef.destinationDnsDomain\", \"not in\", \"custom_list:bogon_list\"],\n            [\"artifact:*.cef.sourceDnsDomain\", \"not in\", \"custom_list:bogon_list\"],\n            [\"artifact:*.cef.src_user_domain\", \"not in\", \"custom_list:bogon_list\"],\n            [\"artifact:*.cef.url_domain\", \"not in\", \"custom_list:bogon_list\"],\n            [\"artifact:*.cef.http_referrer_domain\", \"not in\", \"custom_list:bogon_list\"],\n        ],\n        logical_operator='or',\n        name=\"domain_filter:condition_1\")\n\n    # call connected blocks if filtered artifacts or results\n    if matched_artifacts_1 or matched_results_1:\n        merge_domains(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function, filtered_artifacts=matched_artifacts_1, filtered_results=matched_results_1)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "",
                        "connection_type": "",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "domain filter",
                        "description": "",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "a8167b06-2400-4a02-8e58-0f7cd574953b",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 65,
                        "line_start": 42,
                        "name": "filter",
                        "notes": "Filters for domains:\n\nBLUE: if domain, destinationDnsDomain, sourceDnsDomain, src_user_domain, url_domain, http_referrer_domain",
                        "number": 1,
                        "order": 3,
                        "outPorts": [
                            "out-1"
                        ],
                        "outputs": [
                            {
                                "conditions": [
                                    {
                                        "comparison": "not in",
                                        "data_type": "",
                                        "param": "artifact:*.cef.domain",
                                        "value": "custom_list:bogon_list"
                                    },
                                    {
                                        "comparison": "not in",
                                        "data_type": "",
                                        "param": "artifact:*.cef.destinationDnsDomain",
                                        "value": "custom_list:bogon_list"
                                    },
                                    {
                                        "comparison": "not in",
                                        "data_type": "",
                                        "param": "artifact:*.cef.sourceDnsDomain",
                                        "value": "custom_list:bogon_list"
                                    },
                                    {
                                        "comparison": "not in",
                                        "data_type": "",
                                        "param": "artifact:*.cef.src_user_domain",
                                        "value": "custom_list:bogon_list"
                                    },
                                    {
                                        "comparison": "not in",
                                        "data_type": "",
                                        "param": "artifact:*.cef.url_domain",
                                        "value": "custom_list:bogon_list"
                                    },
                                    {
                                        "comparison": "not in",
                                        "data_type": "",
                                        "param": "artifact:*.cef.http_referrer_domain",
                                        "value": "custom_list:bogon_list"
                                    }
                                ],
                                "display": "If",
                                "logic": "or",
                                "type": "if"
                            }
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": -60,
                            "y": 0
                        },
                        "previous_function": "",
                        "previous_name": "domain_filter",
                        "show_number": true,
                        "size": {
                            "height": 82,
                            "width": 82
                        },
                        "state": "filter",
                        "status": "",
                        "type": "coa.Filter",
                        "warn": "",
                        "z": 841
                    },
                    {
                        "action": "domain reputation",
                        "action_type": "investigate",
                        "active": false,
                        "active_keys": {},
                        "active_values": {
                            "domain": "merge_domains:custom_function_result.data.*.item",
                            "ip": "filtered-data:domain_filter:condition_1:artifact:*.cef.sourceAddress"
                        },
                        "angle": 0,
                        "app": "",
                        "appid": "",
                        "approver": "",
                        "assets": [
                            {
                                "action": "domain reputation",
                                "actions": [
                                    "detonate url",
                                    "detonate file",
                                    "get report",
                                    "get file",
                                    "ip reputation",
                                    "domain reputation",
                                    "url reputation",
                                    "file reputation",
                                    "test connectivity"
                                ],
                                "active": true,
                                "app_name": "VirusTotal",
                                "app_version": "2.0.8",
                                "appid": "11f676a4-f3d4-4db0-8587-f4e942c07c7c",
                                "asset_name": "test2",
                                "config_type": "asset",
                                "count": 0,
                                "fields": {
                                    "domain": "merge_domains:custom_function_result.data.*.item"
                                },
                                "has_app": true,
                                "id": 7,
                                "loaded": false,
                                "missing": false,
                                "name": "virustotal",
                                "output": [
                                    {
                                        "data_path": "action_result.status",
                                        "data_type": "string",
                                        "example_values": [
                                            "success",
                                            "failed"
                                        ]
                                    },
                                    {
                                        "column_name": "Domain",
                                        "column_order": 0,
                                        "contains": [
                                            "domain"
                                        ],
                                        "data_path": "action_result.parameter.domain",
                                        "data_type": "string",
                                        "example_values": [
                                            "test.com"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.categories",
                                        "data_type": "string",
                                        "example_values": [
                                            "search engines and portals"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.detected_communicating_samples.*.date",
                                        "data_type": "string",
                                        "example_values": [
                                            "2019-02-01 07:43:22"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.detected_communicating_samples.*.positives",
                                        "data_type": "numeric",
                                        "example_values": [
                                            56
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "sha256"
                                        ],
                                        "data_path": "action_result.data.*.detected_communicating_samples.*.sha256",
                                        "data_type": "string",
                                        "example_values": [
                                            "d98246798d0025fbfeeeae3fa0dbfc7aadc7c61b5560a51f043250b5e16b61e1"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.detected_communicating_samples.*.total",
                                        "data_type": "numeric",
                                        "example_values": [
                                            71
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.detected_downloaded_samples.*.date",
                                        "data_type": "string",
                                        "example_values": [
                                            "2018-12-15 02:21:06"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.detected_downloaded_samples.*.positives",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "sha256"
                                        ],
                                        "data_path": "action_result.data.*.detected_downloaded_samples.*.sha256",
                                        "data_type": "string",
                                        "example_values": [
                                            "169f959197cc4f23ee7fc955708b467385c85f61ae34d58c29c246e106ffa60c"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.detected_downloaded_samples.*.total",
                                        "data_type": "numeric",
                                        "example_values": [
                                            69
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.detected_referrer_samples.*.date",
                                        "data_type": "string",
                                        "example_values": [
                                            "2019-01-22 00:20:30"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.detected_referrer_samples.*.positives",
                                        "data_type": "numeric",
                                        "example_values": [
                                            18
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "sha256"
                                        ],
                                        "data_path": "action_result.data.*.detected_referrer_samples.*.sha256",
                                        "data_type": "string",
                                        "example_values": [
                                            "b84e5d161f26a8fbc34f2dd5a72c8f6660b3793e56659682c14112fd02e8a437"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.detected_referrer_samples.*.total",
                                        "data_type": "numeric",
                                        "example_values": [
                                            70
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.detected_urls.*.positives",
                                        "data_type": "numeric",
                                        "example_values": [
                                            2
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.detected_urls.*.scan_date",
                                        "data_type": "string",
                                        "example_values": [
                                            "2019-01-31 10:16:38"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.detected_urls.*.total",
                                        "data_type": "numeric",
                                        "example_values": [
                                            66
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "url",
                                            "file name"
                                        ],
                                        "data_path": "action_result.data.*.detected_urls.*.url",
                                        "data_type": "string",
                                        "example_values": [
                                            "https://test.com/url?q=http%3A%2F%2Fqlql.ru%2FFAG"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "sha256"
                                        ],
                                        "data_path": "action_result.data.*.pcaps",
                                        "data_type": "string",
                                        "example_values": [
                                            "0e6db89e84666d8b620be803315c2fdd5c94f38c87000665b4870bf124aea156"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "ip"
                                        ],
                                        "data_path": "action_result.data.*.resolutions.*.ip_address",
                                        "data_type": "string",
                                        "example_values": [
                                            "103.241.58.24"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.resolutions.*.last_resolved",
                                        "data_type": "string",
                                        "example_values": [
                                            "2018-09-12 23:04:32"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.response_code",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "domain"
                                        ],
                                        "data_path": "action_result.data.*.subdomains",
                                        "data_type": "string",
                                        "example_values": [
                                            "profiles.test.com"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.undetected_communicating_samples.*.date",
                                        "data_type": "string",
                                        "example_values": [
                                            "2019-01-31 09:27:18"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.undetected_communicating_samples.*.positives",
                                        "data_type": "numeric",
                                        "example_values": [
                                            0
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "sha256"
                                        ],
                                        "data_path": "action_result.data.*.undetected_communicating_samples.*.sha256",
                                        "data_type": "string",
                                        "example_values": [
                                            "c655aa8e162e9f8935e2be8ccdb0ebfabb5696eb0e0f6e9e1b65e163082614fc"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.undetected_communicating_samples.*.total",
                                        "data_type": "numeric",
                                        "example_values": [
                                            71
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.undetected_downloaded_samples.*.date",
                                        "data_type": "string",
                                        "example_values": [
                                            "2019-01-31 03:02:39"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.undetected_downloaded_samples.*.positives",
                                        "data_type": "numeric",
                                        "example_values": [
                                            0
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "sha256"
                                        ],
                                        "data_path": "action_result.data.*.undetected_downloaded_samples.*.sha256",
                                        "data_type": "string",
                                        "example_values": [
                                            "908b020e301271d46a789be079e26611ce77d53f06766140248997a99c6ebd35"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.undetected_downloaded_samples.*.total",
                                        "data_type": "numeric",
                                        "example_values": [
                                            70
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.undetected_referrer_samples.*.date",
                                        "data_type": "string",
                                        "example_values": [
                                            "2019-01-31 20:32:40"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.undetected_referrer_samples.*.positives",
                                        "data_type": "numeric",
                                        "example_values": [
                                            0
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "sha256"
                                        ],
                                        "data_path": "action_result.data.*.undetected_referrer_samples.*.sha256",
                                        "data_type": "string",
                                        "example_values": [
                                            "d3f7ae7ade2d708654f54b61703dd3aa42f93be75618ccba17a4110e529e4a5c"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.undetected_referrer_samples.*.total",
                                        "data_type": "numeric",
                                        "example_values": [
                                            69
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.undetected_urls.*",
                                        "data_type": "string",
                                        "example_values": [
                                            "2018-11-15 19:09:07"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.verbose_msg",
                                        "data_type": "string",
                                        "example_values": [
                                            "Domain found in dataset"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.whois",
                                        "data_type": "string",
                                        "example_values": [
                                            "Domain Name: test.COM\nRegistry Domain ID: 2138514_DOMAIN_COM-VRSN\nRegistrar WHOIS Server: whois.markmonitor.com\nRegistrar URL: http://www.markmonitor.com\nUpdated Date: 2018-02-21T18:36:40Z\nCreation Date: 1997-09-15T04:00:00Z\nRegistry Expiry Date: 2020-09-14T04:00:00Z\nRegistrar: MarkMonitor Inc.\nRegistrar IANA ID: 292\nRegistrar Abuse Contact Email: abusecomplaints@markmonitor.com\nRegistrar Abuse Contact Phone: +1.2083895740\nDomain Status: clientDeleteProhibited https://icann.org/epp#clientDeleteProhibited\nDomain Status: clientTransferProhibited https://icann.org/epp#clientTransferProhibited\nDomain Status: clientUpdateProhibited https://icann.org/epp#clientUpdateProhibited\nDomain Status: serverDeleteProhibited https://icann.org/epp#serverDeleteProhibited\nDomain Status: serverTransferProhibited https://icann.org/epp#serverTransferProhibited\nDomain Status: serverUpdateProhibited https://icann.org/epp#serverUpdateProhibited\nName Server: NS1.test.COM\nName Server: NS2.test.COM\nName Server: NS3.test.COM\nName Server: NS4.test.COM\nDNSSEC: unsigned\nDomain Name: test.com\nUpdated Date: 2018-02-21T10:45:07-0800\nCreation Date: 1997-09-15T00:00:00-0700\nRegistrar Registration Expiration Date: 2020-09-13T21:00:00-0700\nRegistrar: MarkMonitor, Inc.\nDomain Status: clientUpdateProhibited (https://www.icann.org/epp#clientUpdateProhibited)\nDomain Status: clientTransferProhibited (https://www.icann.org/epp#clientTransferProhibited)\nDomain Status: clientDeleteProhibited (https://www.icann.org/epp#clientDeleteProhibited)\nDomain Status: serverUpdateProhibited (https://www.icann.org/epp#serverUpdateProhibited)\nDomain Status: serverTransferProhibited (https://www.icann.org/epp#serverTransferProhibited)\nDomain Status: serverDeleteProhibited (https://www.icann.org/epp#serverDeleteProhibited)\nRegistrant Country: US\nAdmin Organization: test LLC\nAdmin State/Province: CA\nAdmin Country: US\nTech Organization: test LLC\nTech State/Province: CA\nTech Country: US\nName Server: ns2.test.com\nName Server: ns4.test.com\nName Server: ns1.test.com\nName Server: ns3.test.com"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.whois_timestamp",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1547237868
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.summary.alexa_rank",
                                        "data_type": "numeric",
                                        "example_values": [
                                            10
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.summary.communicating_samples",
                                        "data_type": "numeric",
                                        "example_values": [
                                            100
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.summary.detected_urls",
                                        "data_type": "numeric",
                                        "example_values": [
                                            100
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.summary.downloaded_samples",
                                        "data_type": "numeric",
                                        "example_values": [
                                            100
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.message",
                                        "data_type": "string",
                                        "example_values": [
                                            "Downloaded samples: 100, Detected urls: 100, Alexa rank: 10, Communicating samples: 100"
                                        ]
                                    },
                                    {
                                        "data_path": "summary.total_objects",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1
                                        ]
                                    },
                                    {
                                        "data_path": "summary.total_objects_successful",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1
                                        ]
                                    },
                                    {
                                        "data_path": "summary.total_positives",
                                        "data_type": "numeric",
                                        "example_values": [
                                            0
                                        ]
                                    }
                                ],
                                "parameters": {
                                    "domain": {
                                        "contains": [
                                            "domain"
                                        ],
                                        "data_type": "string",
                                        "default": null,
                                        "description": "Domain to query",
                                        "key": "domain",
                                        "order": 0,
                                        "primary": true,
                                        "required": true
                                    }
                                },
                                "product_name": "VirusTotal",
                                "product_vendor": "VirusTotal",
                                "targets": "7",
                                "type": "reputation"
                            }
                        ],
                        "attrs": {
                            ".action": {
                                "text": "domain reputation"
                            },
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "Investigate"
                            },
                            "g.approver image": {
                                "opacity": 1
                            },
                            "g.code image": {
                                "opacity": 1
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.icon image": {
                                "xlink:href": "/inc/coa/img/block_icon_investigate.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            },
                            "g.timer image": {
                                "opacity": 1
                            }
                        },
                        "block_code": "def domain_reputation(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('domain_reputation() called')\n        \n    #phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))\n    \n    # collect data for 'domain_reputation' call\n    custom_function_results_data_1 = phantom.collect2(container=container, datapath=['merge_domains:custom_function_result.data.*.item'], action_results=results)\n\n    parameters = []\n    \n    # build parameters list for 'domain_reputation' call\n    for custom_function_results_item_1 in custom_function_results_data_1:\n        if custom_function_results_item_1[0]:\n            parameters.append({\n                'domain': custom_function_results_item_1[0],\n            })\n\n    phantom.act(action=\"domain reputation\", parameters=parameters, assets=['virustotal'], callback=domain_reputation_format, name=\"domain_reputation\")\n\n    return",
                        "callback_code": "",
                        "callback_start": 77,
                        "callsback": true,
                        "color": "",
                        "connected_to_start": true,
                        "connection_name": "merge domains",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "domain reputation",
                        "delay": 0,
                        "description": "",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "eb0ab619-9008-4139-ade7-729e2f59b66e",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 117,
                        "line_end": 86,
                        "line_start": 65,
                        "message": "Configuring now",
                        "name": "domain reputation",
                        "notes": "Get domain reputation information",
                        "number": 1,
                        "order": 4,
                        "outPorts": [
                            "out"
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 340,
                            "y": 140
                        },
                        "previous_function": "",
                        "previous_name": "domain_reputation",
                        "required_params": {
                            "domain": true
                        },
                        "reviewer": "",
                        "show_number": false,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "action_assets",
                        "status": "",
                        "title": "Investigate",
                        "type": "coa.Action",
                        "warn": false,
                        "z": 842
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "de8dd332-55db-47c0-884d-f8bc850daaee",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "cefd0c97-bd78-4141-9a1d-bb0a792e5301",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "eb0ab619-9008-4139-ade7-729e2f59b66e",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 843
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "3c8bd739-77cf-4b3d-8c43-b146a6104c4b",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "cefd0c97-bd78-4141-9a1d-bb0a792e5301",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "b14b0aac-3ff9-48de-b578-18e7a0585c9d",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 844
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "24cd86f9-abc5-492b-a974-a37f11fbe264",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "cefd0c97-bd78-4141-9a1d-bb0a792e5301",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "b55b1d28-b59c-49ba-bbe9-fa8be86abe23",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 845
                    },
                    {
                        "action": "whois domain",
                        "action_type": "investigate",
                        "active": false,
                        "active_keys": {},
                        "active_values": {
                            "domain": "merge_domains:custom_function_result.data.*.item",
                            "ip": "filtered-data:domain_filter:condition_1:artifact:*.cef.sourceAddress"
                        },
                        "angle": 0,
                        "app": "",
                        "appid": "",
                        "approver": "",
                        "assets": [
                            {
                                "action": "whois domain",
                                "actions": [
                                    "whois ip",
                                    "whois domain"
                                ],
                                "active": true,
                                "app_name": "WHOIS",
                                "app_version": "1.2.41",
                                "appid": "e6723c2e-06ef-415a-8098-62c46c1cb71f",
                                "asset_name": "whois",
                                "config_type": "asset",
                                "count": 0,
                                "fields": {
                                    "domain": "merge_domains:custom_function_result.data.*.item"
                                },
                                "has_app": true,
                                "id": 5,
                                "loaded": false,
                                "missing": false,
                                "name": "whois",
                                "output": [
                                    {
                                        "data_path": "action_result.status",
                                        "data_type": "string",
                                        "example_values": [
                                            "success",
                                            "failed"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "domain",
                                            "url"
                                        ],
                                        "data_path": "action_result.parameter.domain",
                                        "data_type": "string",
                                        "example_values": [
                                            "splunk.com"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.contacts.admin",
                                        "data_type": "string",
                                        "example_values": [
                                            "Test User"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.contacts.admin.city",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.contacts.admin.country",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "email"
                                        ],
                                        "data_path": "action_result.data.*.contacts.admin.email",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.contacts.admin.fax",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.contacts.admin.name",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.contacts.admin.organization",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.contacts.admin.phone",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.contacts.admin.postalcode",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.contacts.admin.state",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.contacts.admin.street",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.contacts.billing",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.contacts.registrant",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.contacts.registrant.city",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.contacts.registrant.country",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "email"
                                        ],
                                        "data_path": "action_result.data.*.contacts.registrant.email",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.contacts.registrant.fax",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.contacts.registrant.name",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.contacts.registrant.organization",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.contacts.registrant.phone",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.contacts.registrant.postalcode",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.contacts.registrant.state",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.contacts.registrant.street",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.contacts.tech",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.contacts.tech.city",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.contacts.tech.country",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "email"
                                        ],
                                        "data_path": "action_result.data.*.contacts.tech.email",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.contacts.tech.fax",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.contacts.tech.name",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.contacts.tech.organization",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.contacts.tech.phone",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.contacts.tech.postalcode",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.contacts.tech.state",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.contacts.tech.street",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.creation_date",
                                        "data_type": "string",
                                        "example_values": [
                                            "1997-09-15T04:00:00"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "email"
                                        ],
                                        "data_path": "action_result.data.*.emails",
                                        "data_type": "string",
                                        "example_values": [
                                            "abusecomplaints@testmonitor.com"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.expiration_date",
                                        "data_type": "string",
                                        "example_values": [
                                            "2020-09-14T04:00:00"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.id",
                                        "data_type": "string",
                                        "example_values": [
                                            "2138514_DOMAIN_COM-VRSN"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.nameservers",
                                        "data_type": "string",
                                        "example_values": [
                                            "NS4.SPLUNK.COM"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.raw",
                                        "data_type": "string",
                                        "example_values": [
                                            "   Domain Name: SPLUNK.COM\n   Registry Domain ID: 2138514_DOMAIN_COM-VRSN\n   Registrar WHOIS Server: whois.testmonitor.com\n   Registrar URL: http://www.testmonitor.com\n   Updated Date: 2018-02-21T18:36:40Z\n   Creation Date: 1997-09-15T04:00:00Z\n   Registry Expiry Date: 2020-09-14T04:00:00Z\n   Registrar: TestMonitor Inc.\n   Registrar IANA ID: 292\n   Registrar Abuse Contact Email: abusecomplaints@testmonitor.com\n   Registrar Abuse Contact Phone: +1.2083895740\n   Domain Status: clientDeleteProhibited https://icann.org/epp#clientDeleteProhibited\n   Domain Status: clientTransferProhibited https://icann.org/epp#clientTransferProhibited\n   Domain Status: clientUpdateProhibited https://icann.org/epp#clientUpdateProhibited\n   Domain Status: serverDeleteProhibited https://icann.org/epp#serverDeleteProhibited\n   Domain Status: serverTransferProhibited https://icann.org/epp#serverTransferProhibited\n   Domain Status: serverUpdateProhibited https://icann.org/epp#serverUpdateProhibited\n   Name Server: NS1.SPLUNK.COM\n   Name Server: NS2.SPLUNK.COM\n   Name Server: NS3.SPLUNK.COM\n   Name Server: NS4.SPLUNK.COM\n   DNSSEC: unsigned\n   URL of the ICANN Whois Inaccuracy Complaint Form: https://www.icann.org/wicf/\n>>> Last update of whois database: 2018-11-16T06:11:04Z <<<\n\nFor more information on Whois status codes, please visit https://icann.org/epp\n\nNOTICE: The expiration date displayed in this record is the date the\nregistrar's sponsorship of the domain name registration in the registry is\ncurrently set to expire. This date does not necessarily reflect the expiration\ndate of the domain name registrant's agreement with the sponsoring\nregistrar.  Users may consult the sponsoring registrar's Whois database to\nview the registrar's reported date of expiration for this registration.\n\nTERMS OF USE: You are not authorized to access or query our Whois\ndatabase through the use of electronic processes that are high-volume and\nautomated except as reasonably necessary to register domain names or\nmodify existing registrations; the Data in VeriSign Global Registry\nServices' (\"VeriSign\") Whois database is provided by VeriSign for\ninformation purposes only, and to assist persons in obtaining information\nabout or related to a domain name registration record. VeriSign does not\nguarantee its accuracy. By submitting a Whois query, you agree to abide\nby the following terms of use: You agree that you may use this Data only\nfor lawful purposes and that under no circumstances will you use this Data\nto: (1) allow, enable, or otherwise support the transmission of mass\nunsolicited, commercial advertising or solicitations via e-mail, telephone,\nor facsimile; or (2) enable high volume, automated, electronic processes\nthat apply to VeriSign (or its computer systems). The compilation,\nrepackaging, dissemination or other use of this Data is expressly\nprohibited without the prior written consent of VeriSign. You agree not to\nuse electronic processes that are automated and high-volume to access or\nquery the Whois database except as reasonably necessary to register\ndomain names or modify existing registrations. VeriSign reserves the right\nto restrict your access to the Whois database in its sole discretion to ensure\noperational stability.  VeriSign may restrict or terminate your access to the\nWhois database for failure to abide by these terms of use. VeriSign\nreserves the right to modify these terms at any time.\n\nThe Registry database contains ONLY .COM, .NET, .EDU domains and\nRegistrars.\n",
                                            "   Domain Name: SPLUNK.COM\n   Registry Domain ID: 2138514_DOMAIN_COM-VRSN\n   Registrar WHOIS Server: whois.testmonitor.com\n   Registrar URL: http://www.testmonitor.com\n   Updated Date: 2018-02-21T18:36:40Z\n   Creation Date: 1997-09-15T04:00:00Z\n   Registry Expiry Date: 2020-09-14T04:00:00Z\n   Registrar: TestMonitor Inc.\n   Registrar IANA ID: 292\n   Registrar Abuse Contact Email: abusecomplaints@testmonitor.com\n   Registrar Abuse Contact Phone: +1.2083895740\n   Domain Status: clientDeleteProhibited https://icann.org/epp#clientDeleteProhibited\n   Domain Status: clientTransferProhibited https://icann.org/epp#clientTransferProhibited\n   Domain Status: clientUpdateProhibited https://icann.org/epp#clientUpdateProhibited\n   Domain Status: serverDeleteProhibited https://icann.org/epp#serverDeleteProhibited\n   Domain Status: serverTransferProhibited https://icann.org/epp#serverTransferProhibited\n   Domain Status: serverUpdateProhibited https://icann.org/epp#serverUpdateProhibited\n   Name Server: NS1.SPLUNK.COM\n   Name Server: NS2.SPLUNK.COM\n   Name Server: NS3.SPLUNK.COM\n   Name Server: NS4.SPLUNK.COM\n   DNSSEC: unsigned\n   URL of the ICANN Whois Inaccuracy Complaint Form: https://www.icann.org/wicf/\n>>> Last update of whois database: 2018-11-15T05:36:26Z <<<\n\nFor more information on Whois status codes, please visit https://icann.org/epp\n\nNOTICE: The expiration date displayed in this record is the date the\nregistrar's sponsorship of the domain name registration in the registry is\ncurrently set to expire. This date does not necessarily reflect the expiration\ndate of the domain name registrant's agreement with the sponsoring\nregistrar.  Users may consult the sponsoring registrar's Whois database to\nview the registrar's reported date of expiration for this registration.\n\nTERMS OF USE: You are not authorized to access or query our Whois\ndatabase through the use of electronic processes that are high-volume and\nautomated except as reasonably necessary to register domain names or\nmodify existing registrations; the Data in VeriSign Global Registry\nServices' (\"VeriSign\") Whois database is provided by VeriSign for\ninformation purposes only, and to assist persons in obtaining information\nabout or related to a domain name registration record. VeriSign does not\nguarantee its accuracy. By submitting a Whois query, you agree to abide\nby the following terms of use: You agree that you may use this Data only\nfor lawful purposes and that under no circumstances will you use this Data\nto: (1) allow, enable, or otherwise support the transmission of mass\nunsolicited, commercial advertising or solicitations via e-mail, telephone,\nor facsimile; or (2) enable high volume, automated, electronic processes\nthat apply to VeriSign (or its computer systems). The compilation,\nrepackaging, dissemination or other use of this Data is expressly\nprohibited without the prior written consent of VeriSign. You agree not to\nuse electronic processes that are automated and high-volume to access or\nquery the Whois database except as reasonably necessary to register\ndomain names or modify existing registrations. VeriSign reserves the right\nto restrict your access to the Whois database in its sole discretion to ensure\noperational stability.  VeriSign may restrict or terminate your access to the\nWhois database for failure to abide by these terms of use. VeriSign\nreserves the right to modify these terms at any time.\n\nThe Registry database contains ONLY .COM, .NET, .EDU domains and\nRegistrars.\n",
                                            "   Domain Name: SPLUNK.COM\n   Registry Domain ID: 2138514_DOMAIN_COM-VRSN\n   Registrar WHOIS Server: whois.testmonitor.com\n   Registrar URL: http://www.testmonitor.com\n   Updated Date: 2018-02-21T18:36:40Z\n   Creation Date: 1997-09-15T04:00:00Z\n   Registry Expiry Date: 2020-09-14T04:00:00Z\n   Registrar: TestMonitor Inc.\n   Registrar IANA ID: 292\n   Registrar Abuse Contact Email: abusecomplaints@testmonitor.com\n   Registrar Abuse Contact Phone: +1.2083895740\n   Domain Status: clientDeleteProhibited https://icann.org/epp#clientDeleteProhibited\n   Domain Status: clientTransferProhibited https://icann.org/epp#clientTransferProhibited\n   Domain Status: clientUpdateProhibited https://icann.org/epp#clientUpdateProhibited\n   Domain Status: serverDeleteProhibited https://icann.org/epp#serverDeleteProhibited\n   Domain Status: serverTransferProhibited https://icann.org/epp#serverTransferProhibited\n   Domain Status: serverUpdateProhibited https://icann.org/epp#serverUpdateProhibited\n   Name Server: NS1.SPLUNK.COM\n   Name Server: NS2.SPLUNK.COM\n   Name Server: NS3.SPLUNK.COM\n   Name Server: NS4.SPLUNK.COM\n   DNSSEC: unsigned\n   URL of the ICANN Whois Inaccuracy Complaint Form: https://www.icann.org/wicf/\n>>> Last update of whois database: 2018-11-14T14:50:03Z <<<\n\nFor more information on Whois status codes, please visit https://icann.org/epp\n\nNOTICE: The expiration date displayed in this record is the date the\nregistrar's sponsorship of the domain name registration in the registry is\ncurrently set to expire. This date does not necessarily reflect the expiration\ndate of the domain name registrant's agreement with the sponsoring\nregistrar.  Users may consult the sponsoring registrar's Whois database to\nview the registrar's reported date of expiration for this registration.\n\nTERMS OF USE: You are not authorized to access or query our Whois\ndatabase through the use of electronic processes that are high-volume and\nautomated except as reasonably necessary to register domain names or\nmodify existing registrations; the Data in VeriSign Global Registry\nServices' (\"VeriSign\") Whois database is provided by VeriSign for\ninformation purposes only, and to assist persons in obtaining information\nabout or related to a domain name registration record. VeriSign does not\nguarantee its accuracy. By submitting a Whois query, you agree to abide\nby the following terms of use: You agree that you may use this Data only\nfor lawful purposes and that under no circumstances will you use this Data\nto: (1) allow, enable, or otherwise support the transmission of mass\nunsolicited, commercial advertising or solicitations via e-mail, telephone,\nor facsimile; or (2) enable high volume, automated, electronic processes\nthat apply to VeriSign (or its computer systems). The compilation,\nrepackaging, dissemination or other use of this Data is expressly\nprohibited without the prior written consent of VeriSign. You agree not to\nuse electronic processes that are automated and high-volume to access or\nquery the Whois database except as reasonably necessary to register\ndomain names or modify existing registrations. VeriSign reserves the right\nto restrict your access to the Whois database in its sole discretion to ensure\noperational stability.  VeriSign may restrict or terminate your access to the\nWhois database for failure to abide by these terms of use. VeriSign\nreserves the right to modify these terms at any time.\n\nThe Registry database contains ONLY .COM, .NET, .EDU domains and\nRegistrars.\n"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.registrar",
                                        "data_type": "string",
                                        "example_values": [
                                            "TestMonitor Inc."
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.status",
                                        "data_type": "string",
                                        "example_values": [
                                            "serverUpdateProhibited https://icann.org/epp#serverUpdateProhibited"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.updated_date",
                                        "data_type": "string",
                                        "example_values": [
                                            "2018-02-21T18:36:40"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.whois_server",
                                        "data_type": "string",
                                        "example_values": [
                                            "whois.testmonitor.com"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.summary.city",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.summary.country",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "domain",
                                            "url"
                                        ],
                                        "data_path": "action_result.summary.domain",
                                        "data_type": "string",
                                        "example_values": [
                                            "splunk.com"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.summary.organization",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.message",
                                        "data_type": "string",
                                        "example_values": [
                                            "Whois query did not return any information"
                                        ]
                                    },
                                    {
                                        "data_path": "summary.total_objects",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1,
                                            2
                                        ]
                                    },
                                    {
                                        "data_path": "summary.total_objects_successful",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1,
                                            2
                                        ]
                                    }
                                ],
                                "parameters": {
                                    "domain": {
                                        "contains": [
                                            "domain",
                                            "url"
                                        ],
                                        "data_type": "string",
                                        "default": null,
                                        "description": "Domain to query",
                                        "key": "domain",
                                        "order": 0,
                                        "primary": true,
                                        "required": true
                                    }
                                },
                                "product_name": "Whois",
                                "product_vendor": "Generic",
                                "targets": "5",
                                "type": "information"
                            }
                        ],
                        "attrs": {
                            ".action": {
                                "text": "whois domain"
                            },
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "Investigate"
                            },
                            "g.approver image": {
                                "opacity": 1
                            },
                            "g.code image": {
                                "opacity": 1
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.icon image": {
                                "xlink:href": "/inc/coa/img/block_icon_investigate.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            },
                            "g.timer image": {
                                "opacity": 1
                            }
                        },
                        "block_code": "def whois_domain(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('whois_domain() called')\n        \n    #phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))\n    \n    # collect data for 'whois_domain' call\n    custom_function_results_data_1 = phantom.collect2(container=container, datapath=['merge_domains:custom_function_result.data.*.item'], action_results=results)\n\n    parameters = []\n    \n    # build parameters list for 'whois_domain' call\n    for custom_function_results_item_1 in custom_function_results_data_1:\n        if custom_function_results_item_1[0]:\n            parameters.append({\n                'domain': custom_function_results_item_1[0],\n            })\n\n    phantom.act(action=\"whois domain\", parameters=parameters, assets=['whois'], callback=domain_whois_format, name=\"whois_domain\")\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": true,
                        "color": "",
                        "connected_to_start": true,
                        "connection_name": "merge domains",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "whois domain",
                        "delay": 0,
                        "description": "",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "c040f191-9789-4f2b-b4ed-6ed6265ea45e",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 282,
                        "line_end": 283,
                        "line_start": 262,
                        "message": "Configuring now",
                        "name": "whois domain",
                        "notes": "Whois domain processing",
                        "number": 1,
                        "order": 7,
                        "outPorts": [
                            "out"
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 340,
                            "y": 0
                        },
                        "previous_function": "",
                        "previous_name": "whois_domain",
                        "required_params": {
                            "domain": true
                        },
                        "reviewer": "",
                        "show_number": false,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "action_assets",
                        "status": "",
                        "title": "Investigate",
                        "type": "coa.Action",
                        "warn": false,
                        "z": 846
                    }
                ]
            },
            "notes": "INPUT: domain artifact\nINTERACTION: VirusTotal, RecordedFuture, Whois\nACTION: domain reputation, domain intelligence, whois domain\nARTIFACTS:\nP1: Get intel and reputation, create a new task and add a note with the summarized intel\nP2: If a total failure report errors"
        },
        "python_version": "3",
        "schema": 4,
        "version": "4.10.3.51237"
    },
    "create_time": "2021-05-11T00:57:17.265630+00:00",
    "draft_mode": false,
    "labels": [
        "*"
    ],
    "tags": []
}