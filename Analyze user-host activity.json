{
    "blockly": false,
    "blockly_xml": "<xml></xml>",
    "category": "ESCU",
    "coa": {
        "data": {
            "clean": true,
            "code_block": "",
            "description": "This playbook take usernames and hostnames and conducts Splunk searches on them and prints out a note on what it finds from Splunk.",
            "joint": {
                "cells": [
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "989abb4b-8129-4f37-8449-b5194446821e",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "ca8a6759-bab0-4f0f-98e4-59c2b97c4dd4",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "e081b380-1f06-4c06-80c8-f43cd72fbbb3",
                            "selector": ".port-body[type=\"input\"]"
                        },
                        "type": "link",
                        "z": 3
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "1d58e8d3-5acf-4ebc-b06e-be3095f600e7",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "e081b380-1f06-4c06-80c8-f43cd72fbbb3",
                            "port": "out-2",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(2) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "4be17749-7b0b-4a39-9627-095fa6623501",
                            "selector": ".port-body[type=\"input\"]"
                        },
                        "type": "link",
                        "z": 6
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "3768735b-37c6-4194-a515-3a305098dfa0",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "4be17749-7b0b-4a39-9627-095fa6623501",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "f0ffd9fe-a511-4bdd-99ee-1d83ddfa9e32",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 60
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "9c0a4ea6-a9f2-4bd5-8f2b-202f23d4e9f0",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "e081b380-1f06-4c06-80c8-f43cd72fbbb3",
                            "port": "out-1",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "23815a69-5f3f-41f7-98d3-c7659ef3c015",
                            "port": "in",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 301
                    },
                    {
                        "0": "S",
                        "1": "T",
                        "2": "A",
                        "3": "R",
                        "4": "T",
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "ref-x": 33,
                                "ref-y": 8,
                                "text": "START"
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.icon image": {
                                "ref-x": 13,
                                "xlink:href": "/inc/coa/img/block_icon_start.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            }
                        },
                        "block_code": "def on_start(container):\n    phantom.debug('on_start() called')\n    \n    # call 'check_user_and_host' block\n    check_user_and_host(container=container)\n\n    return",
                        "callback_code": "# read-only block view not available",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "",
                        "connection_type": "",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "",
                        "description": "",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "ca8a6759-bab0-4f0f-98e4-59c2b97c4dd4",
                        "inPorts": [],
                        "join_code": "# read-only block view not available",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 16,
                        "line_start": 8,
                        "name": "",
                        "notes": "",
                        "number": 0,
                        "order": 1,
                        "outPorts": [
                            "out"
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": -620,
                            "y": 420
                        },
                        "previous_function": "",
                        "previous_name": "",
                        "show_number": true,
                        "size": {
                            "height": 54,
                            "width": 80
                        },
                        "status": "",
                        "title": "START",
                        "type": "coa.StartEnd",
                        "warn": false,
                        "z": 318
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "0dfe32b9-5d39-4327-990f-0e933c7328c3",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "b22a8c6b-b5c1-4400-89e1-024b59bcac39",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "d421665c-ca54-466b-bb8a-d0328764706e",
                            "selector": ".port-body[type=\"input\"]"
                        },
                        "type": "link",
                        "z": 370
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "0b894790-456d-4686-a7fb-a63d05f50151",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "dc64c41f-16ca-42f6-8f22-2692e79d987a",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "5a8ac34a-77dc-464d-9e1e-bd66e46ccfb5",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 383
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "2184ebc9-bfd7-413f-a9f0-4580eb2d3001",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "739e4a25-0b37-4afc-b2ab-45e20ed4ebfa",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "e931052d-9c7f-415b-96c8-a98d72e23c66",
                            "selector": ".port-body[type=\"input\"]"
                        },
                        "type": "link",
                        "z": 404
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "3f22c626-3f12-4425-9621-840fc9a0e64f",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "7344a83e-e21c-498d-83aa-ae3d19d64894",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "e52e364c-9dc8-4b0d-8d23-5f463201fdc7",
                            "selector": ".port-body[type=\"input\"]"
                        },
                        "type": "link",
                        "z": 419
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "eca1ba91-976c-4725-9742-a057ed5d090a",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "b81beab3-b8b5-4b32-b8d2-13a9e746ba28",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "f0ffd9fe-a511-4bdd-99ee-1d83ddfa9e32",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 426
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "065d83ba-63f8-467e-835a-a8cc6058802d",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "13c8951d-79ef-4e2b-8a4c-87981ed24ad2",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "7344a83e-e21c-498d-83aa-ae3d19d64894",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 487
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "8cca7acb-a98c-4d9f-982b-1fd40f4a2550",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "482503c5-ebd5-42fe-8cee-c7d609fb9b92",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "dc64c41f-16ca-42f6-8f22-2692e79d987a",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 488
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "1934539c-2be0-41ba-aa5d-6a351bd24f4b",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "e52e364c-9dc8-4b0d-8d23-5f463201fdc7",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "b81beab3-b8b5-4b32-b8d2-13a9e746ba28",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 529
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "f189552f-15db-499f-9039-f52da0171efc",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "d421665c-ca54-466b-bb8a-d0328764706e",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "482503c5-ebd5-42fe-8cee-c7d609fb9b92",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 637
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "d50fc7f7-59a1-4e72-8cc8-00fe8eaf42cb",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "e931052d-9c7f-415b-96c8-a98d72e23c66",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "13c8951d-79ef-4e2b-8a4c-87981ed24ad2",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 645
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "b92ccde1-0193-4800-a8ac-ed45dd64c0ba",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "5a8ac34a-77dc-464d-9e1e-bd66e46ccfb5",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "de0742b5-d33a-4456-9688-6c79d00e7a2f",
                            "selector": ".port-body[type=\"input\"]"
                        },
                        "type": "link",
                        "z": 692
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".format": {
                                "text": "create host task url"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out-1": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out-1>.port-body": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "format"
                            },
                            "g.code image": {
                                "opacity": 1
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            }
                        },
                        "block_code": "def create_host_task_url(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('create_host_task_url() called')\n    \n    template = \"\"\"/workbook_task/{0}\"\"\"\n\n    # parameter list for template variable replacement\n    parameters = [\n        \"create_host_notes:custom_function:task_id\",\n    ]\n\n    phantom.format(container=container, template=template, parameters=parameters, name=\"create_host_task_url\")\n\n    create_host_task_notes(container=container)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "run  host spl query",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "create host task url",
                        "description": "",
                        "format": "format",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "e52e364c-9dc8-4b0d-8d23-5f463201fdc7",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 333,
                        "line_start": 317,
                        "message": "Configuring now",
                        "name": "format",
                        "notes": "Create the task url for adding notes to workbook task",
                        "number": 11,
                        "order": 12,
                        "outPorts": [
                            "out-1"
                        ],
                        "parameters": [
                            {
                                "position": 0,
                                "type": "",
                                "value": "create_host_notes:custom_function:task_id"
                            }
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 1040,
                            "y": 520
                        },
                        "previous_function": "",
                        "previous_name": "create_host_task_url",
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "format",
                        "status": "",
                        "template": "/workbook_task/{0}",
                        "title": "format",
                        "type": "coa.Format",
                        "warn": false,
                        "z": 696
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "7c96aff2-85bf-4012-a898-63d8bc1cb222",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "de0742b5-d33a-4456-9688-6c79d00e7a2f",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "f0ffd9fe-a511-4bdd-99ee-1d83ddfa9e32",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 698
                    },
                    {
                        "action": "post data",
                        "action_type": "generic",
                        "active": false,
                        "active_keys": {},
                        "active_values": {
                            "body": "create_host_notes:custom_function:note_params",
                            "headers": "",
                            "location": "/note/",
                            "verify_certificate": "False"
                        },
                        "angle": 0,
                        "app": "HTTP",
                        "appid": "290b7499-0374-4930-9cdc-5e9b05d65827",
                        "approver": "",
                        "assets": [
                            {
                                "action": "post data",
                                "actions": [
                                    "post data",
                                    "get data",
                                    "get options",
                                    "get headers",
                                    "delete data",
                                    "patch data",
                                    "put data",
                                    "test connectivity"
                                ],
                                "active": true,
                                "app_name": "HTTP",
                                "app_version": "2.1.15",
                                "appid": "290b7499-0374-4930-9cdc-5e9b05d65827",
                                "asset_name": "phantom-rest-api",
                                "config_type": "asset",
                                "count": 0,
                                "fields": {
                                    "body": "create_host_notes:custom_function:note_params",
                                    "headers": "",
                                    "location": "/note/",
                                    "verify_certificate": "False"
                                },
                                "has_app": true,
                                "id": 30,
                                "loaded": false,
                                "missing": false,
                                "name": "phantom-rest-api",
                                "output": [
                                    {
                                        "data_path": "action_result.status",
                                        "data_type": "string",
                                        "example_values": [
                                            "failed"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.parameter.body",
                                        "data_type": "numeric",
                                        "example_values": [
                                            "{\"name\": \"Bad IP\"}"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.parameter.headers",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.parameter.location",
                                        "data_type": "string",
                                        "example_values": [
                                            "/rest/assets"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.parameter.verify_certificate",
                                        "data_type": "boolean",
                                        "example_values": [
                                            "false"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "url"
                                        ],
                                        "data_path": "action_result.data.*.location",
                                        "data_type": "string",
                                        "example_values": [
                                            "http://192.168.1.26/rest/assets"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.method",
                                        "data_type": "string",
                                        "example_values": [
                                            "POST"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.parsed_response_body",
                                        "data_type": "string",
                                        "example_values": [
                                            "{\"failed\": true, \"message\": \"Requested item not found\"}"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.response_body",
                                        "data_type": "string",
                                        "example_values": [
                                            "{\"failed\": true, \"message\": \"Requested item not found\"}"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.response_headers",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.summary.reason",
                                        "data_type": "string",
                                        "example_values": [
                                            "Not Found"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.summary.status_code",
                                        "data_type": "numeric",
                                        "example_values": [
                                            404
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.message",
                                        "data_type": "string",
                                        "example_values": [
                                            "Can't process response from server. Status Code: 404 Data from server: {\"failed\": true, \"message\": \"Requested item not found\"}"
                                        ]
                                    },
                                    {
                                        "data_path": "summary.total_objects",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1
                                        ]
                                    },
                                    {
                                        "data_path": "summary.total_objects_successful",
                                        "data_type": "numeric",
                                        "example_values": [
                                            0
                                        ]
                                    }
                                ],
                                "parameters": {
                                    "body": {
                                        "data_type": "string",
                                        "default": null,
                                        "description": "POST body (query string, JSON, etc.)",
                                        "key": "body",
                                        "order": 1,
                                        "required": true
                                    },
                                    "headers": {
                                        "data_type": "string",
                                        "default": null,
                                        "description": "Additional headers (JSON object with headers)",
                                        "key": "headers",
                                        "order": 2,
                                        "required": false
                                    },
                                    "location": {
                                        "data_type": "string",
                                        "default": null,
                                        "description": "Location (e.g. path/to/endpoint)",
                                        "key": "location",
                                        "order": 0,
                                        "required": true
                                    },
                                    "verify_certificate": {
                                        "data_type": "boolean",
                                        "default": null,
                                        "description": "Verify certificates (if using HTTPS)",
                                        "key": "verify_certificate",
                                        "order": 2,
                                        "required": true
                                    }
                                },
                                "product_name": "HTTP",
                                "product_vendor": "Generic",
                                "targets": "30",
                                "type": "information"
                            },
                            {
                                "action": "post data",
                                "actions": [
                                    "post data",
                                    "get data",
                                    "get options",
                                    "get headers",
                                    "delete data",
                                    "patch data",
                                    "put data",
                                    "test connectivity"
                                ],
                                "active": true,
                                "app_name": "HTTP",
                                "app_version": "2.1.15",
                                "appid": "290b7499-0374-4930-9cdc-5e9b05d65827",
                                "asset_name": "phantom_rest_api",
                                "config_type": "asset",
                                "count": 0,
                                "fields": {
                                    "body": "create_host_notes:custom_function:note_params",
                                    "headers": "",
                                    "location": "/note/",
                                    "verify_certificate": "False"
                                },
                                "has_app": true,
                                "id": 215,
                                "loaded": false,
                                "missing": false,
                                "name": "phantom_rest_api",
                                "output": [
                                    {
                                        "data_path": "action_result.status",
                                        "data_type": "string",
                                        "example_values": [
                                            "failed"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.parameter.body",
                                        "data_type": "numeric",
                                        "example_values": [
                                            "{\"name\": \"Bad IP\"}"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.parameter.headers",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.parameter.location",
                                        "data_type": "string",
                                        "example_values": [
                                            "/rest/assets"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.parameter.verify_certificate",
                                        "data_type": "boolean",
                                        "example_values": [
                                            "false"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "url"
                                        ],
                                        "data_path": "action_result.data.*.location",
                                        "data_type": "string",
                                        "example_values": [
                                            "http://192.168.1.26/rest/assets"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.method",
                                        "data_type": "string",
                                        "example_values": [
                                            "POST"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.parsed_response_body",
                                        "data_type": "string",
                                        "example_values": [
                                            "{\"failed\": true, \"message\": \"Requested item not found\"}"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.response_body",
                                        "data_type": "string",
                                        "example_values": [
                                            "{\"failed\": true, \"message\": \"Requested item not found\"}"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.response_headers",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.summary.reason",
                                        "data_type": "string",
                                        "example_values": [
                                            "Not Found"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.summary.status_code",
                                        "data_type": "numeric",
                                        "example_values": [
                                            404
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.message",
                                        "data_type": "string",
                                        "example_values": [
                                            "Can't process response from server. Status Code: 404 Data from server: {\"failed\": true, \"message\": \"Requested item not found\"}"
                                        ]
                                    },
                                    {
                                        "data_path": "summary.total_objects",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1
                                        ]
                                    },
                                    {
                                        "data_path": "summary.total_objects_successful",
                                        "data_type": "numeric",
                                        "example_values": [
                                            0
                                        ]
                                    }
                                ],
                                "parameters": {
                                    "body": {
                                        "data_type": "string",
                                        "default": null,
                                        "description": "POST body (query string, JSON, etc.)",
                                        "key": "body",
                                        "order": 1,
                                        "required": true
                                    },
                                    "headers": {
                                        "data_type": "string",
                                        "default": null,
                                        "description": "Additional headers (JSON object with headers)",
                                        "key": "headers",
                                        "order": 2,
                                        "required": false
                                    },
                                    "location": {
                                        "data_type": "string",
                                        "default": null,
                                        "description": "Location (e.g. path/to/endpoint)",
                                        "key": "location",
                                        "order": 0,
                                        "required": true
                                    },
                                    "verify_certificate": {
                                        "data_type": "boolean",
                                        "default": null,
                                        "description": "Verify certificates (if using HTTPS)",
                                        "key": "verify_certificate",
                                        "order": 2,
                                        "required": true
                                    }
                                },
                                "product_name": "HTTP",
                                "product_vendor": "Generic",
                                "targets": "215",
                                "type": "information"
                            }
                        ],
                        "attrs": {
                            ".action": {
                                "text": "create host task notes"
                            },
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "Generic"
                            },
                            "g.approver image": {
                                "opacity": 1
                            },
                            "g.code image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_code_dark_on.svg"
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.icon image": {
                                "xlink:href": "/inc/coa/img/block_icon_generic.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            },
                            "g.timer image": {
                                "opacity": 1
                            }
                        },
                        "block_code": "def create_host_task_notes(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('create_host_task_notes() called')\n        \n    #phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))\n    \n    create_host_notes__note_params = json.loads(phantom.get_run_data(key='create_host_notes:note_params'))\n    # collect data for 'create_host_task_notes' call\n\n    parameters = []\n    \n    # build parameters list for 'create_host_task_notes' call\n    parameters.append({\n        'body': create_host_notes__note_params,\n        'headers': \"\",\n        'location': \"/note/\",\n        'verify_certificate': \"\",\n    })\n\n    phantom.act(action=\"post data\", parameters=parameters, assets=['phantom-rest-api','phantom_rest_api'], name=\"create_host_task_notes\")\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": true,
                        "color": "",
                        "connected_to_start": true,
                        "connection_name": "run  host spl query",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "def create_host_task_notes(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('create_host_task_notes() called')\n        \n    #phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))\n    \n    create_host_notes__note_params = phantom.get_run_data(key='create_host_notes:note_params')\n    # collect data for 'create_host_task_notes' call\n\n    parameters = []\n    \n    # build parameters list for 'create_host_task_notes' call\n    parameters.append({\n        'body': create_host_notes__note_params,\n        'headers': \"\",\n        'location': \"/note/\",\n        'verify_certificate': False,\n    })\n\n    phantom.act(action=\"post data\", parameters=parameters, assets=['phantom_rest_api'], name=\"create_host_task_notes\")\n\n    return",
                        "custom_join": "",
                        "custom_name": "create host task notes",
                        "delay": "0",
                        "description": "custom code:\n\nfor note_data in create_automated_notes__note_params:\n        parameters.append({\n            'location': \"/note/\",\n            'body': json.dumps(note_data),\n            'headers': \"\",\n            'verify_certificate': False,\n        })\n",
                        "has_custom": true,
                        "has_custom_block": true,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "b81beab3-b8b5-4b32-b8d2-13a9e746ba28",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 367,
                        "line_start": 345,
                        "message": "Configuring now",
                        "name": "post data",
                        "notes": "Create  task notes for  \"Validate Customer and Host Enrichment task\" ",
                        "number": 4,
                        "order": 13,
                        "outPorts": [
                            "out"
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 1280,
                            "y": 520
                        },
                        "previous_function": "",
                        "previous_name": "create_host_task_notes",
                        "required_params": {
                            "body": true,
                            "location": true,
                            "verify_certificate": true
                        },
                        "reviewer": "",
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "app_action_assets",
                        "status": "",
                        "title": "Generic",
                        "type": "coa.Action",
                        "warn": false,
                        "z": 704
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".format": {
                                "text": "format user spl query"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out-1": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out-1>.port-body": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "format"
                            },
                            "g.code image": {
                                "opacity": 1
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            }
                        },
                        "block_code": "def format_user_spl_query(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('format_user_spl_query() called')\n    \n    template = \"\"\"%%\n| tstats latest(_time) as last_login_time , count as login_count from datamodel=Authentication WHERE (index=*  Authentication.src_user !=*$  Authentication.user !=*$ Authentication.action = success  Authentication.user = \\\"*{0}*\\\" )  by  Authentication.user Authentication.dest  | rename Authentication.user as user, Authentication.dest as computer | convert ctime(last_login_time)  | table computer user login_count last_login_time\n%%\"\"\"\n\n    # parameter list for template variable replacement\n    parameters = [\n        \"merge_usernames:custom_function_result.data.*.item\",\n    ]\n\n    phantom.format(container=container, template=template, parameters=parameters, name=\"format_user_spl_query\")\n\n    run_user_spl_query(container=container)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "merge usernames",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "format user spl query",
                        "description": "earliest=\"-7d\"",
                        "format": "format",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "b22a8c6b-b5c1-4400-89e1-024b59bcac39",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 144,
                        "line_start": 126,
                        "message": "Configuring now",
                        "name": "format",
                        "notes": "Creates SPL Query for finding user authentication accounts.  This will demonstrate if this account is single host logins or multiple logins and possibly suspicious.",
                        "number": 9,
                        "order": 6,
                        "outPorts": [
                            "out-1"
                        ],
                        "parameters": [
                            {
                                "position": 0,
                                "type": "",
                                "value": "merge_usernames:custom_function_result.data.*.item"
                            }
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 80,
                            "y": 400
                        },
                        "previous_function": "",
                        "previous_name": "format_user_spl_query",
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "format",
                        "status": "",
                        "template": "%%\n| tstats latest(_time) as last_login_time , count as login_count from datamodel=Authentication WHERE (index=*  Authentication.src_user !=*$  Authentication.user !=*$ Authentication.action = success  Authentication.user = \"*{0}*\" )  by  Authentication.user Authentication.dest  | rename Authentication.user as user, Authentication.dest as computer | convert ctime(last_login_time)  | table computer user login_count last_login_time\n%%",
                        "title": "format",
                        "type": "coa.Format",
                        "warn": false,
                        "z": 756
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".format": {
                                "text": "format host spl query"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out-1": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out-1>.port-body": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "format"
                            },
                            "g.code image": {
                                "opacity": 1
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            }
                        },
                        "block_code": "def format_host_spl_query(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('format_host_spl_query() called')\n    \n    template = \"\"\"%%\n| tstats latest(_time) as last_login_time , count as login_count from datamodel=Authentication WHERE (index=*  Authentication.src_user !=*$  Authentication.user !=*$ Authentication.action = success Authentication.dest=\\\"*{0}*\\\" )  by  Authentication.user Authentication.dest  | rename Authentication.user as user, Authentication.dest as computer | convert ctime(last_login_time) | head 10 | table computer user login_count last_login_time\n%%\"\"\"\n\n    # parameter list for template variable replacement\n    parameters = [\n        \"merge_hostnames:custom_function_result.data.*.item\",\n    ]\n\n    phantom.format(container=container, template=template, parameters=parameters, name=\"format_host_spl_query\")\n\n    run_host_spl_query(container=container)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "merge hostnames",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "format host spl query",
                        "description": "earliest=\"-7d\"",
                        "format": "format",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "739e4a25-0b37-4afc-b2ab-45e20ed4ebfa",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 241,
                        "line_start": 223,
                        "message": "Configuring now",
                        "name": "format",
                        "notes": "Creates SPL Query for finding host to user authentication accounts.  This will demonstrate if this account is single host logins or multiple logins and possibly suspicious.",
                        "number": 10,
                        "order": 9,
                        "outPorts": [
                            "out-1"
                        ],
                        "parameters": [
                            {
                                "position": 0,
                                "type": "",
                                "value": "merge_hostnames:custom_function_result.data.*.item"
                            }
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 80,
                            "y": 520
                        },
                        "previous_function": "",
                        "previous_name": "format_host_spl_query",
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "format",
                        "status": "",
                        "template": "%%\n| tstats latest(_time) as last_login_time , count as login_count from datamodel=Authentication WHERE (index=*  Authentication.src_user !=*$  Authentication.user !=*$ Authentication.action = success Authentication.dest=\"*{0}*\" )  by  Authentication.user Authentication.dest  | rename Authentication.user as user, Authentication.dest as computer | convert ctime(last_login_time) | head 10 | table computer user login_count last_login_time\n%%",
                        "title": "format",
                        "type": "coa.Format",
                        "warn": false,
                        "z": 757
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".functionBlock": {
                                "text": "create host notes"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "custom function"
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 1
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn_grey.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            }
                        },
                        "block_code": "def create_host_notes(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('create_host_notes() called')\n    \n    input_parameter_0 = \"Validate customer and endpoint Information\"\n    input_parameter_1 = \"Enumerate Logged-in Users:\"\n    formatted_data_1 = phantom.get_format_data(name='format_host_spl_results')\n\n    create_host_notes__note_params = None\n    create_host_notes__task_id = None\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n\n    # print debug statement\n    #phantom.debug(formatted_data_1)\n    \n    if formatted_data_1:\n        content = formatted_data_1\n    else:\n        content = \"\"\" There was a failure in the action\"\"\"\n    \n    task_data = {}\n    note_params = []\n    \n    for task in phantom.get_tasks(container=container):\n        ## gets the current phase and  get 3rd tash(Review Indicators)\n        if task['data']['name'] == input_parameter_0:\n            task_data.update(task['data'])\n            phantom.debug('phantom.get_tasks found Task \"{}\" with the task_id: {}, task_name: {}'.format(input_parameter_0,task_data['id'],task_data['name']))\n    \n    note_params.append({\n            \"note_type\": \"task\",\n            \"task_id\": task_data['id'],\n            \"container_id\": container['id'],\n            \"title\": input_parameter_1,\n            \"content\": content,\n            \"phase_id\": task_data['phase']\n        })\n\n    create_host_notes__task_id = task_data['id']\n    create_host_notes__note_params = note_params\n\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n\n    phantom.save_run_data(key='create_host_notes:note_params', value=json.dumps(create_host_notes__note_params))\n    phantom.save_run_data(key='create_host_notes:task_id', value=json.dumps(create_host_notes__task_id))\n    create_host_task_url(container=container)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "run  host spl query",
                        "connection_type": "action",
                        "customCodeEndLineOffset": 8,
                        "customCodeStartLine": 13,
                        "custom_callback": "",
                        "custom_code": "def create_host_notes(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('create_host_notes() called')\n    \n    input_parameter_0 = \"Validate customer and host enrichment\"\n    input_parameter_1 = \"\\\"Enumerate Logged-in Users:\\\"\"\n    formatted_data_1 = phantom.get_format_data(name='format_host_spl_results')\n\n    create_host_notes__note_params = None\n    create_host_notes__task_id = None\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n\n    # print debug statement\n    #phantom.debug(formatted_data_1)\n    \n    if formatted_data_1:\n        content = formatted_data_1\n    else:\n        content = \"\"\" There was a failure in the action\"\"\"\n    \n    task_data = {}\n    note_params = []\n    \n    for task in phantom.get_tasks(container=container):\n        ## gets the current phase and  get 3rd tash(Review Indicators)\n        if task['data']['name'] == input_parameter_0:\n            task_data.update(task['data'])\n            phantom.debug('phantom.get_tasks found Task \"{}\" with the task_id: {}, task_name: {}'.format(input_parameter_0,task_data['id'],task_data['name']))\n    \n    note_params.append({\n            \"note_type\": \"task\",\n            \"task_id\": task_data['id'],\n            \"container_id\": container['id'],\n            \"title\": input_parameter_1,\n            \"content\": content,\n            \"phase_id\": task_data['phase']\n        })\n\n    create_host_notes__task_id = task_data['id']\n    create_host_notes__note_params = note_params\n\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n\n    phantom.save_run_data(key='create_host_notes:note_params', value=json.dumps(create_host_notes__note_params))\n    phantom.save_run_data(key='create_host_notes:task_id', value=json.dumps(create_host_notes__task_id))\n    create_host_task_url(container=container)\n\n    return",
                        "custom_join": "",
                        "custom_name": "create host notes",
                        "description": "",
                        "functionBlock": "custom function",
                        "has_custom": true,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "7344a83e-e21c-498d-83aa-ae3d19d64894",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "legacy": true,
                        "line_end": 317,
                        "line_start": 264,
                        "message": "Configuring now",
                        "name": "custom function",
                        "notes": "Creates note parameters and assigns to the correct task ",
                        "number": 3,
                        "order": 11,
                        "outPorts": [
                            "out"
                        ],
                        "outputVariables": [
                            {
                                "position": 0,
                                "type": "",
                                "value": "note_params"
                            },
                            {
                                "position": 1,
                                "type": "",
                                "value": "task_id"
                            }
                        ],
                        "parameters": [
                            {
                                "position": 0,
                                "type": "",
                                "value": "Validate customer and endpoint Information"
                            },
                            {
                                "position": 1,
                                "type": "",
                                "value": "Enumerate Logged-in Users:"
                            },
                            {
                                "position": 0,
                                "type": "",
                                "value": "format_host_spl_results:formatted_data"
                            }
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 800,
                            "y": 520
                        },
                        "previous_function": "",
                        "previous_name": "create_host_notes",
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "custom function",
                        "status": "deprecating",
                        "title": "custom function",
                        "type": "coa.FunctionBlock",
                        "userGeneratedCode": "\n    # print debug statement\n    #phantom.debug(formatted_data_1)\n    \n    if formatted_data_1:\n        content = formatted_data_1\n    else:\n        content = \"\"\" There was a failure in the action\"\"\"\n    \n    task_data = {}\n    note_params = []\n    \n    for task in phantom.get_tasks(container=container):\n        ## gets the current phase and  get 3rd tash(Review Indicators)\n        if task['data']['name'] == input_parameter_0:\n            task_data.update(task['data'])\n            phantom.debug('phantom.get_tasks found Task \"{}\" with the task_id: {}, task_name: {}'.format(input_parameter_0,task_data['id'],task_data['name']))\n    \n    note_params.append({\n            \"note_type\": \"task\",\n            \"task_id\": task_data['id'],\n            \"container_id\": container['id'],\n            \"title\": input_parameter_1,\n            \"content\": content,\n            \"phase_id\": task_data['phase']\n        })\n\n    create_host_notes__task_id = task_data['id']\n    create_host_notes__note_params = note_params\n\n",
                        "warn": false,
                        "z": 758
                    },
                    {
                        "action": "run query",
                        "action_type": "investigate",
                        "active": false,
                        "active_keys": {},
                        "active_values": {
                            "command": "",
                            "display": "Computer,user,login_count,last_login_time",
                            "parse_only": "",
                            "query": "format_host_spl_query:formatted_data.*"
                        },
                        "angle": 0,
                        "app": "Splunk",
                        "appid": "91883aa8-9c81-470b-97a1-5d8f7995f560",
                        "approver": "",
                        "assets": [
                            {
                                "action": "run query",
                                "actions": [
                                    "post data",
                                    "update event",
                                    "run query",
                                    "on poll",
                                    "get host events",
                                    "test connectivity"
                                ],
                                "active": true,
                                "app_name": "Splunk",
                                "app_version": "2.0.22",
                                "appid": "91883aa8-9c81-470b-97a1-5d8f7995f560",
                                "asset_name": "splunk-es-kelby",
                                "config_type": "asset",
                                "count": 0,
                                "fields": {
                                    "command": "",
                                    "display": "Computer,user,login_count,last_login_time",
                                    "parse_only": "",
                                    "query": "format_host_spl_query:formatted_data.*"
                                },
                                "has_app": true,
                                "id": 221,
                                "loaded": false,
                                "missing": false,
                                "name": "splunk-es-kelby",
                                "output": [
                                    {
                                        "data_path": "action_result.status",
                                        "data_type": "string",
                                        "example_values": [
                                            "success",
                                            "failed"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.parameter.command",
                                        "data_type": "string",
                                        "example_values": [
                                            "savedsearch"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.parameter.display",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.parameter.parse_only",
                                        "data_type": "boolean",
                                        "example_values": [
                                            true,
                                            false
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "splunk query"
                                        ],
                                        "data_path": "action_result.parameter.query",
                                        "data_type": "string",
                                        "example_values": [
                                            "\"Send to Phantom\""
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*._bkt",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*._cd",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*._indextime",
                                        "data_type": "string"
                                    },
                                    {
                                        "column_name": "Raw",
                                        "column_order": 2,
                                        "data_path": "action_result.data.*._raw",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*._serial",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*._si",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*._sourcetype",
                                        "data_type": "string"
                                    },
                                    {
                                        "column_name": "Time",
                                        "column_order": 1,
                                        "data_path": "action_result.data.*._time",
                                        "data_type": "string"
                                    },
                                    {
                                        "column_name": "Host",
                                        "column_order": 0,
                                        "contains": [
                                            "host name"
                                        ],
                                        "data_path": "action_result.data.*.host",
                                        "data_type": "string",
                                        "example_values": [
                                            "10.1.67.187:8088"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.index",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.linecount",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.source",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.sourcetype",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "host name"
                                        ],
                                        "data_path": "action_result.data.*.splunk_server",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.summary.total_events",
                                        "data_type": "numeric",
                                        "example_values": [
                                            2
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.summary.sid",
                                        "data_type": "string",
                                        "example_values": [
                                            "1612177958.977510"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.message",
                                        "data_type": "string",
                                        "example_values": [
                                            "Sid: 1612177958.977510, Total events: 2"
                                        ]
                                    },
                                    {
                                        "data_path": "summary.total_objects",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1
                                        ]
                                    },
                                    {
                                        "data_path": "summary.total_objects_successful",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1
                                        ]
                                    }
                                ],
                                "parameters": {
                                    "command": {
                                        "data_type": "string",
                                        "default": "search",
                                        "description": "Beginning command (in Splunk Processing Language)",
                                        "key": "command",
                                        "order": 0,
                                        "required": false,
                                        "value_list": [
                                            "search",
                                            "eval",
                                            "savedsearch",
                                            "stats",
                                            "table",
                                            "tstats"
                                        ]
                                    },
                                    "display": {
                                        "data_type": "string",
                                        "default": null,
                                        "description": "Display fields (comma-separated)",
                                        "key": "display",
                                        "order": 2,
                                        "required": false
                                    },
                                    "parse_only": {
                                        "data_type": "boolean",
                                        "default": false,
                                        "description": "Parse only",
                                        "key": "parse_only",
                                        "order": 3,
                                        "required": false
                                    },
                                    "query": {
                                        "contains": [
                                            "splunk query"
                                        ],
                                        "data_type": "string",
                                        "default": null,
                                        "description": "Query to run (in Splunk Processing Language)",
                                        "key": "query",
                                        "order": 1,
                                        "primary": true,
                                        "required": true
                                    }
                                },
                                "product_name": "Splunk Enterprise",
                                "product_vendor": "Splunk Inc.",
                                "targets": "221",
                                "type": "siem"
                            }
                        ],
                        "attrs": {
                            ".action": {
                                "text": "run  host spl query"
                            },
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "Investigate"
                            },
                            "g.approver image": {
                                "opacity": 1
                            },
                            "g.code image": {
                                "opacity": 1
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.icon image": {
                                "xlink:href": "/inc/coa/img/block_icon_investigate.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            },
                            "g.timer image": {
                                "opacity": 1
                            }
                        },
                        "block_code": "def run_host_spl_query(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('run_host_spl_query() called')\n        \n    #phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))\n    \n    # collect data for 'run_host_spl_query' call\n    formatted_data_1 = phantom.get_format_data(name='format_host_spl_query__as_list')\n\n    parameters = []\n    \n    # build parameters list for 'run_host_spl_query' call\n    for formatted_part_1 in formatted_data_1:\n        parameters.append({\n            'query': formatted_part_1,\n            'command': \"\",\n            'display': \"Computer,user,login_count,last_login_time\",\n            'parse_only': \"\",\n        })\n\n    phantom.act(action=\"run query\", parameters=parameters, assets=['splunk-es-kelby'], callback=format_host_spl_results, name=\"run_host_spl_query\")\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": true,
                        "color": "",
                        "connected_to_start": true,
                        "connection_name": "merge hostnames",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "run  host spl query",
                        "delay": "0",
                        "description": "",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "e931052d-9c7f-415b-96c8-a98d72e23c66",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 264,
                        "line_start": 241,
                        "message": "Configuring now",
                        "name": "run query",
                        "notes": "Execute SPL Query for user account(s)",
                        "number": 2,
                        "order": 10,
                        "outPorts": [
                            "out"
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 320,
                            "y": 520
                        },
                        "previous_function": "",
                        "previous_name": "run_host_spl_query",
                        "required_params": {
                            "query": true
                        },
                        "reviewer": "",
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "app_action_assets",
                        "status": "",
                        "title": "Investigate",
                        "type": "coa.Action",
                        "warn": false,
                        "z": 762
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".functionBlock": {
                                "text": "create user notes"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "custom function"
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 1
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn_grey.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            }
                        },
                        "block_code": "def create_user_notes(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('create_user_notes() called')\n    \n    input_parameter_0 = \"Validate customer and endpoint Information\"\n    input_parameter_1 = \"User Analysis Notes:\"\n    formatted_data_1 = phantom.get_format_data(name='format_user_spl_results')\n\n    create_user_notes__note_params = None\n    create_user_notes__task_id = None\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n\n    task_data = {}\n    note_params = []\n    \n    # print debug statement\n    #phantom.debug(formatted_data_1)\n    \n    if formatted_data_1:\n        content = formatted_data_1\n    else:\n        content = \"\"\" There was a failure in the action\"\"\"\n    \n    for task in phantom.get_tasks(container=container):\n        ## gets the current phase and  get 3rd tash(Review Indicators)\n        if task['data']['name'] == input_parameter_0:\n            task_data.update(task['data'])\n            phantom.debug('phantom.get_tasks found Task \"{}\" with the task_id: {}, task_name: {}'.format(input_parameter_0,task_data['id'],task_data['name']))\n        \n    note_params.append({\n            \"note_type\": \"task\",\n            \"task_id\": task_data['id'],\n            \"container_id\": container['id'],\n            \"title\": input_parameter_1,\n            \"content\": content,\n            \"phase_id\": task_data['phase'],\n        })\n    \n    create_user_notes__note_params = note_params\n    create_user_notes__task_id = task_data['id']\n\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n\n    phantom.save_run_data(key='create_user_notes:note_params', value=json.dumps(create_user_notes__note_params))\n    phantom.save_run_data(key='create_user_notes:task_id', value=json.dumps(create_user_notes__task_id))\n    create_user_task_url(container=container)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "run  user spl query",
                        "connection_type": "action",
                        "customCodeEndLineOffset": 8,
                        "customCodeStartLine": 13,
                        "custom_callback": "",
                        "custom_code": "def create_user_notes(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('create_user_notes() called')\n    \n    input_parameter_0 = \"Validate customer and host enrichment\"\n    input_parameter_1 = \"User Analysis Notes:\"\n    formatted_data_1 = phantom.get_format_data(name='format_user_spl_results')\n\n    create_user_notes__note_params = None\n    create_user_notes__task_id = None\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n\n    task_data = {}\n    note_params = []\n    \n    # print debug statement\n    #phantom.debug(formatted_data_1)\n    \n    if formatted_data_1:\n        content = formatted_data_1\n    else:\n        content = \"\"\" There was a failure in the action\"\"\"\n    \n    for task in phantom.get_tasks(container=container):\n        ## gets the current phase and  get 3rd tash(Review Indicators)\n        if task['data']['name'] == input_parameter_0:\n            task_data.update(task['data'])\n            phantom.debug('phantom.get_tasks found Task \"{}\" with the task_id: {}, task_name: {}'.format(input_parameter_0,task_data['id'],task_data['name']))\n        \n    note_params.append({\n            \"note_type\": \"task\",\n            \"task_id\": task_data['id'],\n            \"container_id\": container['id'],\n            \"title\": input_parameter_1,\n            \"content\": content,\n            \"phase_id\": task_data['phase'],\n        })\n    \n    create_user_notes__note_params = note_params\n    create_user_notes__task_id = task_data['id']\n\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n\n    phantom.save_run_data(key='create_user_notes:note_params', value=json.dumps(create_user_notes__note_params))\n    phantom.save_run_data(key='create_user_notes:task_id', value=json.dumps(create_user_notes__task_id))\n    create_user_task_url(container=container)\n\n    return",
                        "custom_join": "",
                        "custom_name": "create user notes",
                        "description": "",
                        "functionBlock": "custom function",
                        "has_custom": true,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "dc64c41f-16ca-42f6-8f22-2692e79d987a",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "legacy": true,
                        "line_end": 220,
                        "line_start": 167,
                        "message": "Configuring now",
                        "name": "custom function",
                        "notes": "Creates note parameters and assigns to the correct task ",
                        "number": 2,
                        "order": 8,
                        "outPorts": [
                            "out"
                        ],
                        "outputVariables": [
                            {
                                "position": 0,
                                "type": "",
                                "value": "note_params"
                            },
                            {
                                "position": 1,
                                "type": "",
                                "value": "task_id"
                            }
                        ],
                        "parameters": [
                            {
                                "position": 0,
                                "type": "",
                                "value": "Validate customer and endpoint Information"
                            },
                            {
                                "position": 1,
                                "type": "",
                                "value": "User Analysis Notes:"
                            },
                            {
                                "position": 0,
                                "type": "",
                                "value": "format_user_spl_results:formatted_data"
                            }
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 800,
                            "y": 400
                        },
                        "previous_function": "",
                        "previous_name": "create_user_notes",
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "custom function",
                        "status": "deprecating",
                        "title": "custom function",
                        "type": "coa.FunctionBlock",
                        "userGeneratedCode": "\n    task_data = {}\n    note_params = []\n    \n    # print debug statement\n    #phantom.debug(formatted_data_1)\n    \n    if formatted_data_1:\n        content = formatted_data_1\n    else:\n        content = \"\"\" There was a failure in the action\"\"\"\n    \n    for task in phantom.get_tasks(container=container):\n        ## gets the current phase and  get 3rd tash(Review Indicators)\n        if task['data']['name'] == input_parameter_0:\n            task_data.update(task['data'])\n            phantom.debug('phantom.get_tasks found Task \"{}\" with the task_id: {}, task_name: {}'.format(input_parameter_0,task_data['id'],task_data['name']))\n        \n    note_params.append({\n            \"note_type\": \"task\",\n            \"task_id\": task_data['id'],\n            \"container_id\": container['id'],\n            \"title\": input_parameter_1,\n            \"content\": content,\n            \"phase_id\": task_data['phase'],\n        })\n    \n    create_user_notes__note_params = note_params\n    create_user_notes__task_id = task_data['id']\n\n",
                        "warn": false,
                        "z": 763
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "api": "add comment",
                        "attrs": {
                            ".api": {
                                "text": "missing data comment"
                            },
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "API"
                            },
                            "g.code image": {
                                "opacity": 1
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            }
                        },
                        "block_code": "def missing_data_comment(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('missing_data_comment() called')\n\n    phantom.comment(container=container, comment=\"Missing user or host information to execute playbook.\")\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "color": "",
                        "configured": [
                            {
                                "addCommentComment": "Missing user or host information to execute playbook.",
                                "key": "add-comment"
                            }
                        ],
                        "connected_to_start": true,
                        "connection_name": "",
                        "connection_type": "",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "missing data comment",
                        "description": "",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "4be17749-7b0b-4a39-9627-095fa6623501",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 62,
                        "line_start": 55,
                        "message": "Configuring now",
                        "name": "add comment",
                        "notes": "Adds a missing data comment",
                        "number": 1,
                        "order": 3,
                        "outPorts": [
                            "out"
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": -400,
                            "y": 640
                        },
                        "previous_function": "",
                        "previous_name": "missing_data_comment",
                        "show_number": false,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "api",
                        "status": "",
                        "title": "API",
                        "type": "coa.API",
                        "warn": false,
                        "z": 771
                    },
                    {
                        "action": "run query",
                        "action_type": "investigate",
                        "active": false,
                        "active_keys": {},
                        "active_values": {
                            "command": "",
                            "display": "Computer,user,login_count,last_login_time",
                            "parse_only": "",
                            "query": "format_user_spl_query:formatted_data.*"
                        },
                        "angle": 0,
                        "app": "Splunk",
                        "appid": "91883aa8-9c81-470b-97a1-5d8f7995f560",
                        "approver": "",
                        "assets": [
                            {
                                "action": "run query",
                                "actions": [
                                    "post data",
                                    "update event",
                                    "run query",
                                    "on poll",
                                    "get host events",
                                    "test connectivity"
                                ],
                                "active": true,
                                "app_name": "Splunk",
                                "app_version": "2.0.22",
                                "appid": "91883aa8-9c81-470b-97a1-5d8f7995f560",
                                "asset_name": "splunk-es-kelby",
                                "config_type": "asset",
                                "count": 0,
                                "fields": {
                                    "command": "",
                                    "display": "Computer,user,login_count,last_login_time",
                                    "parse_only": "",
                                    "query": "format_user_spl_query:formatted_data.*"
                                },
                                "has_app": true,
                                "id": 221,
                                "loaded": false,
                                "missing": false,
                                "name": "splunk-es-kelby",
                                "output": [
                                    {
                                        "data_path": "action_result.status",
                                        "data_type": "string",
                                        "example_values": [
                                            "success",
                                            "failed"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.parameter.command",
                                        "data_type": "string",
                                        "example_values": [
                                            "savedsearch"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.parameter.display",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.parameter.parse_only",
                                        "data_type": "boolean",
                                        "example_values": [
                                            true,
                                            false
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "splunk query"
                                        ],
                                        "data_path": "action_result.parameter.query",
                                        "data_type": "string",
                                        "example_values": [
                                            "\"Send to Phantom\""
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*._bkt",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*._cd",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*._indextime",
                                        "data_type": "string"
                                    },
                                    {
                                        "column_name": "Raw",
                                        "column_order": 2,
                                        "data_path": "action_result.data.*._raw",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*._serial",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*._si",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*._sourcetype",
                                        "data_type": "string"
                                    },
                                    {
                                        "column_name": "Time",
                                        "column_order": 1,
                                        "data_path": "action_result.data.*._time",
                                        "data_type": "string"
                                    },
                                    {
                                        "column_name": "Host",
                                        "column_order": 0,
                                        "contains": [
                                            "host name"
                                        ],
                                        "data_path": "action_result.data.*.host",
                                        "data_type": "string",
                                        "example_values": [
                                            "10.1.67.187:8088"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.index",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.linecount",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.source",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.sourcetype",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "host name"
                                        ],
                                        "data_path": "action_result.data.*.splunk_server",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.summary.total_events",
                                        "data_type": "numeric",
                                        "example_values": [
                                            2
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.summary.sid",
                                        "data_type": "string",
                                        "example_values": [
                                            "1612177958.977510"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.message",
                                        "data_type": "string",
                                        "example_values": [
                                            "Sid: 1612177958.977510, Total events: 2"
                                        ]
                                    },
                                    {
                                        "data_path": "summary.total_objects",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1
                                        ]
                                    },
                                    {
                                        "data_path": "summary.total_objects_successful",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1
                                        ]
                                    }
                                ],
                                "parameters": {
                                    "command": {
                                        "data_type": "string",
                                        "default": "search",
                                        "description": "Beginning command (in Splunk Processing Language)",
                                        "key": "command",
                                        "order": 0,
                                        "required": false,
                                        "value_list": [
                                            "search",
                                            "eval",
                                            "savedsearch",
                                            "stats",
                                            "table",
                                            "tstats"
                                        ]
                                    },
                                    "display": {
                                        "data_type": "string",
                                        "default": null,
                                        "description": "Display fields (comma-separated)",
                                        "key": "display",
                                        "order": 2,
                                        "required": false
                                    },
                                    "parse_only": {
                                        "data_type": "boolean",
                                        "default": false,
                                        "description": "Parse only",
                                        "key": "parse_only",
                                        "order": 3,
                                        "required": false
                                    },
                                    "query": {
                                        "contains": [
                                            "splunk query"
                                        ],
                                        "data_type": "string",
                                        "default": null,
                                        "description": "Query to run (in Splunk Processing Language)",
                                        "key": "query",
                                        "order": 1,
                                        "primary": true,
                                        "required": true
                                    }
                                },
                                "product_name": "Splunk Enterprise",
                                "product_vendor": "Splunk Inc.",
                                "targets": "221",
                                "type": "siem"
                            }
                        ],
                        "attrs": {
                            ".action": {
                                "text": "run  user spl query"
                            },
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "Investigate"
                            },
                            "g.approver image": {
                                "opacity": 1
                            },
                            "g.code image": {
                                "opacity": 1
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.icon image": {
                                "xlink:href": "/inc/coa/img/block_icon_investigate.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            },
                            "g.timer image": {
                                "opacity": 1
                            }
                        },
                        "block_code": "def run_user_spl_query(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('run_user_spl_query() called')\n        \n    #phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))\n    \n    # collect data for 'run_user_spl_query' call\n    formatted_data_1 = phantom.get_format_data(name='format_user_spl_query__as_list')\n\n    parameters = []\n    \n    # build parameters list for 'run_user_spl_query' call\n    for formatted_part_1 in formatted_data_1:\n        parameters.append({\n            'query': formatted_part_1,\n            'command': \"\",\n            'display': \"Computer,user,login_count,last_login_time\",\n            'parse_only': \"\",\n        })\n\n    phantom.act(action=\"run query\", parameters=parameters, assets=['splunk-es-kelby'], callback=format_user_spl_results, name=\"run_user_spl_query\")\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": true,
                        "color": "",
                        "connected_to_start": true,
                        "connection_name": "merge usernames",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "run  user spl query",
                        "delay": 0,
                        "description": "",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "d421665c-ca54-466b-bb8a-d0328764706e",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 167,
                        "line_start": 144,
                        "message": "Configuring now",
                        "name": "run query",
                        "notes": "Execute SPL Query for user account(s)",
                        "number": 1,
                        "order": 7,
                        "outPorts": [
                            "out"
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 320,
                            "y": 400
                        },
                        "previous_function": "",
                        "previous_name": "run_user_spl_query",
                        "required_params": {
                            "query": true
                        },
                        "reviewer": "",
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "app_action_assets",
                        "status": "",
                        "title": "Investigate",
                        "type": "coa.Action",
                        "warn": false,
                        "z": 772
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".format": {
                                "text": "format user spl results"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out-1": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out-1>.port-body": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "format"
                            },
                            "g.code image": {
                                "opacity": 1
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            }
                        },
                        "block_code": "def format_user_spl_results(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('format_user_spl_results() called')\n    \n    template = \"\"\"### Account Search Results Table: \n\nMessage: {1}\n\n| Computer | User, | login_count | last_login_time |\n| ---- | ---- | ---- | ---- |\n%%\n| {2} | {3} | {4} | {5} | \n%%\n\n**SPL Query:**  `{0}`\"\"\"\n\n    # parameter list for template variable replacement\n    parameters = [\n        \"run_user_spl_query:action_result.parameter.query\",\n        \"run_user_spl_query:action_result.message\",\n        \"run_user_spl_query:action_result.data.*.computer\",\n        \"run_user_spl_query:action_result.data.*.user\",\n        \"run_user_spl_query:action_result.data.*.login_count\",\n        \"run_user_spl_query:action_result.data.*.last_login_time\",\n    ]\n\n    phantom.format(container=container, template=template, parameters=parameters, name=\"format_user_spl_results\")\n\n    create_user_notes(container=container)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "run  user spl query",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "format user spl results",
                        "description": "",
                        "format": "format",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "482503c5-ebd5-42fe-8cee-c7d609fb9b92",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 398,
                        "line_start": 367,
                        "message": "Configuring now",
                        "name": "format",
                        "notes": "Format note for User Analysis Note:",
                        "number": 12,
                        "order": 14,
                        "outPorts": [
                            "out-1"
                        ],
                        "parameters": [
                            {
                                "position": 0,
                                "type": "",
                                "value": "run_user_spl_query:action_result.parameter.query"
                            },
                            {
                                "position": 1,
                                "type": "",
                                "value": "run_user_spl_query:action_result.message"
                            },
                            {
                                "position": 2,
                                "type": "",
                                "value": "run_user_spl_query:action_result.data.*.computer"
                            },
                            {
                                "position": 3,
                                "type": "",
                                "value": "run_user_spl_query:action_result.data.*.user"
                            },
                            {
                                "position": 4,
                                "type": "",
                                "value": "run_user_spl_query:action_result.data.*.login_count"
                            },
                            {
                                "position": 5,
                                "type": "",
                                "value": "run_user_spl_query:action_result.data.*.last_login_time"
                            }
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 560,
                            "y": 400
                        },
                        "previous_function": "",
                        "previous_name": "format_user_spl_results",
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "format",
                        "status": "",
                        "template": "### Account Search Results Table: \n\nMessage: {1}\n\n| Computer | User, | login_count | last_login_time |\n| ---- | ---- | ---- | ---- |\n%%\n| {2} | {3} | {4} | {5} | \n%%\n\n\n**SPL Query:**  `{0}`",
                        "title": "format",
                        "type": "coa.Format",
                        "warn": false,
                        "z": 773
                    },
                    {
                        "0": "E",
                        "1": "N",
                        "2": "D",
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".title": {
                                "text": "END"
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.icon image": {
                                "xlink:href": "/inc/coa/img/block_icon_end.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            }
                        },
                        "block_code": "def on_finish(container, summary):\n    phantom.debug('on_finish() called')\n    # This function is called after all actions are completed.\n    # summary of all the action and/or all details of actions\n    # can be collected here.\n\n    # summary_json = phantom.get_summary()\n    # if 'result' in summary_json:\n        # for action_result in summary_json['result']:\n            # if 'action_run_id' in action_result:\n                # action_results = phantom.get_action_results(action_run_id=action_result['action_run_id'], result_data=False, flatten=False)\n                # phantom.debug(action_results)\n\n    return",
                        "callback_code": "# read-only block view not available",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "create host task notes, create user task note",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "",
                        "description": "",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "f0ffd9fe-a511-4bdd-99ee-1d83ddfa9e32",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "# read-only block view not available",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 551,
                        "line_start": 538,
                        "name": "",
                        "notes": "",
                        "number": 0,
                        "order": 19,
                        "outPorts": [],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 1540,
                            "y": 660
                        },
                        "previous_function": "",
                        "previous_name": "",
                        "show_number": true,
                        "size": {
                            "height": 54,
                            "width": 80
                        },
                        "status": "",
                        "title": "END",
                        "type": "coa.StartEnd",
                        "warn": false,
                        "z": 782
                    },
                    {
                        "action": "post data",
                        "action_type": "generic",
                        "active": false,
                        "active_keys": {},
                        "active_values": {
                            "body": "create_user_notes:custom_function:note_params",
                            "headers": "",
                            "location": "/note/",
                            "verify_certificate": "False"
                        },
                        "angle": 0,
                        "app": "",
                        "appid": "",
                        "approver": "",
                        "assets": [
                            {
                                "action": "post data",
                                "actions": [
                                    "post data",
                                    "get data",
                                    "get options",
                                    "get headers",
                                    "delete data",
                                    "patch data",
                                    "put data",
                                    "test connectivity"
                                ],
                                "active": true,
                                "app_name": "HTTP",
                                "app_version": "2.1.15",
                                "appid": "290b7499-0374-4930-9cdc-5e9b05d65827",
                                "asset_name": "phantom_rest_api",
                                "config_type": "asset",
                                "count": 0,
                                "fields": {
                                    "body": "create_user_notes:custom_function:note_params",
                                    "headers": "",
                                    "location": "/note/",
                                    "verify_certificate": "False"
                                },
                                "has_app": true,
                                "id": 215,
                                "loaded": false,
                                "missing": false,
                                "name": "phantom_rest_api",
                                "output": [
                                    {
                                        "data_path": "action_result.status",
                                        "data_type": "string",
                                        "example_values": [
                                            "failed"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.parameter.body",
                                        "data_type": "numeric",
                                        "example_values": [
                                            "{\"name\": \"Bad IP\"}"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.parameter.headers",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.parameter.location",
                                        "data_type": "string",
                                        "example_values": [
                                            "/rest/assets"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.parameter.verify_certificate",
                                        "data_type": "boolean",
                                        "example_values": [
                                            "false"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "url"
                                        ],
                                        "data_path": "action_result.data.*.location",
                                        "data_type": "string",
                                        "example_values": [
                                            "http://192.168.1.26/rest/assets"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.method",
                                        "data_type": "string",
                                        "example_values": [
                                            "POST"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.parsed_response_body",
                                        "data_type": "string",
                                        "example_values": [
                                            "{\"failed\": true, \"message\": \"Requested item not found\"}"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.response_body",
                                        "data_type": "string",
                                        "example_values": [
                                            "{\"failed\": true, \"message\": \"Requested item not found\"}"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.response_headers",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.summary.reason",
                                        "data_type": "string",
                                        "example_values": [
                                            "Not Found"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.summary.status_code",
                                        "data_type": "numeric",
                                        "example_values": [
                                            404
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.message",
                                        "data_type": "string",
                                        "example_values": [
                                            "Can't process response from server. Status Code: 404 Data from server: {\"failed\": true, \"message\": \"Requested item not found\"}"
                                        ]
                                    },
                                    {
                                        "data_path": "summary.total_objects",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1
                                        ]
                                    },
                                    {
                                        "data_path": "summary.total_objects_successful",
                                        "data_type": "numeric",
                                        "example_values": [
                                            0
                                        ]
                                    }
                                ],
                                "parameters": {
                                    "body": {
                                        "data_type": "string",
                                        "default": null,
                                        "description": "POST body (query string, JSON, etc.)",
                                        "key": "body",
                                        "order": 1,
                                        "required": true
                                    },
                                    "headers": {
                                        "data_type": "string",
                                        "default": null,
                                        "description": "Additional headers (JSON object with headers)",
                                        "key": "headers",
                                        "order": 2,
                                        "required": false
                                    },
                                    "location": {
                                        "data_type": "string",
                                        "default": null,
                                        "description": "Location (e.g. path/to/endpoint)",
                                        "key": "location",
                                        "order": 0,
                                        "required": true
                                    },
                                    "verify_certificate": {
                                        "data_type": "boolean",
                                        "default": null,
                                        "description": "Verify certificates (if using HTTPS)",
                                        "key": "verify_certificate",
                                        "order": 2,
                                        "required": true
                                    }
                                },
                                "product_name": "HTTP",
                                "product_vendor": "Generic",
                                "targets": "215",
                                "type": "information"
                            }
                        ],
                        "attrs": {
                            ".action": {
                                "text": "create user task note"
                            },
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "Generic"
                            },
                            "g.approver image": {
                                "opacity": 1
                            },
                            "g.code image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_code_dark_on.svg"
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.icon image": {
                                "xlink:href": "/inc/coa/img/block_icon_generic.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            },
                            "g.timer image": {
                                "opacity": 1
                            }
                        },
                        "block_code": "def create_user_task_note(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('create_user_task_note() called')\n        \n    #phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))\n    \n    # collect data for 'create_user_task_note' call\n    formatted_data_1 = phantom.get_format_data(name='create_user_task_url')\n\n    parameters = []\n    \n    # build parameters list for 'create_user_task_note' call\n    parameters.append({\n        'location': \"/note/\",\n        'body': formatted_data_1,\n        'headers': \"\",\n        'verify_certificate': False,\n    })\n\n    phantom.act(action=\"post data\", parameters=parameters, assets=['phantom_rest_api'], name=\"create_user_task_note\")\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": true,
                        "color": "",
                        "connected_to_start": true,
                        "connection_name": "run  user spl query",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "def create_user_task_note(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('create_user_task_note() called')\n        \n    #phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))\n    \n    create_user_notes__note_params = phantom.get_run_data(key='create_user_notes:note_params')\n    # collect data for 'create_user_task_note' call\n\n    parameters = []\n    \n    # build parameters list for 'create_user_task_note' call\n    parameters.append({\n        'location': \"/note/\",\n        'body': create_user_notes__note_params,\n        'headers': \"\",\n        'verify_certificate': False,\n    })\n\n    phantom.act(action=\"post data\", parameters=parameters, assets=['phantom_rest_api'], name=\"create_user_task_note\")\n\n    return",
                        "custom_join": "",
                        "custom_name": "create user task note",
                        "delay": 0,
                        "description": "Need make sure the data is json serializable for body content",
                        "has_custom": true,
                        "has_custom_block": true,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "de0742b5-d33a-4456-9688-6c79d00e7a2f",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 454,
                        "line_start": 432,
                        "message": "Configuring now",
                        "name": "post data",
                        "notes": "Create  user task notes for  \"Validate Customer and Host Enrichment task\" \n\n",
                        "number": 5,
                        "order": 16,
                        "outPorts": [
                            "out"
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 1280,
                            "y": 400
                        },
                        "previous_function": "",
                        "previous_name": "create_user_task_note",
                        "required_params": {
                            "body": true,
                            "location": true,
                            "verify_certificate": true
                        },
                        "reviewer": "",
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "action_assets",
                        "status": "",
                        "title": "Generic",
                        "type": "coa.Action",
                        "warn": false,
                        "z": 785
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "95db51a2-337b-430f-8472-5ed72e3ec288",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "23815a69-5f3f-41f7-98d3-c7659ef3c015",
                            "port": "out-1",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "b83258a0-d852-4941-822e-0f4b8d398d05",
                            "selector": ".port-body[type=\"input\"]"
                        },
                        "type": "link",
                        "z": 788
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "63d1bd8a-004d-4970-9bdb-396c99235960",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "b83258a0-d852-4941-822e-0f4b8d398d05",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "b22a8c6b-b5c1-4400-89e1-024b59bcac39",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 797
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "a6d0dd77-e75c-4225-9dff-fa2859dd8452",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "f8833f7c-6c1b-42fa-973b-be0e19e637cd",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "739e4a25-0b37-4afc-b2ab-45e20ed4ebfa",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 802
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "c9a94b28-c6ae-456b-844f-85562b7ebb8a",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "23815a69-5f3f-41f7-98d3-c7659ef3c015",
                            "port": "out-2",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(2) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "f8833f7c-6c1b-42fa-973b-be0e19e637cd",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 805
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".format": {
                                "text": "create user task url"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out-1": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out-1>.port-body": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "format"
                            },
                            "g.code image": {
                                "opacity": 1
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            }
                        },
                        "block_code": "def create_user_task_url(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('create_user_task_url() called')\n    \n    template = \"\"\"/workbook_task/{0}\"\"\"\n\n    # parameter list for template variable replacement\n    parameters = [\n        \"create_user_notes:custom_function:task_id\",\n    ]\n\n    phantom.format(container=container, template=template, parameters=parameters, name=\"create_user_task_url\")\n\n    create_user_task_note(container=container)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "run  user spl query",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "create user task url",
                        "description": "",
                        "format": "format",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "5a8ac34a-77dc-464d-9e1e-bd66e46ccfb5",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 123,
                        "line_start": 107,
                        "message": "Configuring now",
                        "name": "format",
                        "notes": "Create the task url for adding notes to workbook task",
                        "number": 7,
                        "order": 5,
                        "outPorts": [
                            "out-1"
                        ],
                        "parameters": [
                            {
                                "position": 0,
                                "type": "",
                                "value": "create_user_notes:custom_function:task_id"
                            }
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 1040,
                            "y": 400
                        },
                        "previous_function": "",
                        "previous_name": "create_user_task_url",
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "format",
                        "status": "",
                        "template": "/workbook_task/{0}",
                        "title": "format",
                        "type": "coa.Format",
                        "warn": false,
                        "z": 807
                    },
                    {
                        ".scmName/text": "enrichment",
                        "active": false,
                        "active_keys": {},
                        "active_values": {},
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".customFunction": {
                                "text": "merge usernames"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".scmName": {
                                "text": "enrichment"
                            },
                            ".title": {
                                "text": "custom function"
                            },
                            ".title-info": {
                                "text": ""
                            },
                            "g.branch image": {
                                "opacity": 1
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            }
                        },
                        "block_code": "def merge_usernames(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('merge_usernames() called')\n    \n    filtered_artifacts_data_0 = phantom.collect2(container=container, datapath=['filtered-data:user_and_host_filter:condition_1:artifact:*.cef.destinationUserId', 'filtered-data:user_and_host_filter:condition_1:artifact:*.cef.destinationUserName', 'filtered-data:user_and_host_filter:condition_1:artifact:*.cef.duser', 'filtered-data:user_and_host_filter:condition_1:artifact:*.cef.sourceUserId', 'filtered-data:user_and_host_filter:condition_1:artifact:*.cef.sourceUserName', 'filtered-data:user_and_host_filter:condition_1:artifact:*.cef.suser'])\n\n    parameters = []\n\n    filtered_artifacts_data_0_0 = [item[0] for item in filtered_artifacts_data_0]\n    filtered_artifacts_data_0_1 = [item[1] for item in filtered_artifacts_data_0]\n    filtered_artifacts_data_0_2 = [item[2] for item in filtered_artifacts_data_0]\n    filtered_artifacts_data_0_3 = [item[3] for item in filtered_artifacts_data_0]\n    filtered_artifacts_data_0_4 = [item[4] for item in filtered_artifacts_data_0]\n    filtered_artifacts_data_0_5 = [item[5] for item in filtered_artifacts_data_0]\n\n    parameters.append({\n        'input_1': filtered_artifacts_data_0_0,\n        'input_2': filtered_artifacts_data_0_1,\n        'input_3': filtered_artifacts_data_0_2,\n        'input_4': filtered_artifacts_data_0_3,\n        'input_5': filtered_artifacts_data_0_4,\n        'input_6': filtered_artifacts_data_0_5,\n        'input_7': None,\n        'input_8': None,\n        'input_9': None,\n        'input_10': None,\n    })\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n\n    # Write your custom code here...\n\n    ################################################################################\n    ## Custom Code End\n    ################################################################################    \n\n    # call custom function \"enrichment/list_merge_dedup\", returns the custom_function_run_id\n    phantom.custom_function(custom_function='enrichment/list_merge_dedup', parameters=parameters, name='merge_usernames', callback=format_user_spl_query)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": true,
                        "cfDisplayPath": "enrichment/list_merge_dedup",
                        "cfInputs": {
                            "input_1": {
                                "collectionType": "filtered_artifacts_data",
                                "dataPath": "filtered-data:user_and_host_filter:condition_1:artifact:*.cef.destinationUserId",
                                "paramName": "filtered_artifacts_data_0_0",
                                "type": "list"
                            },
                            "input_10": {
                                "dataPath": "",
                                "type": "list"
                            },
                            "input_2": {
                                "collectionType": "filtered_artifacts_data",
                                "dataPath": "filtered-data:user_and_host_filter:condition_1:artifact:*.cef.destinationUserName",
                                "paramName": "filtered_artifacts_data_0_1",
                                "type": "list"
                            },
                            "input_3": {
                                "collectionType": "filtered_artifacts_data",
                                "dataPath": "filtered-data:user_and_host_filter:condition_1:artifact:*.cef.duser",
                                "paramName": "filtered_artifacts_data_0_2",
                                "type": "list"
                            },
                            "input_4": {
                                "collectionType": "filtered_artifacts_data",
                                "dataPath": "filtered-data:user_and_host_filter:condition_1:artifact:*.cef.sourceUserId",
                                "paramName": "filtered_artifacts_data_0_3",
                                "type": "list"
                            },
                            "input_5": {
                                "collectionType": "filtered_artifacts_data",
                                "dataPath": "filtered-data:user_and_host_filter:condition_1:artifact:*.cef.sourceUserName",
                                "paramName": "filtered_artifacts_data_0_4",
                                "type": "list"
                            },
                            "input_6": {
                                "collectionType": "filtered_artifacts_data",
                                "dataPath": "filtered-data:user_and_host_filter:condition_1:artifact:*.cef.suser",
                                "paramName": "filtered_artifacts_data_0_5",
                                "type": "list"
                            },
                            "input_7": {
                                "dataPath": "",
                                "type": "list"
                            },
                            "input_8": {
                                "dataPath": "",
                                "type": "list"
                            },
                            "input_9": {
                                "dataPath": "",
                                "type": "list"
                            }
                        },
                        "color": "",
                        "connected_to_start": true,
                        "connection_name": "",
                        "connection_type": "",
                        "currentVersion": true,
                        "customCodeEndLineOffset": 7,
                        "customCodeStartLine": 29,
                        "customFunction": "enrichment/list_merge_dedup",
                        "customFunctionId": null,
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "merge usernames",
                        "delay": 0,
                        "description": "",
                        "draftMode": false,
                        "existingCF": true,
                        "functionBlock": "custom function",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "b83258a0-d852-4941-822e-0f4b8d398d05",
                        "inPorts": [
                            "in"
                        ],
                        "input_1-0": "filtered-data:user_and_host_filter:condition_1:artifact:*.cef.destinationUserId",
                        "input_2-1": "filtered-data:user_and_host_filter:condition_1:artifact:*.cef.destinationUserName",
                        "input_3-2": "filtered-data:user_and_host_filter:condition_1:artifact:*.cef.duser",
                        "input_4-3": "filtered-data:user_and_host_filter:condition_1:artifact:*.cef.sourceUserId",
                        "input_5-4": "filtered-data:user_and_host_filter:condition_1:artifact:*.cef.sourceUserName",
                        "input_6-5": "filtered-data:user_and_host_filter:condition_1:artifact:*.cef.suser",
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 495,
                        "line_start": 454,
                        "message": "Configuring now",
                        "name": "list_merge_dedup",
                        "notes": "Merges usernames regardless of source name:\ndestinationUserID\ndestinationUserName\nduser\nsourceUserId\nsourceUserName\nsuser",
                        "number": 2,
                        "order": 17,
                        "outPorts": [
                            "out"
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": -160,
                            "y": 400
                        },
                        "previous_function": "",
                        "previous_name": "merge_usernames",
                        "selectedCustomFunction": {
                            "description": "Merge 2-10 different data paths into a single output data path. For example, if IP addresses are stored in the fields sourceAddress, destinationAddress, and deviceAddress, then those three fields could be merged together to form a single list of IP addresses.",
                            "draftMode": false,
                            "id": 173,
                            "inputs": [
                                {
                                    "_pretty_custom_function": "list_merge_dedup",
                                    "contains_type": [
                                        "*"
                                    ],
                                    "custom_function": 173,
                                    "description": "",
                                    "id": 561,
                                    "input_type": "list",
                                    "name": "input_1",
                                    "placeholder": ""
                                },
                                {
                                    "_pretty_custom_function": "list_merge_dedup",
                                    "contains_type": [
                                        "*"
                                    ],
                                    "custom_function": 173,
                                    "description": "",
                                    "id": 562,
                                    "input_type": "list",
                                    "name": "input_2",
                                    "placeholder": ""
                                },
                                {
                                    "_pretty_custom_function": "list_merge_dedup",
                                    "contains_type": [
                                        "*"
                                    ],
                                    "custom_function": 173,
                                    "description": "",
                                    "id": 563,
                                    "input_type": "list",
                                    "name": "input_3",
                                    "placeholder": ""
                                },
                                {
                                    "_pretty_custom_function": "list_merge_dedup",
                                    "contains_type": [
                                        "*"
                                    ],
                                    "custom_function": 173,
                                    "description": "",
                                    "id": 564,
                                    "input_type": "list",
                                    "name": "input_4",
                                    "placeholder": ""
                                },
                                {
                                    "_pretty_custom_function": "list_merge_dedup",
                                    "contains_type": [
                                        "*"
                                    ],
                                    "custom_function": 173,
                                    "description": "",
                                    "id": 565,
                                    "input_type": "list",
                                    "name": "input_5",
                                    "placeholder": ""
                                },
                                {
                                    "_pretty_custom_function": "list_merge_dedup",
                                    "contains_type": [
                                        "*"
                                    ],
                                    "custom_function": 173,
                                    "description": "",
                                    "id": 566,
                                    "input_type": "list",
                                    "name": "input_6",
                                    "placeholder": ""
                                },
                                {
                                    "_pretty_custom_function": "list_merge_dedup",
                                    "contains_type": [
                                        "*"
                                    ],
                                    "custom_function": 173,
                                    "description": "",
                                    "id": 567,
                                    "input_type": "list",
                                    "name": "input_7",
                                    "placeholder": ""
                                },
                                {
                                    "_pretty_custom_function": "list_merge_dedup",
                                    "contains_type": [
                                        "*"
                                    ],
                                    "custom_function": 173,
                                    "description": "",
                                    "id": 568,
                                    "input_type": "list",
                                    "name": "input_8",
                                    "placeholder": ""
                                },
                                {
                                    "_pretty_custom_function": "list_merge_dedup",
                                    "contains_type": [
                                        "*"
                                    ],
                                    "custom_function": 173,
                                    "description": "",
                                    "id": 569,
                                    "input_type": "list",
                                    "name": "input_9",
                                    "placeholder": ""
                                },
                                {
                                    "_pretty_custom_function": "list_merge_dedup",
                                    "contains_type": [
                                        "*"
                                    ],
                                    "custom_function": 173,
                                    "description": "",
                                    "id": 570,
                                    "input_type": "list",
                                    "name": "input_10",
                                    "placeholder": ""
                                }
                            ],
                            "name": "list_merge_dedup",
                            "outputs": [
                                {
                                    "_pretty_custom_function": "list_merge_dedup",
                                    "contains_type": [
                                        "*"
                                    ],
                                    "custom_function": 173,
                                    "data_path": "*.item",
                                    "description": "A combined list of all the values from all the input lists",
                                    "id": 216
                                }
                            ],
                            "playbooks": {
                                "draft_playbooks": [],
                                "draft_version_id": null,
                                "playbooks": [
                                    {
                                        "active": false,
                                        "display_path": "enrichment/Analyze user-host activity",
                                        "draft_mode": false,
                                        "id": 4006,
                                        "name": "Analyze user-host activity",
                                        "viewable": true
                                    },
                                    {
                                        "active": false,
                                        "display_path": "enrichment/Analyze user-host activity_py3",
                                        "draft_mode": false,
                                        "id": 4008,
                                        "name": "Analyze user-host activity_py3",
                                        "viewable": true
                                    }
                                ]
                            },
                            "scmId": 63,
                            "scmName": "enrichment"
                        },
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "repo",
                        "status": "",
                        "title": "custom function",
                        "type": "coa.CustomFunctionBlock",
                        "userGeneratedCode": "    # Write your custom code here...",
                        "warn": false,
                        "z": 808
                    },
                    {
                        ".scmName/text": "enrichment",
                        "active": false,
                        "active_keys": {},
                        "active_values": {},
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".customFunction": {
                                "text": "merge hostnames"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".scmName": {
                                "text": "enrichment"
                            },
                            ".title": {
                                "text": "custom function"
                            },
                            ".title-info": {
                                "text": ""
                            },
                            "g.branch image": {
                                "opacity": 1
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            }
                        },
                        "block_code": "def merge_hostnames(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('merge_hostnames() called')\n    \n    filtered_artifacts_data_0 = phantom.collect2(container=container, datapath=['filtered-data:user_and_host_filter:condition_2:artifact:*.cef.destinationAddress', 'filtered-data:user_and_host_filter:condition_2:artifact:*.cef.dest_ip', 'filtered-data:user_and_host_filter:condition_2:artifact:*.cef.destinationHostName', 'filtered-data:user_and_host_filter:condition_2:artifact:*.cef.dhost', 'filtered-data:user_and_host_filter:condition_2:artifact:*.cef.sourceAddress', 'filtered-data:user_and_host_filter:condition_2:artifact:*.cef.src_ip', 'filtered-data:user_and_host_filter:condition_2:artifact:*.cef.sourceHostName', 'filtered-data:user_and_host_filter:condition_2:artifact:*.cef.shost'])\n\n    parameters = []\n\n    filtered_artifacts_data_0_0 = [item[0] for item in filtered_artifacts_data_0]\n    filtered_artifacts_data_0_1 = [item[1] for item in filtered_artifacts_data_0]\n    filtered_artifacts_data_0_2 = [item[2] for item in filtered_artifacts_data_0]\n    filtered_artifacts_data_0_3 = [item[3] for item in filtered_artifacts_data_0]\n    filtered_artifacts_data_0_4 = [item[4] for item in filtered_artifacts_data_0]\n    filtered_artifacts_data_0_5 = [item[5] for item in filtered_artifacts_data_0]\n    filtered_artifacts_data_0_6 = [item[6] for item in filtered_artifacts_data_0]\n    filtered_artifacts_data_0_7 = [item[7] for item in filtered_artifacts_data_0]\n\n    parameters.append({\n        'input_1': filtered_artifacts_data_0_0,\n        'input_2': filtered_artifacts_data_0_1,\n        'input_3': filtered_artifacts_data_0_2,\n        'input_4': filtered_artifacts_data_0_3,\n        'input_5': filtered_artifacts_data_0_4,\n        'input_6': filtered_artifacts_data_0_5,\n        'input_7': filtered_artifacts_data_0_6,\n        'input_8': filtered_artifacts_data_0_7,\n        'input_9': None,\n        'input_10': None,\n    })\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n\n    # Write your custom code here...\n\n    ################################################################################\n    ## Custom Code End\n    ################################################################################    \n\n    # call custom function \"enrichment/list_merge_dedup\", returns the custom_function_run_id\n    phantom.custom_function(custom_function='enrichment/list_merge_dedup', parameters=parameters, name='merge_hostnames', callback=format_host_spl_query)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": true,
                        "cfDisplayPath": "enrichment/list_merge_dedup",
                        "cfInputs": {
                            "input_1": {
                                "collectionType": "filtered_artifacts_data",
                                "dataPath": "filtered-data:user_and_host_filter:condition_2:artifact:*.cef.destinationAddress",
                                "paramName": "filtered_artifacts_data_0_0",
                                "type": "list"
                            },
                            "input_10": {
                                "dataPath": "",
                                "type": "list"
                            },
                            "input_2": {
                                "collectionType": "filtered_artifacts_data",
                                "dataPath": "filtered-data:user_and_host_filter:condition_2:artifact:*.cef.dest_ip",
                                "paramName": "filtered_artifacts_data_0_1",
                                "type": "list"
                            },
                            "input_3": {
                                "collectionType": "filtered_artifacts_data",
                                "dataPath": "filtered-data:user_and_host_filter:condition_2:artifact:*.cef.destinationHostName",
                                "paramName": "filtered_artifacts_data_0_2",
                                "type": "list"
                            },
                            "input_4": {
                                "collectionType": "filtered_artifacts_data",
                                "dataPath": "filtered-data:user_and_host_filter:condition_2:artifact:*.cef.dhost",
                                "paramName": "filtered_artifacts_data_0_3",
                                "type": "list"
                            },
                            "input_5": {
                                "collectionType": "filtered_artifacts_data",
                                "dataPath": "filtered-data:user_and_host_filter:condition_2:artifact:*.cef.sourceAddress",
                                "paramName": "filtered_artifacts_data_0_4",
                                "type": "list"
                            },
                            "input_6": {
                                "collectionType": "filtered_artifacts_data",
                                "dataPath": "filtered-data:user_and_host_filter:condition_2:artifact:*.cef.src_ip",
                                "paramName": "filtered_artifacts_data_0_5",
                                "type": "list"
                            },
                            "input_7": {
                                "collectionType": "filtered_artifacts_data",
                                "dataPath": "filtered-data:user_and_host_filter:condition_2:artifact:*.cef.sourceHostName",
                                "paramName": "filtered_artifacts_data_0_6",
                                "type": "list"
                            },
                            "input_8": {
                                "collectionType": "filtered_artifacts_data",
                                "dataPath": "filtered-data:user_and_host_filter:condition_2:artifact:*.cef.shost",
                                "paramName": "filtered_artifacts_data_0_7",
                                "type": "list"
                            },
                            "input_9": {
                                "dataPath": "",
                                "type": "list"
                            }
                        },
                        "color": "",
                        "connected_to_start": true,
                        "connection_name": "",
                        "connection_type": "",
                        "currentVersion": true,
                        "customCodeEndLineOffset": 7,
                        "customCodeStartLine": 31,
                        "customFunction": "enrichment/list_merge_dedup",
                        "customFunctionId": null,
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "merge hostnames",
                        "delay": 0,
                        "description": "",
                        "draftMode": false,
                        "existingCF": true,
                        "functionBlock": "custom function",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "f8833f7c-6c1b-42fa-973b-be0e19e637cd",
                        "inPorts": [
                            "in"
                        ],
                        "input_1-0": "filtered-data:user_and_host_filter:condition_2:artifact:*.cef.destinationAddress",
                        "input_2-1": "filtered-data:user_and_host_filter:condition_2:artifact:*.cef.dest_ip",
                        "input_3-2": "filtered-data:user_and_host_filter:condition_2:artifact:*.cef.destinationHostName",
                        "input_4-3": "filtered-data:user_and_host_filter:condition_2:artifact:*.cef.dhost",
                        "input_5-4": "filtered-data:user_and_host_filter:condition_2:artifact:*.cef.sourceAddress",
                        "input_6-5": "filtered-data:user_and_host_filter:condition_2:artifact:*.cef.src_ip",
                        "input_7-6": "filtered-data:user_and_host_filter:condition_2:artifact:*.cef.sourceHostName",
                        "input_8-7": "filtered-data:user_and_host_filter:condition_2:artifact:*.cef.shost",
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 538,
                        "line_start": 495,
                        "message": "Configuring now",
                        "name": "list_merge_dedup",
                        "notes": "Merges ip and hostnames into a single source:\ndestinationAddress\ndest_ip\ndestinationHostName\ndhost\nsourceAddress\nsrc_ip\nsourceHostName\nshost",
                        "number": 3,
                        "order": 18,
                        "outPorts": [
                            "out"
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": -160,
                            "y": 520
                        },
                        "previous_function": "",
                        "previous_name": "merge_hostnames",
                        "selectedCustomFunction": {
                            "description": "Merge 2-10 different data paths into a single output data path. For example, if IP addresses are stored in the fields sourceAddress, destinationAddress, and deviceAddress, then those three fields could be merged together to form a single list of IP addresses.",
                            "draftMode": false,
                            "id": 173,
                            "inputs": [
                                {
                                    "_pretty_custom_function": "list_merge_dedup",
                                    "contains_type": [
                                        "*"
                                    ],
                                    "custom_function": 173,
                                    "description": "",
                                    "id": 561,
                                    "input_type": "list",
                                    "name": "input_1",
                                    "placeholder": ""
                                },
                                {
                                    "_pretty_custom_function": "list_merge_dedup",
                                    "contains_type": [
                                        "*"
                                    ],
                                    "custom_function": 173,
                                    "description": "",
                                    "id": 562,
                                    "input_type": "list",
                                    "name": "input_2",
                                    "placeholder": ""
                                },
                                {
                                    "_pretty_custom_function": "list_merge_dedup",
                                    "contains_type": [
                                        "*"
                                    ],
                                    "custom_function": 173,
                                    "description": "",
                                    "id": 563,
                                    "input_type": "list",
                                    "name": "input_3",
                                    "placeholder": ""
                                },
                                {
                                    "_pretty_custom_function": "list_merge_dedup",
                                    "contains_type": [
                                        "*"
                                    ],
                                    "custom_function": 173,
                                    "description": "",
                                    "id": 564,
                                    "input_type": "list",
                                    "name": "input_4",
                                    "placeholder": ""
                                },
                                {
                                    "_pretty_custom_function": "list_merge_dedup",
                                    "contains_type": [
                                        "*"
                                    ],
                                    "custom_function": 173,
                                    "description": "",
                                    "id": 565,
                                    "input_type": "list",
                                    "name": "input_5",
                                    "placeholder": ""
                                },
                                {
                                    "_pretty_custom_function": "list_merge_dedup",
                                    "contains_type": [
                                        "*"
                                    ],
                                    "custom_function": 173,
                                    "description": "",
                                    "id": 566,
                                    "input_type": "list",
                                    "name": "input_6",
                                    "placeholder": ""
                                },
                                {
                                    "_pretty_custom_function": "list_merge_dedup",
                                    "contains_type": [
                                        "*"
                                    ],
                                    "custom_function": 173,
                                    "description": "",
                                    "id": 567,
                                    "input_type": "list",
                                    "name": "input_7",
                                    "placeholder": ""
                                },
                                {
                                    "_pretty_custom_function": "list_merge_dedup",
                                    "contains_type": [
                                        "*"
                                    ],
                                    "custom_function": 173,
                                    "description": "",
                                    "id": 568,
                                    "input_type": "list",
                                    "name": "input_8",
                                    "placeholder": ""
                                },
                                {
                                    "_pretty_custom_function": "list_merge_dedup",
                                    "contains_type": [
                                        "*"
                                    ],
                                    "custom_function": 173,
                                    "description": "",
                                    "id": 569,
                                    "input_type": "list",
                                    "name": "input_9",
                                    "placeholder": ""
                                },
                                {
                                    "_pretty_custom_function": "list_merge_dedup",
                                    "contains_type": [
                                        "*"
                                    ],
                                    "custom_function": 173,
                                    "description": "",
                                    "id": 570,
                                    "input_type": "list",
                                    "name": "input_10",
                                    "placeholder": ""
                                }
                            ],
                            "name": "list_merge_dedup",
                            "outputs": [
                                {
                                    "_pretty_custom_function": "list_merge_dedup",
                                    "contains_type": [
                                        "*"
                                    ],
                                    "custom_function": 173,
                                    "data_path": "*.item",
                                    "description": "A combined list of all the values from all the input lists",
                                    "id": 216
                                }
                            ],
                            "playbooks": {
                                "draft_playbooks": [],
                                "draft_version_id": null,
                                "playbooks": [
                                    {
                                        "active": false,
                                        "display_path": "enrichment/Analyze user-host activity",
                                        "draft_mode": false,
                                        "id": 4006,
                                        "name": "Analyze user-host activity",
                                        "viewable": true
                                    },
                                    {
                                        "active": false,
                                        "display_path": "enrichment/Analyze user-host activity_py3",
                                        "draft_mode": false,
                                        "id": 4008,
                                        "name": "Analyze user-host activity_py3",
                                        "viewable": true
                                    }
                                ]
                            },
                            "scmId": 63,
                            "scmName": "enrichment"
                        },
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "repo",
                        "status": "",
                        "title": "custom function",
                        "type": "coa.CustomFunctionBlock",
                        "userGeneratedCode": "    # Write your custom code here...",
                        "warn": false,
                        "z": 810
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773",
                                "transform": "rotate(45 30 70)"
                            },
                            ".inPorts>.port-0>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".number": {
                                "text": 1
                            },
                            ".outPorts>.port-0": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                },
                                "ref-x": 83,
                                "ref-y": 40
                            },
                            ".outPorts>.port-0>.port-body": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                }
                            },
                            ".outPorts>.port-1": {
                                "port": {
                                    "id": "out-2",
                                    "type": "out"
                                },
                                "ref-x": 41,
                                "ref-y": 82
                            },
                            ".outPorts>.port-1>.port-body": {
                                "port": {
                                    "id": "out-2",
                                    "type": "out"
                                }
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_error.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            }
                        },
                        "block_code": "def user_and_host_filter(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('user_and_host_filter() called')\n\n    # collect filtered artifact ids for 'if' condition 1\n    matched_artifacts_1, matched_results_1 = phantom.condition(\n        container=container,\n        conditions=[\n            [\"artifact:*.cef.destinationUserId\", \"not in\", \"custom_list:bogon_list\"],\n            [\"artifact:*.cef.destinationUserName\", \"not in\", \"custom_list:bogon_list\"],\n            [\"artifact:*.cef.duser\", \"not in\", \"custom_list:bogon_list\"],\n            [\"artifact:*.cef.sourceUserId\", \"not in\", \"custom_list:bogon_list\"],\n            [\"artifact:*.cef.sourceUserName\", \"not in\", \"custom_list:bogon_list\"],\n            [\"artifact:*.cef.suser\", \"not in\", \"custom_list:bogon_list\"],\n        ],\n        logical_operator='or',\n        name=\"user_and_host_filter:condition_1\")\n\n    # call connected blocks if filtered artifacts or results\n    if matched_artifacts_1 or matched_results_1:\n        merge_usernames(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function, filtered_artifacts=matched_artifacts_1, filtered_results=matched_results_1)\n\n    # collect filtered artifact ids for 'if' condition 2\n    matched_artifacts_2, matched_results_2 = phantom.condition(\n        container=container,\n        conditions=[\n            [\"artifact:*.cef.dest\", \"in\", \"custom_list:bogon_list\"],\n            [\"artifact:*.cef.destinationAddress\", \"not in\", \"custom_list:bogon_list\"],\n            [\"artifact:*.cef.dest_ip\", \"==\", \"custom_list:bogon_list\"],\n            [\"artifact:*.cef.destinationHostName\", \"in\", \"custom_list:bogon_list\"],\n            [\"artifact:*.cef.src\", \"in\", \"custom_list:bogon_list\"],\n            [\"artifact:*.cef.src_ip\", \"in\", \"custom_list:bogon_list\"],\n            [\"artifact:*.cef.sourceAddress\", \"in\", \"custom_list:bogon_list\"],\n            [\"artifact:*.cef.dhost\", \"not in\", \"custom_list:bogon_list\"],\n            [\"artifact:*.cef.shost\", \"not in\", \"custom_list:bogon_list\"],\n            [\"artifact:*.cef.sourceHostName\", \"not in\", \"custom_list:bogon_list\"],\n        ],\n        logical_operator='or',\n        name=\"user_and_host_filter:condition_2\")\n\n    # call connected blocks if filtered artifacts or results\n    if matched_artifacts_2 or matched_results_2:\n        merge_hostnames(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function, filtered_artifacts=matched_artifacts_2, filtered_results=matched_results_2)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "",
                        "connection_type": "",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "user and host filter",
                        "description": "",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "23815a69-5f3f-41f7-98d3-c7659ef3c015",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 107,
                        "line_start": 62,
                        "name": "filter",
                        "notes": "Filters for usernames and hostnames:\n\nBLUE: if destinationUserID, destinationUserName, duser, sourceUserId, sourceUserName, suser and not in the bogon_list\n\nPURPLE: if destinationAddress, dest_ip, destinationHostName, dhost, sourceAddress\nsrc_ip, sourceHostName, shost and not in the bogon_list\n",
                        "number": 1,
                        "order": 4,
                        "outPorts": [
                            "out-1",
                            "out-2"
                        ],
                        "outputs": [
                            {
                                "conditions": [
                                    {
                                        "comparison": "not in",
                                        "data_type": "",
                                        "param": "artifact:*.cef.destinationUserId",
                                        "value": "custom_list:bogon_list"
                                    },
                                    {
                                        "comparison": "not in",
                                        "data_type": "",
                                        "param": "artifact:*.cef.destinationUserName",
                                        "value": "custom_list:bogon_list"
                                    },
                                    {
                                        "comparison": "not in",
                                        "data_type": "",
                                        "param": "artifact:*.cef.duser",
                                        "value": "custom_list:bogon_list"
                                    },
                                    {
                                        "comparison": "not in",
                                        "data_type": "",
                                        "param": "artifact:*.cef.sourceUserId",
                                        "value": "custom_list:bogon_list"
                                    },
                                    {
                                        "comparison": "not in",
                                        "data_type": "",
                                        "param": "artifact:*.cef.sourceUserName",
                                        "value": "custom_list:bogon_list"
                                    },
                                    {
                                        "comparison": "not in",
                                        "data_type": "",
                                        "param": "artifact:*.cef.suser",
                                        "value": "custom_list:bogon_list"
                                    }
                                ],
                                "display": "If",
                                "logic": "or",
                                "type": "if"
                            },
                            {
                                "conditions": [
                                    {
                                        "comparison": "in",
                                        "data_type": "",
                                        "param": "artifact:*.cef.dest",
                                        "value": "custom_list:bogon_list"
                                    },
                                    {
                                        "comparison": "not in",
                                        "data_type": "",
                                        "param": "artifact:*.cef.destinationAddress",
                                        "value": "custom_list:bogon_list"
                                    },
                                    {
                                        "comparison": "==",
                                        "data_type": "",
                                        "param": "artifact:*.cef.dest_ip",
                                        "value": "custom_list:bogon_list"
                                    },
                                    {
                                        "comparison": "in",
                                        "data_type": "",
                                        "param": "artifact:*.cef.destinationHostName",
                                        "value": "custom_list:bogon_list"
                                    },
                                    {
                                        "comparison": "in",
                                        "data_type": "",
                                        "param": "artifact:*.cef.src",
                                        "value": "custom_list:bogon_list"
                                    },
                                    {
                                        "comparison": "in",
                                        "data_type": "",
                                        "param": "artifact:*.cef.src_ip",
                                        "value": "custom_list:bogon_list"
                                    },
                                    {
                                        "comparison": "in",
                                        "data_type": "",
                                        "param": "artifact:*.cef.sourceAddress",
                                        "value": "custom_list:bogon_list"
                                    },
                                    {
                                        "comparison": "not in",
                                        "data_type": "",
                                        "param": "artifact:*.cef.dhost",
                                        "value": "custom_list:bogon_list"
                                    },
                                    {
                                        "comparison": "not in",
                                        "data_type": "",
                                        "param": "artifact:*.cef.shost",
                                        "value": "custom_list:bogon_list"
                                    },
                                    {
                                        "comparison": "not in",
                                        "data_type": "",
                                        "param": "artifact:*.cef.sourceHostName",
                                        "value": "custom_list:bogon_list"
                                    }
                                ],
                                "display": "If",
                                "logic": "or",
                                "type": "if"
                            }
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": -340,
                            "y": 400
                        },
                        "previous_function": "",
                        "previous_name": "user_and_host_filter",
                        "show_number": true,
                        "size": {
                            "height": 82,
                            "width": 82
                        },
                        "state": "filter",
                        "status": "",
                        "type": "coa.Filter",
                        "warn": false,
                        "z": 811
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#637282",
                                "transform": "rotate(45 30 70)"
                            },
                            ".inPorts>.port-0>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".number": {
                                "text": 1
                            },
                            ".outPorts>.port-0": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                },
                                "ref-x": 83,
                                "ref-y": 40
                            },
                            ".outPorts>.port-0>.port-body": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                }
                            },
                            ".outPorts>.port-1": {
                                "port": {
                                    "id": "out-2",
                                    "type": "out"
                                },
                                "ref-x": 41,
                                "ref-y": 82
                            },
                            ".outPorts>.port-1>.port-body": {
                                "port": {
                                    "id": "out-2",
                                    "type": "out"
                                }
                            },
                            "g.delete": {
                                "display": "block"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            }
                        },
                        "block_code": "def check_user_and_host(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('check_user_and_host() called')\n\n    # check for 'if' condition 1\n    matched = phantom.decision(\n        container=container,\n        conditions=[\n            [\"artifact:*.cef.destinationUserId\", \"not in\", \"custom_list:bogon_list\"],\n            [\"artifact:*.cef.destinationUserName\", \"not in\", \"custom_list:bogon_list\"],\n            [\"artifact:*.cef.duser\", \"not in\", \"custom_list:bogon_list\"],\n            [\"artifact:*.cef.sourceUserId\", \"not in\", \"custom_list:bogon_list\"],\n            [\"artifact:*.cef.sourceUserName\", \"not in\", \"custom_list:bogon_list\"],\n            [\"artifact:*.cef.suser\", \"not in\", \"custom_list:bogon_list\"],\n            [\"artifact:*.cef.dest\", \"in\", \"custom_list:bogon_list\"],\n            [\"artifact:*.cef.destinationAddress\", \"in\", \"custom_list:bogon_list\"],\n            [\"artifact:*.cef.dest_ip\", \"in\", \"custom_list:bogon_list\"],\n            [\"artifact:*.cef.destinationHostName\", \"not in\", \"custom_list:bogon_list\"],\n            [\"artifact:*.cef.src\", \"in\", \"custom_list:bogon_list\"],\n            [\"artifact:*.cef.src_ip\", \"in\", \"custom_list:bogon_list\"],\n            [\"artifact:*.cef.sourceAddress\", \"in\", \"custom_list:bogon_list\"],\n            [\"artifact:*.cef.sourceHostName\", \"not in\", \"custom_list:bogon_list\"],\n            [\"artifact:*.cef.dhost\", \"not in\", \"custom_list:bogon_list\"],\n            [\"artifact:*.cef.shost\", \"not in\", \"custom_list:bogon_list\"],\n        ],\n        logical_operator='or')\n\n    # call connected blocks if condition 1 matched\n    if matched:\n        user_and_host_filter(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function)\n        return\n\n    # call connected blocks for 'else' condition 2\n    missing_data_comment(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "",
                        "connection_type": "",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "check user and host",
                        "description": "Check for user and ip parameters not in bogon_list",
                        "hasElse": true,
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "e081b380-1f06-4c06-80c8-f43cd72fbbb3",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 55,
                        "line_start": 19,
                        "name": "decision",
                        "notes": "\n\nGREEN: if user, duser, suser are not in bogon_list (allow list) OR sourceAddress, src, src_ip, destinationAddress, dest, dest_ip in bogon_list (internal addresses)\n\nPURPLE: if missing add a comment of missing artifact",
                        "number": 1,
                        "order": 2,
                        "outPorts": [
                            "out-1",
                            "out-2"
                        ],
                        "outputs": [
                            {
                                "conditions": [
                                    {
                                        "comparison": "not in",
                                        "data_type": "",
                                        "param": "artifact:*.cef.destinationUserId",
                                        "value": "custom_list:bogon_list"
                                    },
                                    {
                                        "comparison": "not in",
                                        "data_type": "",
                                        "param": "artifact:*.cef.destinationUserName",
                                        "value": "custom_list:bogon_list"
                                    },
                                    {
                                        "comparison": "not in",
                                        "data_type": "",
                                        "param": "artifact:*.cef.duser",
                                        "value": "custom_list:bogon_list"
                                    },
                                    {
                                        "comparison": "not in",
                                        "data_type": "",
                                        "param": "artifact:*.cef.sourceUserId",
                                        "value": "custom_list:bogon_list"
                                    },
                                    {
                                        "comparison": "not in",
                                        "data_type": "",
                                        "param": "artifact:*.cef.sourceUserName",
                                        "value": "custom_list:bogon_list"
                                    },
                                    {
                                        "comparison": "not in",
                                        "data_type": "",
                                        "param": "artifact:*.cef.suser",
                                        "value": "custom_list:bogon_list"
                                    },
                                    {
                                        "comparison": "in",
                                        "data_type": "",
                                        "param": "artifact:*.cef.dest",
                                        "value": "custom_list:bogon_list"
                                    },
                                    {
                                        "comparison": "in",
                                        "data_type": "",
                                        "param": "artifact:*.cef.destinationAddress",
                                        "value": "custom_list:bogon_list"
                                    },
                                    {
                                        "comparison": "in",
                                        "data_type": "",
                                        "param": "artifact:*.cef.dest_ip",
                                        "value": "custom_list:bogon_list"
                                    },
                                    {
                                        "comparison": "not in",
                                        "data_type": "",
                                        "param": "artifact:*.cef.destinationHostName",
                                        "value": "custom_list:bogon_list"
                                    },
                                    {
                                        "comparison": "in",
                                        "data_type": "",
                                        "param": "artifact:*.cef.src",
                                        "value": "custom_list:bogon_list"
                                    },
                                    {
                                        "comparison": "in",
                                        "data_type": "",
                                        "param": "artifact:*.cef.src_ip",
                                        "value": "custom_list:bogon_list"
                                    },
                                    {
                                        "comparison": "in",
                                        "data_type": "",
                                        "param": "artifact:*.cef.sourceAddress",
                                        "value": "custom_list:bogon_list"
                                    },
                                    {
                                        "comparison": "not in",
                                        "data_type": "",
                                        "param": "artifact:*.cef.sourceHostName",
                                        "value": "custom_list:bogon_list"
                                    },
                                    {
                                        "comparison": "not in",
                                        "data_type": "",
                                        "param": "artifact:*.cef.dhost",
                                        "value": "custom_list:bogon_list"
                                    },
                                    {
                                        "comparison": "not in",
                                        "data_type": "",
                                        "param": "artifact:*.cef.shost",
                                        "value": "custom_list:bogon_list"
                                    }
                                ],
                                "display": "If",
                                "logic": "or",
                                "type": "if"
                            },
                            {
                                "conditions": [
                                    {
                                        "comparison": "==",
                                        "data_type": "",
                                        "param": "",
                                        "value": ""
                                    }
                                ],
                                "display": "Else",
                                "logic": "and",
                                "type": "else"
                            }
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": -480,
                            "y": 400
                        },
                        "previous_function": "",
                        "previous_name": "check_user_and_host",
                        "show_number": true,
                        "size": {
                            "height": 82,
                            "width": 82
                        },
                        "state": "decision",
                        "status": "",
                        "type": "coa.Decision",
                        "warn": "",
                        "z": 812
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".format": {
                                "text": "format host spl results"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out-1": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out-1>.port-body": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "format"
                            },
                            "g.code image": {
                                "opacity": 1
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            }
                        },
                        "block_code": "def format_host_spl_results(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('format_host_spl_results() called')\n    \n    template = \"\"\"### Host Search Results:\n\nMessage: {1}\n\n| Computer | user, | login_count | last_login_time |\n| ---- | ---- | ---- | ---- |\n%%\n| {2} | {3} | {4} | {5} | \n%%\n\n**SPL Query:**  `{0}`\"\"\"\n\n    # parameter list for template variable replacement\n    parameters = [\n        \"run_host_spl_query:action_result.parameter.query\",\n        \"run_host_spl_query:action_result.message\",\n        \"run_host_spl_query:action_result.data.*.computer\",\n        \"run_host_spl_query:action_result.data.*.user\",\n        \"run_host_spl_query:action_result.data.*.login_count\",\n        \"run_host_spl_query:action_result.data.*.last_login_time\",\n    ]\n\n    phantom.format(container=container, template=template, parameters=parameters, name=\"format_host_spl_results\")\n\n    create_host_notes(container=container)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "run  host spl query",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "format host spl results",
                        "description": "",
                        "format": "format",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "13c8951d-79ef-4e2b-8a4c-87981ed24ad2",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 429,
                        "line_start": 398,
                        "message": "Configuring now",
                        "name": "format",
                        "notes": "Format note for Enumerate Logged-in Users:",
                        "number": 13,
                        "order": 15,
                        "outPorts": [
                            "out-1"
                        ],
                        "parameters": [
                            {
                                "position": 0,
                                "type": "",
                                "value": "run_host_spl_query:action_result.parameter.query"
                            },
                            {
                                "position": 1,
                                "type": "",
                                "value": "run_host_spl_query:action_result.message"
                            },
                            {
                                "position": 2,
                                "type": "",
                                "value": "run_host_spl_query:action_result.data.*.computer"
                            },
                            {
                                "position": 3,
                                "type": "",
                                "value": "run_host_spl_query:action_result.data.*.user"
                            },
                            {
                                "position": 4,
                                "type": "",
                                "value": "run_host_spl_query:action_result.data.*.login_count"
                            },
                            {
                                "position": 5,
                                "type": "",
                                "value": "run_host_spl_query:action_result.data.*.last_login_time"
                            }
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 560,
                            "y": 520
                        },
                        "previous_function": "",
                        "previous_name": "format_host_spl_results",
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "format",
                        "status": "",
                        "template": "### Host Search Results:\n\nMessage: {1}\n\n| Computer | user, | login_count | last_login_time |\n| ---- | ---- | ---- | ---- |\n%%\n| {2} | {3} | {4} | {5} | \n%%\n\n\n**SPL Query:**  `{0}`",
                        "title": "format",
                        "type": "coa.Format",
                        "warn": false,
                        "z": 813
                    }
                ]
            },
            "notes": "INPUT: domain artifact\nINTERACTION:Whois, VirusTotal, APIVoid, Alienvault,ThreatConnect.\nACTION: domain reputation, whois domain, hunt domain\nARTIFACTS:\nP1: get intel and reputation, create a new task and add a note with the summarized intel\nP2: if domain name is missing, add comment."
        },
        "python_version": "3",
        "schema": 4,
        "version": "4.10.3.51237"
    },
    "create_time": "2021-05-08T11:16:34.027950+00:00",
    "draft_mode": false,
    "labels": [
        "*"
    ],
    "tags": []
}