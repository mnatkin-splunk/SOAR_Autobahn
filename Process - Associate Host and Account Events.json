{
    "blockly": false,
    "blockly_xml": "<xml></xml>",
    "category": "ESCU",
    "coa": {
        "data": {
            "clean": true,
            "code_block": "import datetime",
            "description": "This playbook assigns the task to the account executing the playbook, sets the status to inprocessing and prompts the analyst to review the events presented to determine if we need to associate this event to another case or we need to create a case and associate other events to this case.",
            "joint": {
                "cells": [
                    {
                        "0": "S",
                        "1": "T",
                        "2": "A",
                        "3": "R",
                        "4": "T",
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "ref-x": 33,
                                "ref-y": 8,
                                "text": "START"
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.icon image": {
                                "ref-x": 13,
                                "xlink:href": "/inc/coa/img/block_icon_start.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            }
                        },
                        "block_code": "def on_start(container):\n    phantom.debug('on_start() called')\n    \n    # call 'get_and_set_owner' block\n    get_and_set_owner(container=container)\n\n    return",
                        "callback_code": "# read-only block view not available",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "",
                        "connection_type": "",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "",
                        "description": "",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "5340d719-b067-4c65-b266-5ce1afeadd3a",
                        "inPorts": [],
                        "join_code": "# read-only block view not available",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 24,
                        "line_start": 16,
                        "name": "",
                        "notes": "",
                        "number": 0,
                        "order": 1,
                        "outPorts": [
                            "out"
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 280,
                            "y": 100
                        },
                        "previous_function": "",
                        "previous_name": "",
                        "show_number": true,
                        "size": {
                            "height": 54,
                            "width": 80
                        },
                        "status": "",
                        "title": "START",
                        "type": "coa.StartEnd",
                        "warn": false,
                        "z": 4
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "2b069137-3904-4761-8839-5e0192d01e79",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "5340d719-b067-4c65-b266-5ce1afeadd3a",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "3df83d91-6df1-49ed-b638-3273d753a587",
                            "selector": ".port-body[type=\"input\"]"
                        },
                        "type": "link",
                        "z": 5
                    },
                    {
                        "0": "E",
                        "1": "N",
                        "2": "D",
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".title": {
                                "text": "END"
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.icon image": {
                                "xlink:href": "/inc/coa/img/block_icon_end.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            }
                        },
                        "block_code": "def on_finish(container, summary):\n    phantom.debug('on_finish() called')\n    # This function is called after all actions are completed.\n    # summary of all the action and/or all details of actions\n    # can be collected here.\n\n    # summary_json = phantom.get_summary()\n    # if 'result' in summary_json:\n        # for action_result in summary_json['result']:\n            # if 'action_run_id' in action_result:\n                # action_results = phantom.get_action_results(action_run_id=action_result['action_run_id'], result_data=False, flatten=False)\n                # phantom.debug(action_results)\n\n    return",
                        "callback_code": "# read-only block view not available",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "review associated events, review associated events, review associated events, get username",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "",
                        "description": "",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "3c94bf7c-15cf-4fc4-8484-98e73a4c79be",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "# read-only block view not available",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 934,
                        "line_start": 921,
                        "name": "",
                        "notes": "",
                        "number": 0,
                        "order": 34,
                        "outPorts": [],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 2660,
                            "y": 780
                        },
                        "previous_function": "",
                        "previous_name": "",
                        "show_number": true,
                        "size": {
                            "height": 54,
                            "width": 80
                        },
                        "status": "",
                        "title": "END",
                        "type": "coa.StartEnd",
                        "warn": false,
                        "z": 659
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "3a041e27-26b2-4906-9580-22e60ce8d68a",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "039ac24f-e7a6-4c6e-b0ed-5f2e3ef05931",
                            "port": "out-1",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "64bcead4-550f-4b61-b513-92592078049f",
                            "selector": ".port-body[type=\"input\"]"
                        },
                        "type": "link",
                        "z": 728
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "a13cae09-501a-404e-8a15-d1567bda7f50",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "039ac24f-e7a6-4c6e-b0ed-5f2e3ef05931",
                            "port": "out-2",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(2) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "f3635437-e5a0-41c3-b3b7-937298d942be",
                            "selector": ".port-body[type=\"input\"]"
                        },
                        "type": "link",
                        "z": 757
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "bd940184-c1af-4144-a00b-aede7071178f",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "5178d75f-4ac4-4337-b9a2-4779d3ad25f7",
                            "port": "out-1",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "f3635437-e5a0-41c3-b3b7-937298d942be",
                            "port": "in",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 766
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "bb3fadf9-e403-4480-91f7-f064f407786f",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "e41b7e68-b5f9-4b8e-b90e-be5c384add62",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "8a99e7bf-acfb-4330-91d7-cd096d7d9b2e",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 772
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "cbcb1383-d6a2-4d6c-8264-5164b809e79d",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "adf875b4-b05d-4193-8785-d59482543a75",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "b0b9bfa5-7bbe-4865-8219-dce0692e503d",
                            "selector": ".port-body[type=\"input\"]"
                        },
                        "type": "link",
                        "z": 776
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "6d6644ee-ce7f-4a99-9e73-4d0d82969bd3",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "b0b9bfa5-7bbe-4865-8219-dce0692e503d",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "ce1600d9-bf99-4c0a-82a9-d077c21cd79f",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 786
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "c42104cd-7454-4318-a0de-170519767bc7",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "ce1600d9-bf99-4c0a-82a9-d077c21cd79f",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "ee076d0c-3bfe-421c-93b8-58fd43d46b7f",
                            "selector": ".port-body[type=\"input\"]"
                        },
                        "type": "link",
                        "z": 798
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "563281a9-699f-47dd-bb0c-c4deb4eebaeb",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "f0136bbe-f95f-43f0-9a98-a04a6578b25b",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "1916da3e-84a1-4e87-bca8-2d6a71bfe1aa",
                            "selector": ".port-body[type=\"input\"]"
                        },
                        "type": "link",
                        "z": 810
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "0e582431-ef1e-47fc-8a74-e63e6b31db20",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "86878137-5ff3-4bba-b9ae-b11b1954b16a",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "e7616d89-721b-4b42-818d-24b554b3f324",
                            "selector": ".port-body[type=\"input\"]"
                        },
                        "type": "link",
                        "z": 886
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "b137f21b-c3ff-4366-9684-e5bf590f1560",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "039ac24f-e7a6-4c6e-b0ed-5f2e3ef05931",
                            "port": "out-3",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(3) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "a4062615-e039-4022-a94d-ba4a5fdb2db4",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 912
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "94016557-cd3c-40e1-81f5-e2ac0d5dc59f",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "e7616d89-721b-4b42-818d-24b554b3f324",
                            "port": "out-2",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(2) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "d15e5f29-e53d-4092-bbe9-a0bc6605da55",
                            "selector": ".port-body[type=\"input\"]"
                        },
                        "type": "link",
                        "z": 920
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "6c7487f8-5fb7-494d-aeee-33be811f8cc2",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "3df83d91-6df1-49ed-b638-3273d753a587",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "f0136bbe-f95f-43f0-9a98-a04a6578b25b",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 1012
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "f49532e4-0c32-421c-b05c-4682dbf41323",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "1916da3e-84a1-4e87-bca8-2d6a71bfe1aa",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "039ac24f-e7a6-4c6e-b0ed-5f2e3ef05931",
                            "port": "in",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 1014
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".format": {
                                "text": "user url"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out-1": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out-1>.port-body": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "format"
                            },
                            "g.code image": {
                                "opacity": 1
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            }
                        },
                        "block_code": "def user_url(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('user_url() called')\n    \n    template = \"\"\"ph_user/{0}\"\"\"\n\n    # parameter list for template variable replacement\n    parameters = [\n        \"get_and_set_owner:custom_function:owner\",\n    ]\n\n    phantom.format(container=container, template=template, parameters=parameters, name=\"user_url\")\n\n    get_username(container=container)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "",
                        "connection_type": "",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "user url",
                        "description": "",
                        "format": "format",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "f0136bbe-f95f-43f0-9a98-a04a6578b25b",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 430,
                        "line_start": 414,
                        "message": "Configuring now",
                        "name": "format",
                        "notes": "Format phantom user url",
                        "number": 9,
                        "order": 15,
                        "outPorts": [
                            "out-1"
                        ],
                        "parameters": [
                            {
                                "position": 0,
                                "type": "",
                                "value": "get_and_set_owner:custom_function:owner"
                            }
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 660,
                            "y": 80
                        },
                        "previous_function": "",
                        "previous_name": "user_url",
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "format",
                        "status": "",
                        "template": "ph_user/{0}",
                        "title": "format",
                        "type": "coa.Format",
                        "warn": false,
                        "z": 1021
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "a597bd51-d0e3-49b0-bfb4-b9b4ef46d169",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "e7616d89-721b-4b42-818d-24b554b3f324",
                            "port": "out-1",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "a511c795-1629-449e-a2fd-9c4b12733156",
                            "port": "in",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 1039
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "8d15f214-609d-4d4c-b9df-50f7ef42d142",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "0808d036-469e-4450-bcd8-5e54e749fccf",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "3c94bf7c-15cf-4fc4-8484-98e73a4c79be",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 1048
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "e09518ab-1c71-4c6f-aeaf-adb743b86c8e",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "d15e5f29-e53d-4092-bbe9-a0bc6605da55",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "3c94bf7c-15cf-4fc4-8484-98e73a4c79be",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 1049
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "c1dbc00f-82fe-4741-a90c-858d399cb085",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "8a99e7bf-acfb-4330-91d7-cd096d7d9b2e",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "98898cd6-75ba-40a5-98d3-18e1f2d85fde",
                            "selector": ".port-body[type=\"input\"]"
                        },
                        "type": "link",
                        "z": 1058
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "e549d611-55c0-49a7-a238-5ce2c28ae1f2",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "98898cd6-75ba-40a5-98d3-18e1f2d85fde",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "a85ebecb-8619-49e2-9be0-fdda363bee6e",
                            "selector": ".port-body[type=\"input\"]"
                        },
                        "type": "link",
                        "z": 1060
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "bede2da9-e9f0-4ed8-a67e-d3756a4b0f03",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "a85ebecb-8619-49e2-9be0-fdda363bee6e",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "f6c4b8f2-6230-41d7-9cbc-2823b52e7c4d",
                            "selector": ".port-body[type=\"input\"]"
                        },
                        "type": "link",
                        "z": 1084
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "f56e5920-9367-488d-93a1-661ca1c9e076",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "4a41ee21-193c-454c-bafd-f80955c83e0e",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "070c6c4b-a4b8-44d9-a6a3-5111e0372ec4",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 1121
                    },
                    {
                        "action": "get data",
                        "action_type": "investigate",
                        "active": false,
                        "active_keys": {},
                        "active_values": {
                            "headers": "",
                            "location": "user_url:formatted_data",
                            "verify_certificate": "False"
                        },
                        "angle": 0,
                        "app": "",
                        "appid": "",
                        "approver": "",
                        "assets": [
                            {
                                "action": "get data",
                                "actions": [
                                    "post data",
                                    "get data",
                                    "get options",
                                    "get headers",
                                    "delete data",
                                    "patch data",
                                    "put data",
                                    "test connectivity"
                                ],
                                "active": true,
                                "app_name": "HTTP",
                                "app_version": "2.1.15",
                                "appid": "290b7499-0374-4930-9cdc-5e9b05d65827",
                                "asset_name": "phantom_rest_api",
                                "config_type": "asset",
                                "count": 0,
                                "fields": {
                                    "headers": "",
                                    "location": "user_url:formatted_data",
                                    "verify_certificate": "False"
                                },
                                "has_app": true,
                                "id": 215,
                                "loaded": false,
                                "missing": false,
                                "name": "phantom_rest_api",
                                "output": [
                                    {
                                        "data_path": "action_result.status",
                                        "data_type": "string",
                                        "example_values": [
                                            "success",
                                            "failed"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.parameter.headers",
                                        "data_type": "string",
                                        "example_values": [
                                            "{\"Content-Type\": \"application/json\"}"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "endpoint"
                                        ],
                                        "data_path": "action_result.parameter.location",
                                        "data_type": "string",
                                        "example_values": [
                                            "/rest/cont"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.parameter.verify_certificate",
                                        "data_type": "boolean",
                                        "example_values": [
                                            false
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "url"
                                        ],
                                        "data_path": "action_result.data.*.location",
                                        "data_type": "string",
                                        "example_values": [
                                            "http://192.168.1.26/rest/cont"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.method",
                                        "data_type": "string",
                                        "example_values": [
                                            "GET"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.parsed_response_body",
                                        "data_type": "string",
                                        "example_values": [
                                            "{\"failed\": true, \"message\": \"Requested item not found\"}"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.response_body",
                                        "data_type": "string",
                                        "example_values": [
                                            "{\"failed\": true, \"message\": \"Requested item not found\"}"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.response_headers",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.summary.reason",
                                        "data_type": "string",
                                        "example_values": [
                                            "Not Found"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.summary.status_code",
                                        "data_type": "numeric",
                                        "example_values": [
                                            404
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.message",
                                        "data_type": "string",
                                        "example_values": [
                                            "Can't process response from server. Status Code: 404 Data from server: {\"failed\": true, \"message\": \"Requested item not found\"}"
                                        ]
                                    },
                                    {
                                        "data_path": "summary.total_objects",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1
                                        ]
                                    },
                                    {
                                        "data_path": "summary.total_objects_successful",
                                        "data_type": "numeric",
                                        "example_values": [
                                            0
                                        ]
                                    }
                                ],
                                "parameters": {
                                    "headers": {
                                        "data_type": "string",
                                        "default": null,
                                        "description": "Additional headers (JSON object with headers)",
                                        "key": "headers",
                                        "order": 2,
                                        "required": false
                                    },
                                    "location": {
                                        "data_type": "string",
                                        "default": null,
                                        "description": "Location (e.g. path/to/endpoint?query=string)",
                                        "key": "location",
                                        "order": 0,
                                        "required": true
                                    },
                                    "verify_certificate": {
                                        "data_type": "boolean",
                                        "default": null,
                                        "description": "Verify certificates (if using HTTPS)",
                                        "key": "verify_certificate",
                                        "order": 1,
                                        "required": true
                                    }
                                },
                                "product_name": "HTTP",
                                "product_vendor": "Generic",
                                "targets": "215",
                                "type": "information"
                            }
                        ],
                        "attrs": {
                            ".action": {
                                "text": "get username"
                            },
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "Investigate"
                            },
                            "g.approver image": {
                                "opacity": 1
                            },
                            "g.code image": {
                                "opacity": 1
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.icon image": {
                                "xlink:href": "/inc/coa/img/block_icon_investigate.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            },
                            "g.timer image": {
                                "opacity": 1
                            }
                        },
                        "block_code": "def get_username(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('get_username() called')\n\n    # collect data for 'get_username' call\n    formatted_data_1 = phantom.get_format_data(name='user_url')\n\n    parameters = []\n    \n    # build parameters list for 'get_username' call\n    parameters.append({\n        'headers': \"\",\n        'location': formatted_data_1,\n        'verify_certificate': False,\n    })\n\n    phantom.act(action=\"get data\", parameters=parameters, assets=['phantom_rest_api'], callback=check_user_host_info, name=\"get_username\")\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": true,
                        "color": "",
                        "connected_to_start": true,
                        "connection_name": "",
                        "connection_type": "",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "get username",
                        "delay": 0,
                        "description": "",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "1916da3e-84a1-4e87-bca8-2d6a71bfe1aa",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 449,
                        "line_start": 430,
                        "message": "Configuring now",
                        "name": "get data",
                        "notes": "Gets Phantom Username using the Phantom REST API",
                        "number": 1,
                        "order": 16,
                        "outPorts": [
                            "out"
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 900,
                            "y": 80
                        },
                        "previous_function": "",
                        "previous_name": "get_username",
                        "required_params": {
                            "location": true,
                            "verify_certificate": true
                        },
                        "reviewer": "",
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "action_assets",
                        "status": "",
                        "title": "Investigate",
                        "type": "coa.Action",
                        "warn": false,
                        "z": 1186
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "6f1aa3b9-3675-4b21-8fa7-ecf475e014eb",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "baf52861-969f-499c-8a4c-e6800915fe14",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "0808d036-469e-4450-bcd8-5e54e749fccf",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 1241
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "dabc9bec-42aa-4a97-8a7f-74144a703802",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "ee076d0c-3bfe-421c-93b8-58fd43d46b7f",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "43d68aa2-f5a2-4723-8905-83c8e74d6322",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 1248
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "3c851cfe-551b-4404-aa1d-572db89d611b",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "f6c4b8f2-6230-41d7-9cbc-2823b52e7c4d",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "9ee71409-cea6-486e-a44f-b33095a4d3e4",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 1249
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "b9848764-1745-4164-b615-f95b6d9ddb8e",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "9ee71409-cea6-486e-a44f-b33095a4d3e4",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "5178d75f-4ac4-4337-b9a2-4779d3ad25f7",
                            "port": "in",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 1250
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "fbc27e8e-86f4-4246-bbc2-75768bed4596",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "43d68aa2-f5a2-4723-8905-83c8e74d6322",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "f4418509-3c94-4778-ba94-75a0d9214b5d",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 1251
                    },
                    {
                        "action": "get data",
                        "action_type": "investigate",
                        "active": false,
                        "active_keys": {},
                        "active_values": {
                            "body": "",
                            "headers": "",
                            "location": "indicator_userid_url:formatted_data.*",
                            "verify_certificate": "False"
                        },
                        "angle": 0,
                        "app": "",
                        "appid": "",
                        "approver": "",
                        "assets": [
                            {
                                "action": "post data",
                                "actions": [
                                    "post data",
                                    "get data",
                                    "get options",
                                    "get headers",
                                    "delete data",
                                    "patch data",
                                    "put data",
                                    "test connectivity"
                                ],
                                "active": true,
                                "app_name": "HTTP",
                                "app_version": "2.1.15",
                                "appid": "290b7499-0374-4930-9cdc-5e9b05d65827",
                                "asset_name": "phantom_rest_api",
                                "config_type": "asset",
                                "count": 0,
                                "fields": {
                                    "headers": "",
                                    "location": "indicator_userid_url:formatted_data.*",
                                    "verify_certificate": "False"
                                },
                                "has_app": true,
                                "id": 215,
                                "loaded": false,
                                "missing": false,
                                "name": "phantom_rest_api",
                                "output": [
                                    {
                                        "data_path": "action_result.status",
                                        "data_type": "string",
                                        "example_values": [
                                            "success",
                                            "failed"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.parameter.headers",
                                        "data_type": "string",
                                        "example_values": [
                                            "{\"Content-Type\": \"application/json\"}"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "endpoint"
                                        ],
                                        "data_path": "action_result.parameter.location",
                                        "data_type": "string",
                                        "example_values": [
                                            "/rest/cont"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.parameter.verify_certificate",
                                        "data_type": "boolean",
                                        "example_values": [
                                            false
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "url"
                                        ],
                                        "data_path": "action_result.data.*.location",
                                        "data_type": "string",
                                        "example_values": [
                                            "http://192.168.1.26/rest/cont"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.method",
                                        "data_type": "string",
                                        "example_values": [
                                            "GET"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.parsed_response_body",
                                        "data_type": "string",
                                        "example_values": [
                                            "{\"failed\": true, \"message\": \"Requested item not found\"}"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.response_body",
                                        "data_type": "string",
                                        "example_values": [
                                            "{\"failed\": true, \"message\": \"Requested item not found\"}"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.response_headers",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.summary.reason",
                                        "data_type": "string",
                                        "example_values": [
                                            "Not Found"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.summary.status_code",
                                        "data_type": "numeric",
                                        "example_values": [
                                            404
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.message",
                                        "data_type": "string",
                                        "example_values": [
                                            "Can't process response from server. Status Code: 404 Data from server: {\"failed\": true, \"message\": \"Requested item not found\"}"
                                        ]
                                    },
                                    {
                                        "data_path": "summary.total_objects",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1
                                        ]
                                    },
                                    {
                                        "data_path": "summary.total_objects_successful",
                                        "data_type": "numeric",
                                        "example_values": [
                                            0
                                        ]
                                    }
                                ],
                                "parameters": {
                                    "body": {
                                        "data_type": "string",
                                        "default": null,
                                        "description": "POST body (query string, JSON, etc.)",
                                        "key": "body",
                                        "order": 1,
                                        "required": true
                                    },
                                    "headers": {
                                        "data_type": "string",
                                        "default": null,
                                        "description": "Additional headers (JSON object with headers)",
                                        "key": "headers",
                                        "order": 2,
                                        "required": false
                                    },
                                    "location": {
                                        "data_type": "string",
                                        "default": null,
                                        "description": "Location (e.g. path/to/endpoint)",
                                        "key": "location",
                                        "order": 0,
                                        "required": true
                                    },
                                    "verify_certificate": {
                                        "data_type": "boolean",
                                        "default": null,
                                        "description": "Verify certificates (if using HTTPS)",
                                        "key": "verify_certificate",
                                        "order": 2,
                                        "required": true
                                    }
                                },
                                "product_name": "HTTP",
                                "product_vendor": "Generic",
                                "targets": "215",
                                "type": "information"
                            }
                        ],
                        "attrs": {
                            ".action": {
                                "text": "get userid indicators"
                            },
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "Investigate"
                            },
                            "g.approver image": {
                                "opacity": 1
                            },
                            "g.code image": {
                                "opacity": 1
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.icon image": {
                                "xlink:href": "/inc/coa/img/block_icon_investigate.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            },
                            "g.timer image": {
                                "opacity": 1
                            }
                        },
                        "block_code": "def get_userid_indicators(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('get_userid_indicators() called')\n        \n    #phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))\n    \n    # collect data for 'get_userid_indicators' call\n    formatted_data_1 = phantom.get_format_data(name='indicator_userid_url__as_list')\n\n    parameters = []\n    \n    # build parameters list for 'get_userid_indicators' call\n    for formatted_part_1 in formatted_data_1:\n        parameters.append({\n            'headers': \"\",\n            'location': formatted_part_1,\n            'verify_certificate': False,\n        })\n\n    phantom.act(action=\"get data\", parameters=parameters, assets=['phantom_rest_api'], callback=common_userid_format, name=\"get_userid_indicators\")\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": true,
                        "color": "",
                        "connected_to_start": true,
                        "connection_name": "merge usernames",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "get userid indicators",
                        "delay": 0,
                        "description": "",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "b0b9bfa5-7bbe-4865-8219-dce0692e503d",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 293,
                        "line_start": 271,
                        "message": "Configuring now",
                        "name": "get data",
                        "notes": "Gets the user indicators using the Phantom REST API",
                        "number": 3,
                        "order": 11,
                        "outPorts": [
                            "out"
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 1120,
                            "y": 360
                        },
                        "previous_function": "",
                        "previous_name": "get_userid_indicators",
                        "required_params": {
                            "location": true,
                            "verify_certificate": true
                        },
                        "reviewer": "",
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "action_assets",
                        "status": "",
                        "title": "Investigate",
                        "type": "coa.Action",
                        "warn": false,
                        "z": 1264
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "7ebe640e-69c9-4f7e-8768-16dfbc30b1ff",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "a511c795-1629-449e-a2fd-9c4b12733156",
                            "port": "out-2",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(2) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "ff3feafe-6bbc-4b65-90d9-e1dca56227ac",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 1284
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "052115a2-7ddd-4596-a314-70de14ca5070",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "a511c795-1629-449e-a2fd-9c4b12733156",
                            "port": "out-1",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "baf52861-969f-499c-8a4c-e6800915fe14",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 1286
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "5d56ab46-abde-4afc-841e-acf8663b87df",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "ff3feafe-6bbc-4b65-90d9-e1dca56227ac",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "baf52861-969f-499c-8a4c-e6800915fe14",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 1287
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "api": "add note",
                        "attrs": {
                            ".api": {
                                "text": "create task complete note"
                            },
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "API"
                            },
                            "g.code image": {
                                "opacity": 1
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            }
                        },
                        "block_code": "def create_task_complete_note(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('create_task_complete_note() called')\n\n    formatted_data_1 = phantom.get_format_data(name='general_note_format')\n\n    note_title = \"Associated Events\"\n    note_content = formatted_data_1\n    note_format = \"markdown\"\n    phantom.add_note(container=container, note_type=\"general\", title=note_title, content=note_content, note_format=note_format)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "color": "",
                        "configured": [
                            {
                                "addNoteContent": "general_note_format:formatted_data",
                                "addNoteNoteFormat": "markdown",
                                "addNoteTitle": "Associated Events",
                                "key": "add-note"
                            }
                        ],
                        "connected_to_start": true,
                        "connection_name": "review associated events, review associated events",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "create task complete note",
                        "description": "",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "0808d036-469e-4450-bcd8-5e54e749fccf",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 553,
                        "line_start": 541,
                        "message": "Configuring now",
                        "name": "add note",
                        "notes": "Creates the task completion note\n\nThis note has the analyst's feedback from the prompt",
                        "number": 5,
                        "order": 21,
                        "outPorts": [
                            "out"
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 2400,
                            "y": 520
                        },
                        "previous_function": "",
                        "previous_name": "create_task_complete_note",
                        "show_number": false,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "api",
                        "status": "",
                        "title": "API",
                        "type": "coa.API",
                        "warn": false,
                        "z": 1295
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "a758be8f-639c-4aaf-b5d5-8edbcc93014e",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "67bbb97b-d460-4627-99b7-85ceac7928c8",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "86878137-5ff3-4bba-b9ae-b11b1954b16a",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 1315
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "0fb40d46-532a-447c-9f03-104e422cf55e",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "070c6c4b-a4b8-44d9-a6a3-5111e0372ec4",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "67bbb97b-d460-4627-99b7-85ceac7928c8",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 1316
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "de277a98-63cb-4563-95c2-711b2d8c290f",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "f4418509-3c94-4778-ba94-75a0d9214b5d",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "4a41ee21-193c-454c-bafd-f80955c83e0e",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 1317
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "3b086d81-8a58-4f61-81f1-ede4df1c8aa1",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "5178d75f-4ac4-4337-b9a2-4779d3ad25f7",
                            "port": "out-2",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(2) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "4a41ee21-193c-454c-bafd-f80955c83e0e",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 1319
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#637282",
                                "transform": "rotate(45 30 70)"
                            },
                            ".inPorts>.port-0>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".number": {
                                "text": 4
                            },
                            ".outPorts>.port-0": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                },
                                "ref-x": 83,
                                "ref-y": 40
                            },
                            ".outPorts>.port-0>.port-body": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                }
                            },
                            ".outPorts>.port-1": {
                                "port": {
                                    "id": "out-2",
                                    "type": "out"
                                },
                                "ref-x": 41,
                                "ref-y": 82
                            },
                            ".outPorts>.port-1>.port-body": {
                                "port": {
                                    "id": "out-2",
                                    "type": "out"
                                }
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            }
                        },
                        "block_code": "def validate_prompt(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('validate_prompt() called')\n\n    # check for 'if' condition 1\n    matched = phantom.decision(\n        container=container,\n        action_results=results,\n        conditions=[\n            [\"review_associated_events:action_result.status\", \"==\", \"success\"],\n        ])\n\n    # call connected blocks if condition 1 matched\n    if matched:\n        check_to_create_a_case(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function)\n        return\n\n    # call connected blocks for 'else' condition 2\n    sla_expiration_comment(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "review associated events",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "validate prompt",
                        "description": "",
                        "hasElse": true,
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "e7616d89-721b-4b42-818d-24b554b3f324",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 541,
                        "line_start": 520,
                        "name": "decision",
                        "notes": "Validates prompt success",
                        "number": 4,
                        "order": 20,
                        "outPorts": [
                            "out-1",
                            "out-2"
                        ],
                        "outputs": [
                            {
                                "conditions": [
                                    {
                                        "comparison": "==",
                                        "data_type": "",
                                        "param": "review_associated_events:action_result.status",
                                        "value": "success"
                                    }
                                ],
                                "display": "If",
                                "logic": "and",
                                "type": "if"
                            },
                            {
                                "conditions": [
                                    {
                                        "comparison": "==",
                                        "data_type": "",
                                        "param": "",
                                        "value": ""
                                    }
                                ],
                                "display": "Else",
                                "logic": "and",
                                "type": "else"
                            }
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 1460,
                            "y": 520
                        },
                        "previous_function": "",
                        "previous_name": "validate_prompt",
                        "show_number": true,
                        "size": {
                            "height": 82,
                            "width": 82
                        },
                        "state": "decision",
                        "status": "",
                        "type": "coa.Decision",
                        "warn": "",
                        "z": 1330
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "approver": "admin",
                        "approver_display": "Phantom admin",
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".number": {
                                "text": 1
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            }
                        },
                        "block_code": "def review_associated_events(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('review_associated_events() called')\n    \n    # set user and message variables for phantom.prompt call\n    user = \"admin\"\n    message = \"\"\"{0},\n\nThe following events could be related to your event.\n\nThe indicators you were reviewing are: \nUser(s): {1}\nHost(s): {2} \nTable below represents the associated events:\n---\n\n{3}\"\"\"\n\n    # parameter list for template variable replacement\n    parameters = [\n        \"get_username:action_result.data.*.response_body.first_name\",\n        \"get_userid_indicators:action_result.data.*.response_body.value\",\n        \"get_host_indicators:action_result.data.*.response_body.value\",\n        \"container_info_format:formatted_data\",\n    ]\n\n    #responses:\n    response_types = [\n        {\n            \"prompt\": \"Do you want to create a case?\",\n            \"options\": {\n                \"type\": \"list\",\n                \"choices\": [\n                    \"Yes\",\n                    \"No\",\n                ]\n            },\n        },\n        {\n            \"prompt\": \"Select ID of Event e case (or is a case)\",\n            \"options\": {\n                \"type\": \"list\",\n                \"choices\": [\n                    \"None\",\n                    \"2\",\n                ]\n            },\n        },\n        {\n            \"prompt\": \"Enter the Event IDs in comma separated value (e.g. 1,2,3 ) that you want to include in your case: (if you don't want to select a case just enter 0)\",\n            \"options\": {\n                \"type\": \"message\",\n            },\n        },\n    ]\n\n    phantom.prompt2(container=container, user=user, message=message, respond_in_mins=30, name=\"review_associated_events\", parameters=parameters, response_types=response_types, callback=validate_prompt)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": true,
                        "connected_to_start": true,
                        "connection_name": "get userid container info, get host container info",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "def review_associated_events(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('review_associated_events() called')\n    \n    # Get container ids for the prompt\n    host =  phantom.collect2(container=container, datapath=['get_host_container_info:action_result.data.*.response_body.id'], action_results=results)\n    #phantom.debug(host)\n    userid = phantom.collect2(container=container, datapath=['get_userid_container_info:action_result.data.*.response_body.id'], action_results=results)\n    #phantom.debug(userid)\n    \n    # combines the container ids together to produce a single list\n    containers = ['None']\n    for item in host:\n        containers.append(item[0])\n    for item in userid:\n        containers.append(item[0])\n    # dedupe the list    \n    containers = list(dict.fromkeys(containers))\n    #phantom.debug(containers)\n\n    # Gets the current username for the playbook to assign the prompt correctly\n    user_info = phantom.collect2(container=container, datapath=['get_username:action_result.data.*.response_body.username'], action_results=results)\n    #phantom.debug(user_info)\n    user = user_info[0][0]\n    \n    message = \"\"\"{0},\n\nThe following events could be related to your event.\n\nThe indicators you were reviewing are: \nUser(s): {1}\nHost(s): {2} \nTable below represents the associated events:\n---\n\n{3}\"\"\"\n\n    # parameter list for template variable replacement\n    parameters = [\n        \"get_username:action_result.data.*.response_body.first_name\",\n        \"get_userid_indicators:action_result.data.*.response_body.value\",\n        \"get_host_indicators:action_result.data.*.response_body.value\",\n        \"create_note_data:custom_function:message\",\n    ]\n\n    #responses:\n    response_types = [\n        {\n            \"prompt\": \"Do you want to create a case?\",\n            \"options\": {\n                \"type\": \"list\",\n                \"choices\": [\n                    \"Yes\",\n                    \"No\",\n                ]\n            },\n        },\n        {\n            \"prompt\": \"Select ID of Event e case (or is a case)\",\n            \"options\": {\n                \"type\": \"list\",\n                \"choices\": containers\n            },\n        },\n        {\n            \"prompt\": \"Enter the Event IDs in comma separated value (e.g. 1,2,3 ) that you want to include in your case: (if you don't want to select a case just enter 0)\",\n            \"options\": {\n                \"type\": \"message\",\n            },\n        },\n    ]\n\n    phantom.prompt2(container=container, user=user, message=message, respond_in_mins=30, name=\"review_associated_events\", parameters=parameters, response_types=response_types, callback=validate_prompt)\n\n    return",
                        "custom_join": "",
                        "custom_name": "review associated events",
                        "description": "",
                        "has_custom": true,
                        "has_custom_block": true,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "86878137-5ff3-4bba-b9ae-b11b1954b16a",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 414,
                        "line_start": 339,
                        "message": "{0},\n\nThe following events could be related to your event.\n\nThe indicators you were reviewing are: \nUser(s): {1}\nHost(s): {2} \nTable below represents the associated events:\n---\n\n{3}",
                        "name": "prompt",
                        "notes": "This prompt provides associated events that the analyst can include for into this event for case\n\nAnalyst will determine if they want to create a case (yes or no)\n\nSelect the id that will be the case. \n\nEnter the ids of the events that will be included in the case in comma separated values",
                        "number": 1,
                        "order": 14,
                        "outPorts": [
                            "out"
                        ],
                        "parameters": [
                            {
                                "position": 0,
                                "type": "",
                                "value": "get_username:action_result.data.*.response_body.first_name"
                            },
                            {
                                "position": 1,
                                "type": "",
                                "value": "get_userid_indicators:action_result.data.*.response_body.value"
                            },
                            {
                                "position": 2,
                                "type": "",
                                "value": "get_host_indicators:action_result.data.*.response_body.value"
                            },
                            {
                                "position": 3,
                                "type": "",
                                "value": "create_note_data:custom_function:message"
                            }
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 1220,
                            "y": 520
                        },
                        "previous_function": "",
                        "previous_name": "review_associated_events",
                        "respond_in": "30",
                        "response_key": "Message",
                        "response_options": [],
                        "response_type": "list",
                        "responses": [
                            {
                                "response_key": "Yes/No",
                                "response_options": [
                                    "Yes",
                                    "No"
                                ],
                                "response_prompt": "Do you want to create a case?",
                                "response_type": "list"
                            },
                            {
                                "response_key": "Custom List",
                                "response_options": [
                                    "None",
                                    "2"
                                ],
                                "response_prompt": "Select ID of Event e case (or is a case)",
                                "response_type": "list",
                                "responses_prompt": "Select ID of Event e case (or is a case)"
                            },
                            {
                                "response_key": "Message",
                                "response_options": [
                                    "",
                                    ""
                                ],
                                "response_prompt": "Enter the Event IDs in comma separated value (e.g. 1,2,3 ) that you want to include in your case: (if you don't want to select a case just enter 0)",
                                "response_type": "message",
                                "responses_prompt": "Enter the Event ids that you want to include in your case: (if you don't want to select a case just enter 0)"
                            }
                        ],
                        "show_number": false,
                        "size": {
                            "height": 80,
                            "width": 80
                        },
                        "state": "prompt",
                        "status": "",
                        "type": "coa.Prompt",
                        "warn": false,
                        "z": 1336
                    },
                    {
                        "action": "get data",
                        "action_type": "investigate",
                        "active": false,
                        "active_keys": {},
                        "active_values": {
                            "headers": "",
                            "location": "container_userid_format:formatted_data.*",
                            "verify_certificate": "False"
                        },
                        "angle": 0,
                        "app": "",
                        "appid": "",
                        "approver": "",
                        "assets": [
                            {
                                "action": "get data",
                                "actions": [
                                    "post data",
                                    "get data",
                                    "get options",
                                    "get headers",
                                    "delete data",
                                    "patch data",
                                    "put data",
                                    "test connectivity"
                                ],
                                "active": true,
                                "app_name": "HTTP",
                                "app_version": "2.1.15",
                                "appid": "290b7499-0374-4930-9cdc-5e9b05d65827",
                                "asset_name": "phantom_rest_api",
                                "config_type": "asset",
                                "count": 0,
                                "fields": {
                                    "headers": "",
                                    "location": "container_userid_format:formatted_data.*",
                                    "verify_certificate": "False"
                                },
                                "has_app": true,
                                "id": 215,
                                "loaded": false,
                                "missing": false,
                                "name": "phantom_rest_api",
                                "output": [
                                    {
                                        "data_path": "action_result.status",
                                        "data_type": "string",
                                        "example_values": [
                                            "success",
                                            "failed"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.parameter.headers",
                                        "data_type": "string",
                                        "example_values": [
                                            "{\"Content-Type\": \"application/json\"}"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "endpoint"
                                        ],
                                        "data_path": "action_result.parameter.location",
                                        "data_type": "string",
                                        "example_values": [
                                            "/rest/cont"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.parameter.verify_certificate",
                                        "data_type": "boolean",
                                        "example_values": [
                                            false
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "url"
                                        ],
                                        "data_path": "action_result.data.*.location",
                                        "data_type": "string",
                                        "example_values": [
                                            "http://192.168.1.26/rest/cont"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.method",
                                        "data_type": "string",
                                        "example_values": [
                                            "GET"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.parsed_response_body",
                                        "data_type": "string",
                                        "example_values": [
                                            "{\"failed\": true, \"message\": \"Requested item not found\"}"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.response_body",
                                        "data_type": "string",
                                        "example_values": [
                                            "{\"failed\": true, \"message\": \"Requested item not found\"}"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.response_headers",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.summary.reason",
                                        "data_type": "string",
                                        "example_values": [
                                            "Not Found"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.summary.status_code",
                                        "data_type": "numeric",
                                        "example_values": [
                                            404
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.message",
                                        "data_type": "string",
                                        "example_values": [
                                            "Can't process response from server. Status Code: 404 Data from server: {\"failed\": true, \"message\": \"Requested item not found\"}"
                                        ]
                                    },
                                    {
                                        "data_path": "summary.total_objects",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1
                                        ]
                                    },
                                    {
                                        "data_path": "summary.total_objects_successful",
                                        "data_type": "numeric",
                                        "example_values": [
                                            0
                                        ]
                                    }
                                ],
                                "parameters": {
                                    "headers": {
                                        "data_type": "string",
                                        "default": null,
                                        "description": "Additional headers (JSON object with headers)",
                                        "key": "headers",
                                        "order": 2,
                                        "required": false
                                    },
                                    "location": {
                                        "data_type": "string",
                                        "default": null,
                                        "description": "Location (e.g. path/to/endpoint?query=string)",
                                        "key": "location",
                                        "order": 0,
                                        "required": true
                                    },
                                    "verify_certificate": {
                                        "data_type": "boolean",
                                        "default": null,
                                        "description": "Verify certificates (if using HTTPS)",
                                        "key": "verify_certificate",
                                        "order": 1,
                                        "required": true
                                    }
                                },
                                "product_name": "HTTP",
                                "product_vendor": "Generic",
                                "targets": "215",
                                "type": "information"
                            }
                        ],
                        "attrs": {
                            ".action": {
                                "text": "get userid container info"
                            },
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "Investigate"
                            },
                            "g.approver image": {
                                "opacity": 1
                            },
                            "g.code image": {
                                "opacity": 1
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.icon image": {
                                "xlink:href": "/inc/coa/img/block_icon_investigate.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            },
                            "g.timer image": {
                                "opacity": 1
                            }
                        },
                        "block_code": "def get_userid_container_info(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('get_userid_container_info() called')\n        \n    #phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))\n    \n    # collect data for 'get_userid_container_info' call\n    formatted_data_1 = phantom.get_format_data(name='container_userid_format__as_list')\n\n    parameters = []\n    \n    # build parameters list for 'get_userid_container_info' call\n    for formatted_part_1 in formatted_data_1:\n        parameters.append({\n            'headers': \"\",\n            'location': formatted_part_1,\n            'verify_certificate': False,\n        })\n\n    phantom.act(action=\"get data\", parameters=parameters, assets=['phantom_rest_api'], callback=join_container_host_info_format, name=\"get_userid_container_info\")\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": true,
                        "color": "",
                        "connected_to_start": true,
                        "connection_name": "get common userid",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "get userid container info",
                        "delay": 0,
                        "description": "",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "f4418509-3c94-4778-ba94-75a0d9214b5d",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 770,
                        "line_start": 748,
                        "message": "Configuring now",
                        "name": "get data",
                        "notes": "Gets the containers with common userids",
                        "number": 7,
                        "order": 29,
                        "outPorts": [
                            "out"
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 2080,
                            "y": 360
                        },
                        "previous_function": "",
                        "previous_name": "get_userid_container_info",
                        "required_params": {
                            "location": true,
                            "verify_certificate": true
                        },
                        "reviewer": "",
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "action_assets",
                        "status": "",
                        "title": "Investigate",
                        "type": "coa.Action",
                        "warn": false,
                        "z": 1338
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#637282",
                                "transform": "rotate(45 30 70)"
                            },
                            ".inPorts>.port-0>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".number": {
                                "text": 6
                            },
                            ".outPorts>.port-0": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                },
                                "ref-x": 83,
                                "ref-y": 40
                            },
                            ".outPorts>.port-0>.port-body": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                }
                            },
                            ".outPorts>.port-1": {
                                "port": {
                                    "id": "out-2",
                                    "type": "out"
                                },
                                "ref-x": 41,
                                "ref-y": 82
                            },
                            ".outPorts>.port-1>.port-body": {
                                "port": {
                                    "id": "out-2",
                                    "type": "out"
                                }
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            }
                        },
                        "block_code": "def check_to_create_a_case(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('check_to_create_a_case() called')\n\n    # check for 'if' condition 1\n    matched = phantom.decision(\n        container=container,\n        action_results=results,\n        conditions=[\n            [\"review_associated_events:action_result.summary.responses.0\", \"==\", \"No\"],\n        ])\n\n    # call connected blocks if condition 1 matched\n    if matched:\n        join_general_note_format(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function)\n        return\n\n    # call connected blocks for 'else' condition 2\n    promote_or_merge(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "review associated events",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "check to create a case",
                        "description": "",
                        "hasElse": true,
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "a511c795-1629-449e-a2fd-9c4b12733156",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 620,
                        "line_start": 599,
                        "name": "decision",
                        "notes": "checks response to create a case",
                        "number": 6,
                        "order": 23,
                        "outPorts": [
                            "out-1",
                            "out-2"
                        ],
                        "outputs": [
                            {
                                "conditions": [
                                    {
                                        "comparison": "==",
                                        "data_type": "",
                                        "param": "review_associated_events:action_result.summary.responses.0",
                                        "value": "No"
                                    }
                                ],
                                "display": "If",
                                "logic": "and",
                                "type": "if"
                            },
                            {
                                "conditions": [
                                    {
                                        "comparison": "==",
                                        "data_type": "",
                                        "param": "",
                                        "value": ""
                                    }
                                ],
                                "display": "Else",
                                "logic": "and",
                                "type": "else"
                            }
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 1700,
                            "y": 520
                        },
                        "previous_function": "",
                        "previous_name": "check_to_create_a_case",
                        "show_number": true,
                        "size": {
                            "height": 82,
                            "width": 82
                        },
                        "state": "decision",
                        "status": "",
                        "type": "coa.Decision",
                        "warn": "",
                        "z": 1345
                    },
                    {
                        "action": "get data",
                        "action_type": "investigate",
                        "active": false,
                        "active_keys": {},
                        "active_values": {
                            "headers": "",
                            "location": "common_hosts_urls:formatted_data.*",
                            "verify_certificate": "False"
                        },
                        "angle": 0,
                        "app": "",
                        "appid": "",
                        "approver": "",
                        "assets": [
                            {
                                "action": "get data",
                                "actions": [
                                    "post data",
                                    "get data",
                                    "get options",
                                    "get headers",
                                    "delete data",
                                    "patch data",
                                    "put data",
                                    "test connectivity"
                                ],
                                "active": true,
                                "app_name": "HTTP",
                                "app_version": "2.1.15",
                                "appid": "290b7499-0374-4930-9cdc-5e9b05d65827",
                                "asset_name": "phantom_rest_api",
                                "config_type": "asset",
                                "count": 0,
                                "fields": {
                                    "headers": "",
                                    "location": "common_hosts_urls:formatted_data.*",
                                    "verify_certificate": "False"
                                },
                                "has_app": true,
                                "id": 215,
                                "loaded": false,
                                "missing": false,
                                "name": "phantom_rest_api",
                                "output": [
                                    {
                                        "data_path": "action_result.status",
                                        "data_type": "string",
                                        "example_values": [
                                            "success",
                                            "failed"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.parameter.headers",
                                        "data_type": "string",
                                        "example_values": [
                                            "{\"Content-Type\": \"application/json\"}"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "endpoint"
                                        ],
                                        "data_path": "action_result.parameter.location",
                                        "data_type": "string",
                                        "example_values": [
                                            "/rest/cont"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.parameter.verify_certificate",
                                        "data_type": "boolean",
                                        "example_values": [
                                            false
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "url"
                                        ],
                                        "data_path": "action_result.data.*.location",
                                        "data_type": "string",
                                        "example_values": [
                                            "http://192.168.1.26/rest/cont"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.method",
                                        "data_type": "string",
                                        "example_values": [
                                            "GET"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.parsed_response_body",
                                        "data_type": "string",
                                        "example_values": [
                                            "{\"failed\": true, \"message\": \"Requested item not found\"}"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.response_body",
                                        "data_type": "string",
                                        "example_values": [
                                            "{\"failed\": true, \"message\": \"Requested item not found\"}"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.response_headers",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.summary.reason",
                                        "data_type": "string",
                                        "example_values": [
                                            "Not Found"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.summary.status_code",
                                        "data_type": "numeric",
                                        "example_values": [
                                            404
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.message",
                                        "data_type": "string",
                                        "example_values": [
                                            "Can't process response from server. Status Code: 404 Data from server: {\"failed\": true, \"message\": \"Requested item not found\"}"
                                        ]
                                    },
                                    {
                                        "data_path": "summary.total_objects",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1
                                        ]
                                    },
                                    {
                                        "data_path": "summary.total_objects_successful",
                                        "data_type": "numeric",
                                        "example_values": [
                                            0
                                        ]
                                    }
                                ],
                                "parameters": {
                                    "headers": {
                                        "data_type": "string",
                                        "default": null,
                                        "description": "Additional headers (JSON object with headers)",
                                        "key": "headers",
                                        "order": 2,
                                        "required": false
                                    },
                                    "location": {
                                        "data_type": "string",
                                        "default": null,
                                        "description": "Location (e.g. path/to/endpoint?query=string)",
                                        "key": "location",
                                        "order": 0,
                                        "required": true
                                    },
                                    "verify_certificate": {
                                        "data_type": "boolean",
                                        "default": null,
                                        "description": "Verify certificates (if using HTTPS)",
                                        "key": "verify_certificate",
                                        "order": 1,
                                        "required": true
                                    }
                                },
                                "product_name": "HTTP",
                                "product_vendor": "Generic",
                                "targets": "215",
                                "type": "information"
                            }
                        ],
                        "attrs": {
                            ".action": {
                                "text": "get common hosts"
                            },
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "Investigate"
                            },
                            "g.approver image": {
                                "opacity": 1
                            },
                            "g.code image": {
                                "opacity": 1
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.icon image": {
                                "xlink:href": "/inc/coa/img/block_icon_investigate.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            },
                            "g.timer image": {
                                "opacity": 1
                            }
                        },
                        "block_code": "def get_common_hosts(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('get_common_hosts() called')\n        \n    #phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))\n    \n    # collect data for 'get_common_hosts' call\n    formatted_data_1 = phantom.get_format_data(name='common_hosts_urls__as_list')\n\n    parameters = []\n    \n    # build parameters list for 'get_common_hosts' call\n    for formatted_part_1 in formatted_data_1:\n        parameters.append({\n            'headers': \"\",\n            'location': formatted_part_1,\n            'verify_certificate': False,\n        })\n\n    phantom.act(action=\"get data\", parameters=parameters, assets=['phantom_rest_api'], callback=container_host_format, name=\"get_common_hosts\")\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": true,
                        "color": "",
                        "connected_to_start": true,
                        "connection_name": "get host indicators",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "get common hosts",
                        "delay": 0,
                        "description": "Gets common containers for the indicators presented",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "a85ebecb-8619-49e2-9be0-fdda363bee6e",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 730,
                        "line_start": 708,
                        "message": "Configuring now",
                        "name": "get data",
                        "notes": "Use the Phantom REST API for indicators to get the common containers related to the indicator",
                        "number": 6,
                        "order": 27,
                        "outPorts": [
                            "out"
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 1600,
                            "y": 220
                        },
                        "previous_function": "",
                        "previous_name": "get_common_hosts",
                        "required_params": {
                            "location": true,
                            "verify_certificate": true
                        },
                        "reviewer": "",
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "action_assets",
                        "status": "",
                        "title": "Investigate",
                        "type": "coa.Action",
                        "warn": false,
                        "z": 1350
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".functionBlock": {
                                "text": "promote or merge"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "custom function"
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 1
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn_grey.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1
                            }
                        },
                        "block_code": "def promote_or_merge(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('promote_or_merge() called')\n    \n    results_data_1 = phantom.collect2(container=container, datapath=['review_associated_events:action_result.summary.responses.1', 'review_associated_events:action_result.summary.responses.2'], action_results=results)\n    results_data_2 = phantom.collect2(container=container, datapath=['get_userid_container_info:action_result.data.*.response_body.id'], action_results=results)\n    results_data_3 = phantom.collect2(container=container, datapath=['get_host_container_info:action_result.data.*.response_body.id'], action_results=results)\n    results_item_1_0 = [item[0] for item in results_data_1]\n    results_item_1_1 = [item[1] for item in results_data_1]\n    results_item_2_0 = [item[0] for item in results_data_2]\n    results_item_3_0 = [item[0] for item in results_data_3]\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n\n    # Processing for the promote or merge\n    # Prompt responses \n    responses = results_data_1[0]\n    phantom.debug(\"Received notification to creates a case with {} and then merge IDs: {}\".format(responses[0],responses[1]))\n    merge_containers = responses[1].split(',')\n    phantom.debug(\"Container IDs splited and to be merged: {}\".format(merge_containers))\n    \n    message =\"doing nothing\"\n    \n    # Containers considered\n    containers = results_item_2_0\n    phantom.debug(containers)\n    for item in results_item_3_0:\n        containers.append(item)\n    phantom.debug(containers)\n    containers = list(dict.fromkeys(containers))\n    phantom.debug(\"Full list of containers to use: {} and the current container is: {}\".format(containers, container))\n\n    if container == responses[0]:\n        phantom.debug(\"Promoting this container: {}\".format(container))\n        success, message = phantom.promote()\n    else:\n        for item in containers:\n            if item == responses[0]:\n                phantom.debug(\"Promoting this container: {}\".format(item))\n                success, message = phantom.promote(container=item, template=\"NIST 800-61r2 Response Plan\")\n                phantom.debug(\"The following container was converted to case: ID: {}, message: {}\".format(container,message))\n    \n    # Merge events into the the container promoted\n    for container_id in merge_containers:\n        success, message = phantom.merge(case=responses[0], container_id=container_id)\n        phantom.debug('phantom.merge results: success {}, message: {}'.format(success, message))\n        \n        success, message = phantom.set_status(container=container_id, status='closed')\n        phantom.debug(\n            'phantom.set_status results: success: {}, message: {}'.format(success, message)\n        )\n\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n    join_general_note_format(container=container)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "review associated events",
                        "connection_type": "action",
                        "customCodeEndLineOffset": 5,
                        "customCodeStartLine": 14,
                        "custom_callback": "",
                        "custom_code": "def promote_or_merge(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('promote_or_merge() called')\n    \n    results_data_1 = phantom.collect2(container=container, datapath=['review_associated_events:action_result.summary.responses.1', 'review_associated_events:action_result.summary.responses.2'], action_results=results)\n    results_data_2 = phantom.collect2(container=container, datapath=['get_userid_container_info:action_result.data.*.response_body.id'], action_results=results)\n    results_data_3 = phantom.collect2(container=container, datapath=['get_host_container_info:action_result.data.*.response_body.id'], action_results=results)\n    results_item_1_0 = [item[0] for item in results_data_1]\n    results_item_1_1 = [item[1] for item in results_data_1]\n    results_item_2_0 = [item[0] for item in results_data_2]\n    results_item_3_0 = [item[0] for item in results_data_3]\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n\n    # Processing for the promote or merge\n    # Prompt responses \n    responses = results_data_1[0]\n    phantom.debug(\"Received notification to creates a case with {} and then merge IDs: {}\".format(responses[0],responses[1]))\n    merge_containers = responses[1].split(',')\n    phantom.debug(\"Container IDs splited and to be merged: {}\".format(merge_containers))\n    \n    message =\"doing nothing\"\n    \n    # Containers considered\n    containers = results_item_2_0\n    phantom.debug(containers)\n    for item in results_item_3_0:\n        containers.append(item)\n    phantom.debug(containers)\n    containers = list(dict.fromkeys(containers))\n    phantom.debug(\"Full list of containers to use: {} and the current container is: {}\".format(containers, container))\n\n    if container == responses[0]:\n        phantom.debug(\"Promoting this container: {}\".format(container))\n        success, message = phantom.promote()\n    else:\n        for item in containers:\n            if item == responses[0]:\n                phantom.debug(\"Promoting this container: {}\".format(item))\n                success, message = phantom.promote(container=item, template=\"NIST 800-61r2 Response Plan\")\n                phantom.debug(\"The following container was converted to case: ID: {}, message: {}\".format(container,message))\n    \n    # Merge events into the the container promoted\n    for container_id in merge_containers:\n        success, message = phantom.merge(case=responses[0], container_id=container_id)\n        phantom.debug('phantom.merge results: success {}, message: {}'.format(success, message))\n        \n        success, message = phantom.set_status(container=container_id, status='closed')\n        phantom.debug(\n            'phantom.set_status results: success: {}, message: {}'.format(success, message)\n        )\n\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n    join_general_note_format(container=container)\n\n    return",
                        "custom_join": "",
                        "custom_name": "promote or merge",
                        "description": "",
                        "functionBlock": "custom function",
                        "has_custom": true,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "ff3feafe-6bbc-4b65-90d9-e1dca56227ac",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "legacy": true,
                        "line_end": 680,
                        "line_start": 620,
                        "message": "Configuring now",
                        "name": "custom function",
                        "notes": "",
                        "number": 6,
                        "order": 24,
                        "outPorts": [
                            "out"
                        ],
                        "outputVariables": [
                            {
                                "position": 0,
                                "type": "",
                                "value": ""
                            }
                        ],
                        "parameters": [
                            {
                                "position": 0,
                                "type": "",
                                "value": "review_associated_events:action_result.summary.responses.1"
                            },
                            {
                                "position": 1,
                                "type": "",
                                "value": "review_associated_events:action_result.summary.responses.2"
                            },
                            {
                                "position": 2,
                                "type": "",
                                "value": "get_userid_container_info:action_result.data.*.response_body.id"
                            },
                            {
                                "position": 3,
                                "type": "",
                                "value": "get_host_container_info:action_result.data.*.response_body.id"
                            }
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 1800,
                            "y": 600
                        },
                        "previous_function": "",
                        "previous_name": "promote_or_merge",
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "custom function",
                        "status": "deprecating",
                        "title": "custom function",
                        "type": "coa.FunctionBlock",
                        "userGeneratedCode": "\n    # Processing for the promote or merge\n    # Prompt responses \n    responses = results_data_1[0]\n    phantom.debug(\"Received notification to creates a case with {} and then merge IDs: {}\".format(responses[0],responses[1]))\n    merge_containers = responses[1].split(',')\n    phantom.debug(\"Container IDs splited and to be merged: {}\".format(merge_containers))\n    \n    message =\"doing nothing\"\n    \n    # Containers considered\n    containers = results_item_2_0\n    phantom.debug(containers)\n    for item in results_item_3_0:\n        containers.append(item)\n    phantom.debug(containers)\n    containers = list(dict.fromkeys(containers))\n    phantom.debug(\"Full list of containers to use: {} and the current container is: {}\".format(containers, container))\n\n    if container == responses[0]:\n        phantom.debug(\"Promoting this container: {}\".format(container))\n        success, message = phantom.promote()\n    else:\n        for item in containers:\n            if item == responses[0]:\n                phantom.debug(\"Promoting this container: {}\".format(item))\n                success, message = phantom.promote(container=item, template=\"NIST 800-61r2 Response Plan\")\n                phantom.debug(\"The following container was converted to case: ID: {}, message: {}\".format(container,message))\n    \n    # Merge events into the the container promoted\n    for container_id in merge_containers:\n        success, message = phantom.merge(case=responses[0], container_id=container_id)\n        phantom.debug('phantom.merge results: success {}, message: {}'.format(success, message))\n        \n        success, message = phantom.set_status(container=container_id, status='closed')\n        phantom.debug(\n            'phantom.set_status results: success: {}, message: {}'.format(success, message)\n        )\n\n",
                        "warn": false,
                        "z": 1355
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "api": "add comment",
                        "attrs": {
                            ".api": {
                                "text": "Missing information com..."
                            },
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "API"
                            },
                            "g.code image": {
                                "opacity": 1
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            }
                        },
                        "block_code": "def Missing_information_comment(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('Missing_information_comment() called')\n\n    phantom.comment(container=container, comment=\"Missing necessary user or host information to process playbook\")\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "color": "",
                        "configured": [
                            {
                                "addCommentComment": "Missing necessary user or host information to process playbook",
                                "key": "add-comment"
                            }
                        ],
                        "connected_to_start": true,
                        "connection_name": "get username",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "Missing information comment",
                        "description": "",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "a4062615-e039-4022-a94d-ba4a5fdb2db4",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 115,
                        "line_start": 108,
                        "message": "Configuring now",
                        "name": "add comment",
                        "notes": "Adds a missing information comment to Activity Pane",
                        "number": 3,
                        "order": 4,
                        "outPorts": [
                            "out"
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 340,
                            "y": 760
                        },
                        "previous_function": "",
                        "previous_name": "Missing_information_comment",
                        "show_number": false,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "api",
                        "status": "",
                        "title": "API",
                        "type": "coa.API",
                        "warn": false,
                        "z": 1356
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#637282",
                                "transform": "rotate(45 30 70)"
                            },
                            ".inPorts>.port-0>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".number": {
                                "text": 2
                            },
                            ".outPorts>.port-0": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                },
                                "ref-x": 83,
                                "ref-y": 40
                            },
                            ".outPorts>.port-0>.port-body": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                }
                            },
                            ".outPorts>.port-1": {
                                "port": {
                                    "id": "out-2",
                                    "type": "out"
                                },
                                "ref-x": 41,
                                "ref-y": 82
                            },
                            ".outPorts>.port-1>.port-body": {
                                "port": {
                                    "id": "out-2",
                                    "type": "out"
                                }
                            },
                            ".outPorts>.port-2": {
                                "port": {
                                    "id": "out-3",
                                    "type": "out"
                                },
                                "ref-x": 41,
                                "ref-y": -2
                            },
                            ".outPorts>.port-2>.port-body": {
                                "port": {
                                    "id": "out-3",
                                    "type": "out"
                                }
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            }
                        },
                        "block_code": "def check_user_host_info(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('check_user_host_info() called')\n\n    # check for 'if' condition 1\n    matched = phantom.decision(\n        container=container,\n        action_results=results,\n        conditions=[\n            [\"get_username:artifact:*.cef.dest\", \"in\", \"custom_list:bogon_list\"],\n            [\"get_username:artifact:*.cef.dest_ip\", \"in\", \"custom_list:bogon_list\"],\n            [\"get_username:artifact:*.cef.destinationAddress\", \"in\", \"custom_list:bogon_list\"],\n            [\"get_username:artifact:*.cef.destinationHostName\", \"not in\", \"custom_list:bogon_list\"],\n            [\"get_username:artifact:*.cef.src\", \"in\", \"custom_list:bogon_list\"],\n            [\"get_username:artifact:*.cef.src_ip\", \"in\", \"custom_list:bogon_list\"],\n            [\"get_username:artifact:*.cef.sourceAddress\", \"in\", \"custom_list:bogon_list\"],\n            [\"get_username:artifact:*.cef.sourceHostName\", \"not in\", \"custom_list:bogon_list\"],\n            [\"get_username:artifact:*.cef.dhost\", \"not in\", \"custom_list:bogon_list\"],\n            [\"get_username:artifact:*.cef.shost\", \"not in\", \"custom_list:bogon_list\"],\n            [\"artifact:*.cef.dest_nt_host\", \"not in\", \"custom_list:bogon_list\"],\n            [\"artifact:*.cef.src_nt_host\", \"not in\", \"custom_list:bogon_list\"],\n        ],\n        logical_operator='or')\n\n    # call connected blocks if condition 1 matched\n    if matched:\n        host_user_filter(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function)\n        return\n\n    # check for 'elif' condition 2\n    matched = phantom.decision(\n        container=container,\n        action_results=results,\n        conditions=[\n            [\"artifact:*.cef.destinationUserId\", \"!=\", \"\"],\n            [\"artifact:*.cef.destinationUserName\", \"!=\", \"\"],\n            [\"artifact:*.cef.duser\", \"!=\", \"\"],\n            [\"artifact:*.cef.sourceUserId\", \"!=\", \"\"],\n            [\"artifact:*.cef.sourceUserName\", \"!=\", \"\"],\n            [\"artifact:*.cef.suser\", \"!=\", \"\"],\n        ],\n        logical_operator='or')\n\n    # call connected blocks if condition 2 matched\n    if matched:\n        join_user_info_filter(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function)\n        return\n\n    # call connected blocks for 'else' condition 3\n    Missing_information_comment(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "get username",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "check user host info",
                        "description": "Using bogon list to review hostnames with internal IP addresses",
                        "hasElse": true,
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "039ac24f-e7a6-4c6e-b0ed-5f2e3ef05931",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 108,
                        "line_start": 56,
                        "name": "decision",
                        "notes": "Check for common user and host cef values if missing prints error in Activity\n\nGREEN: User or Host CEF value exists with data\n\nPURPLE: Missing necessary information to process playbook",
                        "number": 2,
                        "order": 3,
                        "outPorts": [
                            "out-1",
                            "out-2",
                            "out-3"
                        ],
                        "outputs": [
                            {
                                "conditions": [
                                    {
                                        "comparison": "in",
                                        "data_type": "",
                                        "param": "get_username:artifact:*.cef.dest",
                                        "value": "custom_list:bogon_list"
                                    },
                                    {
                                        "comparison": "in",
                                        "data_type": "",
                                        "param": "get_username:artifact:*.cef.dest_ip",
                                        "value": "custom_list:bogon_list"
                                    },
                                    {
                                        "comparison": "in",
                                        "data_type": "",
                                        "param": "get_username:artifact:*.cef.destinationAddress",
                                        "value": "custom_list:bogon_list"
                                    },
                                    {
                                        "comparison": "not in",
                                        "data_type": "",
                                        "param": "get_username:artifact:*.cef.destinationHostName",
                                        "value": "custom_list:bogon_list"
                                    },
                                    {
                                        "comparison": "in",
                                        "data_type": "",
                                        "param": "get_username:artifact:*.cef.src",
                                        "value": "custom_list:bogon_list"
                                    },
                                    {
                                        "comparison": "in",
                                        "data_type": "",
                                        "param": "get_username:artifact:*.cef.src_ip",
                                        "value": "custom_list:bogon_list"
                                    },
                                    {
                                        "comparison": "in",
                                        "data_type": "",
                                        "param": "get_username:artifact:*.cef.sourceAddress",
                                        "value": "custom_list:bogon_list"
                                    },
                                    {
                                        "comparison": "not in",
                                        "data_type": "",
                                        "param": "get_username:artifact:*.cef.sourceHostName",
                                        "value": "custom_list:bogon_list"
                                    },
                                    {
                                        "comparison": "not in",
                                        "data_type": "",
                                        "param": "get_username:artifact:*.cef.dhost",
                                        "value": "custom_list:bogon_list"
                                    },
                                    {
                                        "comparison": "not in",
                                        "data_type": "",
                                        "param": "get_username:artifact:*.cef.shost",
                                        "value": "custom_list:bogon_list"
                                    },
                                    {
                                        "comparison": "not in",
                                        "data_type": "",
                                        "param": "artifact:*.cef.dest_nt_host",
                                        "value": "custom_list:bogon_list"
                                    },
                                    {
                                        "comparison": "not in",
                                        "data_type": "",
                                        "param": "artifact:*.cef.src_nt_host",
                                        "value": "custom_list:bogon_list"
                                    }
                                ],
                                "display": "If",
                                "logic": "or",
                                "type": "if"
                            },
                            {
                                "conditions": [
                                    {
                                        "comparison": "!=",
                                        "data_type": "",
                                        "param": "artifact:*.cef.destinationUserId",
                                        "value": ""
                                    },
                                    {
                                        "comparison": "!=",
                                        "data_type": "",
                                        "param": "artifact:*.cef.destinationUserName",
                                        "value": ""
                                    },
                                    {
                                        "comparison": "!=",
                                        "data_type": "",
                                        "param": "artifact:*.cef.duser",
                                        "value": ""
                                    },
                                    {
                                        "comparison": "!=",
                                        "data_type": "",
                                        "param": "artifact:*.cef.sourceUserId",
                                        "value": ""
                                    },
                                    {
                                        "comparison": "!=",
                                        "data_type": "",
                                        "param": "artifact:*.cef.sourceUserName",
                                        "value": ""
                                    },
                                    {
                                        "comparison": "!=",
                                        "data_type": "",
                                        "param": "artifact:*.cef.suser",
                                        "value": ""
                                    }
                                ],
                                "display": "Else If",
                                "logic": "or",
                                "type": "elif"
                            },
                            {
                                "conditions": [
                                    {
                                        "comparison": "==",
                                        "data_type": "",
                                        "param": "",
                                        "value": ""
                                    }
                                ],
                                "display": "Else",
                                "logic": "and",
                                "type": "else"
                            }
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 360,
                            "y": 220
                        },
                        "previous_function": "",
                        "previous_name": "check_user_host_info",
                        "show_number": true,
                        "size": {
                            "height": 82,
                            "width": 82
                        },
                        "state": "decision",
                        "status": "",
                        "type": "coa.Decision",
                        "warn": "",
                        "z": 1366
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773",
                                "transform": "rotate(45 30 70)"
                            },
                            ".inPorts>.port-0>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".number": {
                                "text": 2
                            },
                            ".outPorts>.port-0": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                },
                                "ref-x": 83,
                                "ref-y": 40
                            },
                            ".outPorts>.port-0>.port-body": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                }
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            }
                        },
                        "block_code": "def user_info_filter(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('user_info_filter() called')\n\n    # collect filtered artifact ids for 'if' condition 1\n    matched_artifacts_1, matched_results_1 = phantom.condition(\n        container=container,\n        action_results=results,\n        conditions=[\n            [\"artifact:*.cef.destinationUserId\", \"not in\", \"custom_list:bogon_list\"],\n            [\"artifact:*.cef.destinationUserName\", \"not in\", \"custom_list:bogon_list\"],\n            [\"artifact:*.cef.duser\", \"not in\", \"custom_list:bogon_list\"],\n            [\"artifact:*.cef.sourceUserId\", \"not in\", \"custom_list:bogon_list\"],\n            [\"artifact:*.cef.sourceUserName\", \"not in\", \"custom_list:bogon_list\"],\n            [\"artifact:*.cef.suser\", \"not in\", \"custom_list:bogon_list\"],\n        ],\n        logical_operator='or',\n        name=\"user_info_filter:condition_1\")\n\n    # call connected blocks if filtered artifacts or results\n    if matched_artifacts_1 or matched_results_1:\n        merge_usernames(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function, filtered_artifacts=matched_artifacts_1, filtered_results=matched_results_1)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "get username, get host container info",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "user info filter",
                        "description": "",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "f3635437-e5a0-41c3-b3b7-937298d942be",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "def join_user_info_filter(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None):\n    phantom.debug('join_user_info_filter() called')\n    \n    # if the joined function has already been called, do nothing\n    if phantom.get_run_data(key='join_user_info_filter_called'):\n        return\n\n    # check if all connected incoming playbooks, actions, or custom functions are done i.e. have succeeded or failed\n    if phantom.completed(action_names=['get_username', 'get_host_container_info']):\n        \n        # save the state that the joined function has now been called\n        phantom.save_run_data(key='join_user_info_filter_called', value='user_info_filter')\n        \n        # call connected block \"user_info_filter\"\n        user_info_filter(container=container, handle=handle)\n    \n    return",
                        "join_optional": [
                            "get_host_indicators",
                            "update_task_to_inprocess"
                        ],
                        "join_start": 226,
                        "line_end": 244,
                        "line_start": 202,
                        "name": "filter",
                        "notes": "Filters user information for processing",
                        "number": 2,
                        "order": 9,
                        "outPorts": [
                            "out-1"
                        ],
                        "outputs": [
                            {
                                "conditions": [
                                    {
                                        "comparison": "not in",
                                        "data_type": "",
                                        "param": "artifact:*.cef.destinationUserId",
                                        "value": "custom_list:bogon_list"
                                    },
                                    {
                                        "comparison": "not in",
                                        "data_type": "",
                                        "param": "artifact:*.cef.destinationUserName",
                                        "value": "custom_list:bogon_list"
                                    },
                                    {
                                        "comparison": "not in",
                                        "data_type": "",
                                        "param": "artifact:*.cef.duser",
                                        "value": "custom_list:bogon_list"
                                    },
                                    {
                                        "comparison": "not in",
                                        "data_type": "",
                                        "param": "artifact:*.cef.sourceUserId",
                                        "value": "custom_list:bogon_list"
                                    },
                                    {
                                        "comparison": "not in",
                                        "data_type": "",
                                        "param": "artifact:*.cef.sourceUserName",
                                        "value": "custom_list:bogon_list"
                                    },
                                    {
                                        "comparison": "not in",
                                        "data_type": "",
                                        "param": "artifact:*.cef.suser",
                                        "value": "custom_list:bogon_list"
                                    }
                                ],
                                "display": "If",
                                "logic": "or",
                                "type": "if"
                            }
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 500,
                            "y": 360
                        },
                        "previous_function": "",
                        "previous_name": "user_info_filter",
                        "show_number": true,
                        "size": {
                            "height": 82,
                            "width": 82
                        },
                        "state": "filter",
                        "status": "",
                        "type": "coa.Filter",
                        "warn": false,
                        "z": 1371
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".format": {
                                "text": "container userid format"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out-1": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out-1>.port-body": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "format"
                            },
                            "g.code image": {
                                "opacity": 1
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            }
                        },
                        "block_code": "def container_userid_format(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('container_userid_format() called')\n    \n    template = \"\"\"%%\ncontainer/{0}?_filter_status!=\\\"closed\\\"\n%%\"\"\"\n\n    # parameter list for template variable replacement\n    parameters = [\n        \"get_common_userid:action_result.data.*.response_body.*.container_id\",\n    ]\n\n    phantom.format(container=container, template=template, parameters=parameters, name=\"container_userid_format\")\n\n    get_userid_container_info(container=container)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "get common userid",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "container userid format",
                        "description": "",
                        "format": "format",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "43d68aa2-f5a2-4723-8905-83c8e74d6322",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 532,
                        "line_end": 467,
                        "line_start": 449,
                        "message": "Configuring now",
                        "name": "format",
                        "notes": "Gets container information for the other events",
                        "number": 10,
                        "order": 17,
                        "outPorts": [
                            "out-1"
                        ],
                        "parameters": [
                            {
                                "position": 0,
                                "type": "",
                                "value": "get_common_userid:action_result.data.*.response_body.*.container_id"
                            }
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 1840,
                            "y": 360
                        },
                        "previous_function": "",
                        "previous_name": "container_userid_format",
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "format",
                        "status": "",
                        "template": "%%\ncontainer/{0}?_filter_status!=\"closed\"\n%%",
                        "title": "format",
                        "type": "coa.Format",
                        "warn": false,
                        "z": 1373
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".format": {
                                "text": "container host info form..."
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out-1": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out-1>.port-body": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "format"
                            },
                            "g.code image": {
                                "opacity": 1
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            }
                        },
                        "block_code": "def container_host_info_format(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('container_host_info_format() called')\n    \n    template = \"\"\"%%\n| {0} | {1} | {2} | {3} | {4} | base_url/mission/{1} |\n%%\"\"\"\n\n    # parameter list for template variable replacement\n    parameters = [\n        \"get_host_container_info:action_result.data.*.response_body.container_type\",\n        \"get_host_container_info:action_result.data.*.response_body.id\",\n        \"get_host_container_info:action_result.data.*.response_body.name\",\n        \"get_host_container_info:action_result.data.*.response_body.status\",\n        \"get_host_container_info:action_result.data.*.response_body.owner_name\",\n    ]\n\n    phantom.format(container=container, template=template, parameters=parameters, name=\"container_host_info_format\")\n\n    container_info_format(container=container)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "get userid container info, get host container info",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "container host info format",
                        "description": "",
                        "format": "format",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "4a41ee21-193c-454c-bafd-f80955c83e0e",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "def join_container_host_info_format(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None):\n    phantom.debug('join_container_host_info_format() called')\n    \n    # if the joined function has already been called, do nothing\n    if phantom.get_run_data(key='join_container_host_info_format_called'):\n        return\n\n    # no callbacks to check, call connected block \"container_host_info_format\"\n    phantom.save_run_data(key='join_container_host_info_format_called', value='container_host_info_format', auto=True)\n\n    container_host_info_format(container=container, handle=handle)\n    \n    return",
                        "join_optional": [
                            "get_host_container_info",
                            "get_userid_container_info"
                        ],
                        "join_start": 792,
                        "line_end": 806,
                        "line_start": 770,
                        "message": "Configuring now",
                        "name": "format",
                        "notes": "Formats host container info and inserts it into the next format block",
                        "number": 15,
                        "order": 30,
                        "outPorts": [
                            "out-1"
                        ],
                        "parameters": [
                            {
                                "position": 0,
                                "type": "",
                                "value": "get_host_container_info:action_result.data.*.response_body.container_type"
                            },
                            {
                                "position": 0,
                                "type": "",
                                "value": "get_host_container_info:action_result.data.*.response_body.id"
                            },
                            {
                                "position": 1,
                                "type": "",
                                "value": "get_host_container_info:action_result.data.*.response_body.name"
                            },
                            {
                                "position": 3,
                                "type": "",
                                "value": "get_host_container_info:action_result.data.*.response_body.status"
                            },
                            {
                                "position": 4,
                                "type": "",
                                "value": "get_host_container_info:action_result.data.*.response_body.owner_name"
                            }
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 2400,
                            "y": 360
                        },
                        "previous_function": "",
                        "previous_name": "container_host_info_format",
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "format",
                        "status": "",
                        "template": "%%\n| {0} | {1} | {2} | {3} | {4} | base_url/mission/{1} |\n%%",
                        "title": "format",
                        "type": "coa.Format",
                        "warn": false,
                        "z": 1374
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".format": {
                                "text": "container host format"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out-1": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out-1>.port-body": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "format"
                            },
                            "g.code image": {
                                "opacity": 1
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            }
                        },
                        "block_code": "def container_host_format(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('container_host_format() called')\n    \n    template = \"\"\"%%\ncontainer/{0}?_filter_status!=\\\"closed\\\"\n%%\"\"\"\n\n    # parameter list for template variable replacement\n    parameters = [\n        \"get_common_hosts:action_result.data.*.response_body.*.container_id\",\n    ]\n\n    phantom.format(container=container, template=template, parameters=parameters, name=\"container_host_format\")\n\n    get_host_container_info(container=container)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "get common hosts",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "container host format",
                        "description": "",
                        "format": "format",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "f6c4b8f2-6230-41d7-9cbc-2823b52e7c4d",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 748,
                        "line_start": 730,
                        "message": "Configuring now",
                        "name": "format",
                        "notes": "Gets the host containers to the indicators found.",
                        "number": 14,
                        "order": 28,
                        "outPorts": [
                            "out-1"
                        ],
                        "parameters": [
                            {
                                "position": 0,
                                "type": "",
                                "value": "get_common_hosts:action_result.data.*.response_body.*.container_id"
                            }
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 1840,
                            "y": 220
                        },
                        "previous_function": "",
                        "previous_name": "container_host_format",
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "format",
                        "status": "",
                        "template": "%%\ncontainer/{0}?_filter_status!=\"closed\"\n%%",
                        "title": "format",
                        "type": "coa.Format",
                        "warn": false,
                        "z": 1380
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".functionBlock": {
                                "text": "create note data"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "custom function"
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 1
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn_grey.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            }
                        },
                        "block_code": "def create_note_data(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('create_note_data() called')\n    \n    formatted_data_1 = phantom.get_format_data(name='container_info_format')\n\n    create_note_data__timestamp = None\n    create_note_data__message = None\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n\n    # Get base url and format link customer\n    url = phantom.get_base_url()\n    phantom.debug(\"Base url is: {}\".format(url))\n    create_note_data__message = formatted_data_1.replace(\"base_url\", url)\n    \n    # Get the date timestamp\n    create_note_data__timestamp = datetime.datetime.now().strftime(\"%c\")\n    phantom.debug(\"The current timestamp is: {}\".format(create_note_data__timestamp))\n\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n\n    phantom.save_run_data(key='create_note_data:timestamp', value=json.dumps(create_note_data__timestamp))\n    phantom.save_run_data(key='create_note_data:message', value=json.dumps(create_note_data__message))\n    review_associated_events(container=container)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "get userid container info, get host container info",
                        "connection_type": "action",
                        "customCodeEndLineOffset": 8,
                        "customCodeStartLine": 11,
                        "custom_callback": "",
                        "custom_code": "def create_note_data(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('create_note_data() called')\n    \n    formatted_data_1 = phantom.get_format_data(name='container_info_format')\n\n    create_note_data__timestamp = None\n    create_note_data__message = None\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n\n    # Get base url and format link customer\n    url = phantom.get_base_url()\n    phantom.debug(\"Base url is: {}\".format(url))\n    create_note_data__message = formatted_data_1.replace(\"base_url\", url)\n    \n    # Get the date timestamp\n    create_note_data__timestamp = datetime.datetime.now().strftime(\"%c\")\n    phantom.debug(\"The current timestamp is: {}\".format(create_note_data__timestamp))\n\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n\n    phantom.save_run_data(key='create_note_data:timestamp', value=json.dumps(create_note_data__timestamp))\n    phantom.save_run_data(key='create_note_data:message', value=json.dumps(create_note_data__message))\n    review_associated_events(container=container)\n\n    return",
                        "custom_join": "",
                        "custom_name": "create note data",
                        "description": "",
                        "functionBlock": "custom function",
                        "has_custom": true,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "67bbb97b-d460-4627-99b7-85ceac7928c8",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 872,
                        "legacy": true,
                        "line_end": 837,
                        "line_start": 806,
                        "message": "Configuring now",
                        "name": "custom function",
                        "notes": "creates base url and timestamp for note",
                        "number": 7,
                        "order": 31,
                        "outPorts": [
                            "out"
                        ],
                        "outputVariables": [
                            {
                                "position": 0,
                                "type": "",
                                "value": "timestamp"
                            },
                            {
                                "position": 2,
                                "type": "",
                                "value": "message"
                            }
                        ],
                        "parameters": [
                            {
                                "position": 0,
                                "type": "",
                                "value": "container_info_format:formatted_data"
                            }
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 880,
                            "y": 520
                        },
                        "previous_function": "",
                        "previous_name": "create_note_data",
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "custom function",
                        "status": "deprecating",
                        "title": "custom function",
                        "type": "coa.FunctionBlock",
                        "userGeneratedCode": "\n    # Get base url and format link customer\n    url = phantom.get_base_url()\n    phantom.debug(\"Base url is: {}\".format(url))\n    create_note_data__message = formatted_data_1.replace(\"base_url\", url)\n    \n    # Get the date timestamp\n    create_note_data__timestamp = datetime.datetime.now().strftime(\"%c\")\n    phantom.debug(\"The current timestamp is: {}\".format(create_note_data__timestamp))\n\n",
                        "warn": false,
                        "z": 1382
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".format": {
                                "text": "common userid format"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out-1": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out-1>.port-body": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "format"
                            },
                            "g.code image": {
                                "opacity": 1
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            }
                        },
                        "block_code": "def common_userid_format(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('common_userid_format() called')\n    \n    template = \"\"\"%%\n/indicator_common_container?tenant_id=0&indicator_ids={0}\n%%\"\"\"\n\n    # parameter list for template variable replacement\n    parameters = [\n        \"get_userid_indicators:action_result.data.*.response_body.id\",\n    ]\n\n    phantom.format(container=container, template=template, parameters=parameters, name=\"common_userid_format\")\n\n    get_common_userid(container=container)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "get userid indicators",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "common userid format",
                        "description": "need to drop nones to make this work correctly.",
                        "format": "format",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "ce1600d9-bf99-4c0a-82a9-d077c21cd79f",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [
                            "get_user_indicators",
                            "get_host_indicators"
                        ],
                        "join_start": 370,
                        "line_end": 314,
                        "line_start": 296,
                        "message": "Configuring now",
                        "name": "format",
                        "notes": "Gets the common containers for the presented indicators",
                        "number": 8,
                        "order": 12,
                        "outPorts": [
                            "out-1"
                        ],
                        "parameters": [
                            {
                                "position": 0,
                                "type": "",
                                "value": "get_userid_indicators:action_result.data.*.response_body.id"
                            }
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 1360,
                            "y": 360
                        },
                        "previous_function": "",
                        "previous_name": "common_userid_format",
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "format",
                        "status": "",
                        "template": "%%\n/indicator_common_container?tenant_id=0&indicator_ids={0}\n%%",
                        "title": "format",
                        "type": "coa.Format",
                        "warn": false,
                        "z": 1384
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "1d963a09-9698-4f2d-a3f5-4a925d3c8f6e",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "a4062615-e039-4022-a94d-ba4a5fdb2db4",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "3c94bf7c-15cf-4fc4-8484-98e73a4c79be",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 1386
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".functionBlock": {
                                "text": "get and set owner"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "custom function"
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 1
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn_grey.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            }
                        },
                        "block_code": "def get_and_set_owner(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('get_and_set_owner() called')\n    \n    input_parameter_0 = \"\"\n\n    get_and_set_owner__owner = None\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n\n    # Gets playbook info to get current running user\n    pb_info = phantom.get_playbook_info()\n    #phantom.debug(\"Retreving owner name: {0}\".format(pb_info))\n    #phantom.debug(pb_info)\n    \n    # Sets owner\n    phantom.set_owner(container=container, user=pb_info[0][\"effective_user_id\"])\n    get_and_set_owner__owner = pb_info[0][\"effective_user_id\"]\n\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n\n    phantom.save_run_data(key='get_and_set_owner:owner', value=json.dumps(get_and_set_owner__owner))\n    user_url(container=container)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "",
                        "connection_type": "",
                        "customCodeEndLineOffset": 7,
                        "customCodeStartLine": 10,
                        "custom_callback": "",
                        "custom_code": "def get_and_set_owner(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None):\n    phantom.debug('get_playbook_owner() called')\n    input_parameter_0 = \"\"\n\n    get_and_set_owner__owner = None\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n\n    # Gets playbook info to get current running user\n    pb_info = phantom.get_playbook_info()\n    #phantom.debug(\"Retreving owner name: {0}\".format(pb_info))\n    #phantom.debug(pb_info)\n    \n    # Sets owner\n    phantom.set_owner(container=container, user=pb_info[0][\"effective_user_id\"])\n    get_and_set_owner__owner = pb_info[0][\"effective_user_id\"]\n\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n\n    phantom.save_run_data(key='get_playbook_owner:owner', value=json.dumps(get_and_set_owner__owner))\n    configure_container(container=container)\n\n    return",
                        "custom_join": "",
                        "custom_name": "get and set owner",
                        "description": "",
                        "functionBlock": "custom function",
                        "has_custom": true,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "3df83d91-6df1-49ed-b638-3273d753a587",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "legacy": true,
                        "line_end": 53,
                        "line_start": 24,
                        "message": "Configuring now",
                        "name": "custom function",
                        "notes": "Gets playbook owner and sets the container owner and task owner the person that has run the playbook.",
                        "number": 1,
                        "order": 2,
                        "outPorts": [
                            "out"
                        ],
                        "outputVariables": [
                            {
                                "position": 0,
                                "type": "",
                                "value": "owner"
                            }
                        ],
                        "parameters": [
                            {
                                "position": 0,
                                "type": "",
                                "value": ""
                            }
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 420,
                            "y": 80
                        },
                        "previous_function": "",
                        "previous_name": "get_and_set_owner",
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "custom function",
                        "status": "deprecating",
                        "title": "custom function",
                        "type": "coa.FunctionBlock",
                        "userGeneratedCode": "\n    # Gets playbook info to get current running user\n    pb_info = phantom.get_playbook_info()\n    #phantom.debug(\"Retreving owner name: {0}\".format(pb_info))\n    #phantom.debug(pb_info)\n    \n    # Sets owner\n    phantom.set_owner(container=container, user=pb_info[0][\"effective_user_id\"])\n    get_and_set_owner__owner = pb_info[0][\"effective_user_id\"]\n",
                        "warn": false,
                        "z": 1387
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".format": {
                                "text": "general note format"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out-1": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out-1>.port-body": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "format"
                            },
                            "g.code image": {
                                "opacity": 1
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            }
                        },
                        "block_code": "def general_note_format(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('general_note_format() called')\n    \n    template = \"\"\"### Analyst Review of associated events:\n\nAnalyst wanted to create a case: {1} with {2} and included the following IDs: {3}\n\n---\n\nAutomation message to analyst:\n\n{0}\n\n---\ncreated by {4} at {5}\"\"\"\n\n    # parameter list for template variable replacement\n    parameters = [\n        \"review_associated_events:action_result.parameter.message\",\n        \"review_associated_events:action_result.summary.responses.0\",\n        \"review_associated_events:action_result.summary.responses.1\",\n        \"review_associated_events:action_result.summary.responses.2\",\n        \"get_username:action_result.data.*.response_body.username\",\n        \"create_note_data:custom_function:timestamp\",\n    ]\n\n    phantom.format(container=container, template=template, parameters=parameters, name=\"general_note_format\")\n\n    create_task_complete_note(container=container)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "review associated events, review associated events",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "general note format",
                        "description": "",
                        "format": "format",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "baf52861-969f-499c-8a4c-e6800915fe14",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "def join_general_note_format(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None):\n    phantom.debug('join_general_note_format() called')\n    \n    # if the joined function has already been called, do nothing\n    if phantom.get_run_data(key='join_general_note_format_called'):\n        return\n\n    # no callbacks to check, call connected block \"general_note_format\"\n    phantom.save_run_data(key='join_general_note_format_called', value='general_note_format', auto=True)\n\n    general_note_format(container=container, handle=handle)\n    \n    return",
                        "join_optional": [
                            "review_associated_events"
                        ],
                        "join_start": 585,
                        "line_end": 599,
                        "line_start": 553,
                        "message": "Configuring now",
                        "name": "format",
                        "notes": "Creates a general note for associated events",
                        "number": 12,
                        "order": 22,
                        "outPorts": [
                            "out-1"
                        ],
                        "parameters": [
                            {
                                "position": 0,
                                "type": "",
                                "value": "review_associated_events:action_result.parameter.message"
                            },
                            {
                                "position": 1,
                                "type": "",
                                "value": "review_associated_events:action_result.summary.responses.0"
                            },
                            {
                                "position": 2,
                                "type": "",
                                "value": "review_associated_events:action_result.summary.responses.1"
                            },
                            {
                                "position": 3,
                                "type": "",
                                "value": "review_associated_events:action_result.summary.responses.2"
                            },
                            {
                                "position": 4,
                                "type": "",
                                "value": "get_username:action_result.data.*.response_body.username"
                            },
                            {
                                "position": 5,
                                "type": "",
                                "value": "create_note_data:custom_function:timestamp"
                            }
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 2080,
                            "y": 520
                        },
                        "previous_function": "",
                        "previous_name": "general_note_format",
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "format",
                        "status": "",
                        "template": "### Analyst Review of associated events:\n\nAnalyst wanted to create a case: {1} with {2} and included the following IDs: {3}\n\n---\n\nAutomation message to analyst:\n\n{0}\n\n---\ncreated by {4} at {5}",
                        "title": "format",
                        "type": "coa.Format",
                        "warn": false,
                        "z": 1388
                    },
                    {
                        "action": "get data",
                        "action_type": "investigate",
                        "active": false,
                        "active_keys": {},
                        "active_values": {
                            "body": "{}",
                            "headers": "",
                            "location": "indicator_host_url:formatted_data.*",
                            "verify_certificate": "False"
                        },
                        "angle": 0,
                        "app": "",
                        "appid": "",
                        "approver": "",
                        "assets": [
                            {
                                "action": "get data",
                                "actions": [
                                    "post data",
                                    "get data",
                                    "get options",
                                    "get headers",
                                    "delete data",
                                    "patch data",
                                    "put data",
                                    "test connectivity"
                                ],
                                "active": true,
                                "app_name": "HTTP",
                                "app_version": "2.1.15",
                                "appid": "290b7499-0374-4930-9cdc-5e9b05d65827",
                                "asset_name": "phantom_rest_api",
                                "config_type": "asset",
                                "count": 0,
                                "fields": {
                                    "headers": "",
                                    "location": "indicator_host_url:formatted_data.*",
                                    "verify_certificate": "False"
                                },
                                "has_app": true,
                                "id": 215,
                                "loaded": false,
                                "missing": false,
                                "name": "phantom_rest_api",
                                "output": [
                                    {
                                        "data_path": "action_result.status",
                                        "data_type": "string",
                                        "example_values": [
                                            "success",
                                            "failed"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.parameter.headers",
                                        "data_type": "string",
                                        "example_values": [
                                            "{\"Content-Type\": \"application/json\"}"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "endpoint"
                                        ],
                                        "data_path": "action_result.parameter.location",
                                        "data_type": "string",
                                        "example_values": [
                                            "/rest/cont"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.parameter.verify_certificate",
                                        "data_type": "boolean",
                                        "example_values": [
                                            false
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "url"
                                        ],
                                        "data_path": "action_result.data.*.location",
                                        "data_type": "string",
                                        "example_values": [
                                            "http://192.168.1.26/rest/cont"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.method",
                                        "data_type": "string",
                                        "example_values": [
                                            "GET"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.parsed_response_body",
                                        "data_type": "string",
                                        "example_values": [
                                            "{\"failed\": true, \"message\": \"Requested item not found\"}"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.response_body",
                                        "data_type": "string",
                                        "example_values": [
                                            "{\"failed\": true, \"message\": \"Requested item not found\"}"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.response_headers",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.summary.reason",
                                        "data_type": "string",
                                        "example_values": [
                                            "Not Found"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.summary.status_code",
                                        "data_type": "numeric",
                                        "example_values": [
                                            404
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.message",
                                        "data_type": "string",
                                        "example_values": [
                                            "Can't process response from server. Status Code: 404 Data from server: {\"failed\": true, \"message\": \"Requested item not found\"}"
                                        ]
                                    },
                                    {
                                        "data_path": "summary.total_objects",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1
                                        ]
                                    },
                                    {
                                        "data_path": "summary.total_objects_successful",
                                        "data_type": "numeric",
                                        "example_values": [
                                            0
                                        ]
                                    }
                                ],
                                "parameters": {
                                    "headers": {
                                        "data_type": "string",
                                        "default": null,
                                        "description": "Additional headers (JSON object with headers)",
                                        "key": "headers",
                                        "order": 2,
                                        "required": false
                                    },
                                    "location": {
                                        "data_type": "string",
                                        "default": null,
                                        "description": "Location (e.g. path/to/endpoint?query=string)",
                                        "key": "location",
                                        "order": 0,
                                        "required": true
                                    },
                                    "verify_certificate": {
                                        "data_type": "boolean",
                                        "default": null,
                                        "description": "Verify certificates (if using HTTPS)",
                                        "key": "verify_certificate",
                                        "order": 1,
                                        "required": true
                                    }
                                },
                                "product_name": "HTTP",
                                "product_vendor": "Generic",
                                "targets": "215",
                                "type": "information"
                            }
                        ],
                        "attrs": {
                            ".action": {
                                "text": "get host indicators"
                            },
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "Investigate"
                            },
                            "g.approver image": {
                                "opacity": 1
                            },
                            "g.code image": {
                                "opacity": 1
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.icon image": {
                                "xlink:href": "/inc/coa/img/block_icon_investigate.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            },
                            "g.timer image": {
                                "opacity": 1
                            }
                        },
                        "block_code": "def get_host_indicators(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('get_host_indicators() called')\n        \n    #phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))\n    \n    # collect data for 'get_host_indicators' call\n    formatted_data_1 = phantom.get_format_data(name='indicator_host_url__as_list')\n\n    parameters = []\n    \n    # build parameters list for 'get_host_indicators' call\n    for formatted_part_1 in formatted_data_1:\n        parameters.append({\n            'headers': \"\",\n            'location': formatted_part_1,\n            'verify_certificate': False,\n        })\n\n    phantom.act(action=\"get data\", parameters=parameters, assets=['phantom_rest_api'], callback=common_hosts_urls, name=\"get_host_indicators\")\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": true,
                        "color": "",
                        "connected_to_start": true,
                        "connection_name": "merge hostnames",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "get host indicators",
                        "delay": 0,
                        "description": "",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "8a99e7bf-acfb-4330-91d7-cd096d7d9b2e",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 202,
                        "line_start": 180,
                        "message": "Configuring now",
                        "name": "get data",
                        "notes": "Gets the host indicators using the Phantom REST API",
                        "number": 4,
                        "order": 8,
                        "outPorts": [
                            "out"
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 1120,
                            "y": 220
                        },
                        "previous_function": "",
                        "previous_name": "get_host_indicators",
                        "required_params": {
                            "location": true,
                            "verify_certificate": true
                        },
                        "reviewer": "",
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "action_assets",
                        "status": "",
                        "title": "Investigate",
                        "type": "coa.Action",
                        "warn": false,
                        "z": 1390
                    },
                    {
                        "action": "get data",
                        "action_type": "investigate",
                        "active": false,
                        "active_keys": {},
                        "active_values": {
                            "body": "",
                            "headers": "",
                            "location": "common_userid_format:formatted_data.*",
                            "verify_certificate": "False"
                        },
                        "angle": 0,
                        "app": "",
                        "appid": "",
                        "approver": "",
                        "assets": [
                            {
                                "action": "get data",
                                "actions": [
                                    "post data",
                                    "get data",
                                    "get options",
                                    "get headers",
                                    "delete data",
                                    "patch data",
                                    "put data",
                                    "test connectivity"
                                ],
                                "active": true,
                                "app_name": "HTTP",
                                "app_version": "2.1.15",
                                "appid": "290b7499-0374-4930-9cdc-5e9b05d65827",
                                "asset_name": "phantom_rest_api",
                                "config_type": "asset",
                                "count": 0,
                                "fields": {
                                    "headers": "",
                                    "location": "common_userid_format:formatted_data.*",
                                    "verify_certificate": "False"
                                },
                                "has_app": true,
                                "id": 215,
                                "loaded": false,
                                "missing": false,
                                "name": "phantom_rest_api",
                                "output": [
                                    {
                                        "data_path": "action_result.status",
                                        "data_type": "string",
                                        "example_values": [
                                            "success",
                                            "failed"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.parameter.headers",
                                        "data_type": "string",
                                        "example_values": [
                                            "{\"Content-Type\": \"application/json\"}"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "endpoint"
                                        ],
                                        "data_path": "action_result.parameter.location",
                                        "data_type": "string",
                                        "example_values": [
                                            "/rest/cont"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.parameter.verify_certificate",
                                        "data_type": "boolean",
                                        "example_values": [
                                            false
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "url"
                                        ],
                                        "data_path": "action_result.data.*.location",
                                        "data_type": "string",
                                        "example_values": [
                                            "http://192.168.1.26/rest/cont"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.method",
                                        "data_type": "string",
                                        "example_values": [
                                            "GET"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.parsed_response_body",
                                        "data_type": "string",
                                        "example_values": [
                                            "{\"failed\": true, \"message\": \"Requested item not found\"}"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.response_body",
                                        "data_type": "string",
                                        "example_values": [
                                            "{\"failed\": true, \"message\": \"Requested item not found\"}"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.response_headers",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.summary.reason",
                                        "data_type": "string",
                                        "example_values": [
                                            "Not Found"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.summary.status_code",
                                        "data_type": "numeric",
                                        "example_values": [
                                            404
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.message",
                                        "data_type": "string",
                                        "example_values": [
                                            "Can't process response from server. Status Code: 404 Data from server: {\"failed\": true, \"message\": \"Requested item not found\"}"
                                        ]
                                    },
                                    {
                                        "data_path": "summary.total_objects",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1
                                        ]
                                    },
                                    {
                                        "data_path": "summary.total_objects_successful",
                                        "data_type": "numeric",
                                        "example_values": [
                                            0
                                        ]
                                    }
                                ],
                                "parameters": {
                                    "headers": {
                                        "data_type": "string",
                                        "default": null,
                                        "description": "Additional headers (JSON object with headers)",
                                        "key": "headers",
                                        "order": 2,
                                        "required": false
                                    },
                                    "location": {
                                        "data_type": "string",
                                        "default": null,
                                        "description": "Location (e.g. path/to/endpoint?query=string)",
                                        "key": "location",
                                        "order": 0,
                                        "required": true
                                    },
                                    "verify_certificate": {
                                        "data_type": "boolean",
                                        "default": null,
                                        "description": "Verify certificates (if using HTTPS)",
                                        "key": "verify_certificate",
                                        "order": 1,
                                        "required": true
                                    }
                                },
                                "product_name": "HTTP",
                                "product_vendor": "Generic",
                                "targets": "215",
                                "type": "information"
                            }
                        ],
                        "attrs": {
                            ".action": {
                                "text": "get common userid"
                            },
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "Investigate"
                            },
                            "g.approver image": {
                                "opacity": 1
                            },
                            "g.code image": {
                                "opacity": 1
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.icon image": {
                                "xlink:href": "/inc/coa/img/block_icon_investigate.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            },
                            "g.timer image": {
                                "opacity": 1
                            }
                        },
                        "block_code": "def get_common_userid(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('get_common_userid() called')\n        \n    #phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))\n    \n    # collect data for 'get_common_userid' call\n    formatted_data_1 = phantom.get_format_data(name='common_userid_format__as_list')\n\n    parameters = []\n    \n    # build parameters list for 'get_common_userid' call\n    for formatted_part_1 in formatted_data_1:\n        parameters.append({\n            'headers': \"\",\n            'location': formatted_part_1,\n            'verify_certificate': False,\n        })\n\n    phantom.act(action=\"get data\", parameters=parameters, assets=['phantom_rest_api'], callback=container_userid_format, name=\"get_common_userid\")\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": true,
                        "color": "",
                        "connected_to_start": true,
                        "connection_name": "get userid indicators",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "get common userid",
                        "delay": 0,
                        "description": "Gets common containers for the indicators presented",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "ee076d0c-3bfe-421c-93b8-58fd43d46b7f",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 339,
                        "line_start": 317,
                        "message": "Configuring now",
                        "name": "get data",
                        "notes": "Use the Phantom REST API for indicators to get the common containers related to the indicator",
                        "number": 2,
                        "order": 13,
                        "outPorts": [
                            "out"
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 1600,
                            "y": 360
                        },
                        "previous_function": "",
                        "previous_name": "get_common_userid",
                        "required_params": {
                            "location": true,
                            "verify_certificate": true
                        },
                        "reviewer": "",
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "action_assets",
                        "status": "",
                        "title": "Investigate",
                        "type": "coa.Action",
                        "warn": false,
                        "z": 1391
                    },
                    {
                        "action": "get data",
                        "action_type": "investigate",
                        "active": false,
                        "active_keys": {},
                        "active_values": {
                            "headers": "",
                            "location": "container_host_format:formatted_data.*",
                            "verify_certificate": "False"
                        },
                        "angle": 0,
                        "app": "",
                        "appid": "",
                        "approver": "",
                        "assets": [
                            {
                                "action": "get data",
                                "actions": [
                                    "post data",
                                    "get data",
                                    "get options",
                                    "get headers",
                                    "delete data",
                                    "patch data",
                                    "put data",
                                    "test connectivity"
                                ],
                                "active": true,
                                "app_name": "HTTP",
                                "app_version": "2.1.15",
                                "appid": "290b7499-0374-4930-9cdc-5e9b05d65827",
                                "asset_name": "phantom_rest_api",
                                "config_type": "asset",
                                "count": 0,
                                "fields": {
                                    "headers": "",
                                    "location": "container_host_format:formatted_data.*",
                                    "verify_certificate": "False"
                                },
                                "has_app": true,
                                "id": 215,
                                "loaded": false,
                                "missing": false,
                                "name": "phantom_rest_api",
                                "output": [
                                    {
                                        "data_path": "action_result.status",
                                        "data_type": "string",
                                        "example_values": [
                                            "success",
                                            "failed"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.parameter.headers",
                                        "data_type": "string",
                                        "example_values": [
                                            "{\"Content-Type\": \"application/json\"}"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "endpoint"
                                        ],
                                        "data_path": "action_result.parameter.location",
                                        "data_type": "string",
                                        "example_values": [
                                            "/rest/cont"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.parameter.verify_certificate",
                                        "data_type": "boolean",
                                        "example_values": [
                                            false
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "url"
                                        ],
                                        "data_path": "action_result.data.*.location",
                                        "data_type": "string",
                                        "example_values": [
                                            "http://192.168.1.26/rest/cont"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.method",
                                        "data_type": "string",
                                        "example_values": [
                                            "GET"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.parsed_response_body",
                                        "data_type": "string",
                                        "example_values": [
                                            "{\"failed\": true, \"message\": \"Requested item not found\"}"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.response_body",
                                        "data_type": "string",
                                        "example_values": [
                                            "{\"failed\": true, \"message\": \"Requested item not found\"}"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.response_headers",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.summary.reason",
                                        "data_type": "string",
                                        "example_values": [
                                            "Not Found"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.summary.status_code",
                                        "data_type": "numeric",
                                        "example_values": [
                                            404
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.message",
                                        "data_type": "string",
                                        "example_values": [
                                            "Can't process response from server. Status Code: 404 Data from server: {\"failed\": true, \"message\": \"Requested item not found\"}"
                                        ]
                                    },
                                    {
                                        "data_path": "summary.total_objects",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1
                                        ]
                                    },
                                    {
                                        "data_path": "summary.total_objects_successful",
                                        "data_type": "numeric",
                                        "example_values": [
                                            0
                                        ]
                                    }
                                ],
                                "parameters": {
                                    "headers": {
                                        "data_type": "string",
                                        "default": null,
                                        "description": "Additional headers (JSON object with headers)",
                                        "key": "headers",
                                        "order": 2,
                                        "required": false
                                    },
                                    "location": {
                                        "data_type": "string",
                                        "default": null,
                                        "description": "Location (e.g. path/to/endpoint?query=string)",
                                        "key": "location",
                                        "order": 0,
                                        "required": true
                                    },
                                    "verify_certificate": {
                                        "data_type": "boolean",
                                        "default": null,
                                        "description": "Verify certificates (if using HTTPS)",
                                        "key": "verify_certificate",
                                        "order": 1,
                                        "required": true
                                    }
                                },
                                "product_name": "HTTP",
                                "product_vendor": "Generic",
                                "targets": "215",
                                "type": "information"
                            }
                        ],
                        "attrs": {
                            ".action": {
                                "text": "get host container info"
                            },
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "Investigate"
                            },
                            "g.approver image": {
                                "opacity": 1
                            },
                            "g.code image": {
                                "opacity": 1
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.icon image": {
                                "xlink:href": "/inc/coa/img/block_icon_investigate.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            },
                            "g.timer image": {
                                "opacity": 1
                            }
                        },
                        "block_code": "def get_host_container_info(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('get_host_container_info() called')\n        \n    #phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))\n    \n    # collect data for 'get_host_container_info' call\n    formatted_data_1 = phantom.get_format_data(name='container_host_format__as_list')\n\n    parameters = []\n    \n    # build parameters list for 'get_host_container_info' call\n    for formatted_part_1 in formatted_data_1:\n        parameters.append({\n            'headers': \"\",\n            'location': formatted_part_1,\n            'verify_certificate': False,\n        })\n\n    phantom.act(action=\"get data\", parameters=parameters, assets=['phantom_rest_api'], callback=check_user_info, name=\"get_host_container_info\")\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": true,
                        "color": "",
                        "connected_to_start": true,
                        "connection_name": "get common hosts",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "get host container info",
                        "delay": 0,
                        "description": "",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "9ee71409-cea6-486e-a44f-b33095a4d3e4",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 489,
                        "line_start": 467,
                        "message": "Configuring now",
                        "name": "get data",
                        "notes": "Get the container info using the Phantom REST API",
                        "number": 5,
                        "order": 18,
                        "outPorts": [
                            "out"
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 2080,
                            "y": 220
                        },
                        "previous_function": "",
                        "previous_name": "get_host_container_info",
                        "required_params": {
                            "location": true,
                            "verify_certificate": true
                        },
                        "reviewer": "",
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "action_assets",
                        "status": "",
                        "title": "Investigate",
                        "type": "coa.Action",
                        "warn": false,
                        "z": 1393
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".format": {
                                "text": "container info format"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out-1": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out-1>.port-body": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "format"
                            },
                            "g.code image": {
                                "opacity": 1
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            }
                        },
                        "block_code": "def container_info_format(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('container_info_format() called')\n    \n    template = \"\"\"| Type | Container Id | Container Name | Status | Owner | URL |\n| --- | --- | --- | --- | --- | --- |\n| ***User*** | data | below | ---- | ---- |---- |\n%%\n| {0} | {1} | {2} | {3} | {4} | base_url/mission/{1} |\n%%\n| ***Host*** | data | below | ---- | ---- | ---- |\n{5}\"\"\"\n\n    # parameter list for template variable replacement\n    parameters = [\n        \"get_userid_container_info:action_result.data.*.response_body.container_type\",\n        \"get_userid_container_info:action_result.data.*.response_body.id\",\n        \"get_userid_container_info:action_result.data.*.response_body.name\",\n        \"get_userid_container_info:action_result.data.*.response_body.status\",\n        \"get_userid_container_info:action_result.data.*.response_body.owner_name\",\n        \"container_host_info_format:formatted_data\",\n    ]\n\n    phantom.format(container=container, template=template, parameters=parameters, name=\"container_info_format\")\n\n    create_note_data(container=container)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "get userid container info, get host container info",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "container info format",
                        "description": "Using the key \"baseurl\" to do a dynamic replace in the prompt.",
                        "format": "format",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "070c6c4b-a4b8-44d9-a6a3-5111e0372ec4",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 520,
                        "line_start": 492,
                        "message": "Configuring now",
                        "name": "format",
                        "notes": "formats the container info for the following prompt.",
                        "number": 11,
                        "order": 19,
                        "outPorts": [
                            "out-1"
                        ],
                        "parameters": [
                            {
                                "position": 0,
                                "type": "",
                                "value": "get_userid_container_info:action_result.data.*.response_body.container_type"
                            },
                            {
                                "position": 0,
                                "type": "",
                                "value": "get_userid_container_info:action_result.data.*.response_body.id"
                            },
                            {
                                "position": 1,
                                "type": "",
                                "value": "get_userid_container_info:action_result.data.*.response_body.name"
                            },
                            {
                                "position": 2,
                                "type": "",
                                "value": "get_userid_container_info:action_result.data.*.response_body.status"
                            },
                            {
                                "position": 3,
                                "type": "",
                                "value": "get_userid_container_info:action_result.data.*.response_body.owner_name"
                            },
                            {
                                "position": 5,
                                "type": "",
                                "value": "container_host_info_format:formatted_data"
                            }
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 640,
                            "y": 520
                        },
                        "previous_function": "",
                        "previous_name": "container_info_format",
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "format",
                        "status": "",
                        "template": "| Type | Container Id | Container Name | Status | Owner | URL |\n| --- | --- | --- | --- | --- | --- |\n| ***User*** | data | below | ---- | ---- |---- |\n%%\n| {0} | {1} | {2} | {3} | {4} | base_url/mission/{1} |\n%%\n| ***Host*** | data | below | ---- | ---- | ---- |\n{5}",
                        "title": "format",
                        "type": "coa.Format",
                        "warn": false,
                        "z": 1395
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "561f78ef-8a72-41ef-9190-f85d77287f78",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "64bcead4-550f-4b61-b513-92592078049f",
                            "port": "out-1",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "0dd983ca-f0f3-4788-8d63-7b7d7898738d",
                            "selector": ".port-body[type=\"input\"]"
                        },
                        "type": "link",
                        "z": 1401
                    },
                    {
                        ".scmName/text": "enrichment",
                        "active": false,
                        "active_keys": {},
                        "active_values": {},
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".customFunction": {
                                "text": "merge hostnames"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".scmName": {
                                "text": "enrichment"
                            },
                            ".title": {
                                "text": "custom function"
                            },
                            ".title-info": {
                                "text": ""
                            },
                            "g.branch image": {
                                "opacity": 1
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            }
                        },
                        "block_code": "def merge_hostnames(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('merge_hostnames() called')\n    \n    filtered_artifacts_data_0 = phantom.collect2(container=container, datapath=['filtered-data:host_user_filter:condition_1:artifact:*.cef.destinationAddress', 'filtered-data:host_user_filter:condition_1:artifact:*.cef.dest_ip', 'filtered-data:host_user_filter:condition_1:artifact:*.cef.destinationHostName', 'filtered-data:host_user_filter:condition_1:artifact:*.cef.dhost', 'filtered-data:host_user_filter:condition_1:artifact:*.cef.sourceAddress', 'filtered-data:host_user_filter:condition_1:artifact:*.cef.src_ip', 'filtered-data:host_user_filter:condition_1:artifact:*.cef.sourceHostName', 'filtered-data:host_user_filter:condition_1:artifact:*.cef.shost'])\n\n    parameters = []\n\n    filtered_artifacts_data_0_0 = [item[0] for item in filtered_artifacts_data_0]\n    filtered_artifacts_data_0_1 = [item[1] for item in filtered_artifacts_data_0]\n    filtered_artifacts_data_0_2 = [item[2] for item in filtered_artifacts_data_0]\n    filtered_artifacts_data_0_3 = [item[3] for item in filtered_artifacts_data_0]\n    filtered_artifacts_data_0_4 = [item[4] for item in filtered_artifacts_data_0]\n    filtered_artifacts_data_0_5 = [item[5] for item in filtered_artifacts_data_0]\n    filtered_artifacts_data_0_6 = [item[6] for item in filtered_artifacts_data_0]\n    filtered_artifacts_data_0_7 = [item[7] for item in filtered_artifacts_data_0]\n\n    parameters.append({\n        'input_1': filtered_artifacts_data_0_0,\n        'input_2': filtered_artifacts_data_0_1,\n        'input_3': filtered_artifacts_data_0_2,\n        'input_4': filtered_artifacts_data_0_3,\n        'input_5': filtered_artifacts_data_0_4,\n        'input_6': filtered_artifacts_data_0_5,\n        'input_7': filtered_artifacts_data_0_6,\n        'input_8': filtered_artifacts_data_0_7,\n        'input_9': None,\n        'input_10': None,\n    })\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n\n    # Write your custom code here...\n\n    ################################################################################\n    ## Custom Code End\n    ################################################################################    \n\n    # call custom function \"enrichment/list_merge_dedup\", returns the custom_function_run_id\n    phantom.custom_function(custom_function='enrichment/list_merge_dedup', parameters=parameters, name='merge_hostnames', callback=indicator_host_url)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": true,
                        "cfDisplayPath": "enrichment/list_merge_dedup",
                        "cfInputs": {
                            "input_1": {
                                "collectionType": "filtered_artifacts_data",
                                "dataPath": "filtered-data:host_user_filter:condition_1:artifact:*.cef.destinationAddress",
                                "paramName": "filtered_artifacts_data_0_0",
                                "type": "list"
                            },
                            "input_10": {
                                "dataPath": "",
                                "type": "list"
                            },
                            "input_2": {
                                "collectionType": "filtered_artifacts_data",
                                "dataPath": "filtered-data:host_user_filter:condition_1:artifact:*.cef.dest_ip",
                                "paramName": "filtered_artifacts_data_0_1",
                                "type": "list"
                            },
                            "input_3": {
                                "collectionType": "filtered_artifacts_data",
                                "dataPath": "filtered-data:host_user_filter:condition_1:artifact:*.cef.destinationHostName",
                                "paramName": "filtered_artifacts_data_0_2",
                                "type": "list"
                            },
                            "input_4": {
                                "collectionType": "filtered_artifacts_data",
                                "dataPath": "filtered-data:host_user_filter:condition_1:artifact:*.cef.dhost",
                                "paramName": "filtered_artifacts_data_0_3",
                                "type": "list"
                            },
                            "input_5": {
                                "collectionType": "filtered_artifacts_data",
                                "dataPath": "filtered-data:host_user_filter:condition_1:artifact:*.cef.sourceAddress",
                                "paramName": "filtered_artifacts_data_0_4",
                                "type": "list"
                            },
                            "input_6": {
                                "collectionType": "filtered_artifacts_data",
                                "dataPath": "filtered-data:host_user_filter:condition_1:artifact:*.cef.src_ip",
                                "paramName": "filtered_artifacts_data_0_5",
                                "type": "list"
                            },
                            "input_7": {
                                "collectionType": "filtered_artifacts_data",
                                "dataPath": "filtered-data:host_user_filter:condition_1:artifact:*.cef.sourceHostName",
                                "paramName": "filtered_artifacts_data_0_6",
                                "type": "list"
                            },
                            "input_8": {
                                "collectionType": "filtered_artifacts_data",
                                "dataPath": "filtered-data:host_user_filter:condition_1:artifact:*.cef.shost",
                                "paramName": "filtered_artifacts_data_0_7",
                                "type": "list"
                            },
                            "input_9": {
                                "dataPath": "",
                                "type": "list"
                            }
                        },
                        "color": "",
                        "connected_to_start": true,
                        "connection_name": "get username",
                        "connection_type": "action",
                        "currentVersion": true,
                        "customCodeEndLineOffset": 7,
                        "customCodeStartLine": 31,
                        "customFunction": "enrichment/list_merge_dedup",
                        "customFunctionId": null,
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "merge hostnames",
                        "delay": 0,
                        "description": "",
                        "draftMode": false,
                        "existingCF": true,
                        "functionBlock": "custom function",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "0dd983ca-f0f3-4788-8d63-7b7d7898738d",
                        "inPorts": [
                            "in"
                        ],
                        "input_1-0": "filtered-data:host_user_filter:condition_1:artifact:*.cef.destinationAddress",
                        "input_2-1": "filtered-data:host_user_filter:condition_1:artifact:*.cef.dest_ip",
                        "input_3-2": "filtered-data:host_user_filter:condition_1:artifact:*.cef.destinationHostName",
                        "input_4-3": "filtered-data:host_user_filter:condition_1:artifact:*.cef.dhost",
                        "input_5-4": "filtered-data:host_user_filter:condition_1:artifact:*.cef.sourceAddress",
                        "input_6-5": "filtered-data:host_user_filter:condition_1:artifact:*.cef.src_ip",
                        "input_7-6": "filtered-data:host_user_filter:condition_1:artifact:*.cef.sourceHostName",
                        "input_8-7": "filtered-data:host_user_filter:condition_1:artifact:*.cef.shost",
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 880,
                        "line_start": 837,
                        "message": "Configuring now",
                        "name": "list_merge_dedup",
                        "notes": "Merges ip and hostnames into a single source:\ndestinationAddress\ndest_ip\ndestinationHostName\ndhost\nsourceAddress\nsrc_ip\nsourceHostName\nshost",
                        "number": 3,
                        "order": 32,
                        "outPorts": [
                            "out"
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 640,
                            "y": 220
                        },
                        "previous_function": "",
                        "previous_name": "merge_hostnames",
                        "selectedCustomFunction": {
                            "description": "Merge 2-10 different data paths into a single output data path. For example, if IP addresses are stored in the fields sourceAddress, destinationAddress, and deviceAddress, then those three fields could be merged together to form a single list of IP addresses.",
                            "draftMode": false,
                            "id": 173,
                            "inputs": [
                                {
                                    "_pretty_custom_function": "list_merge_dedup",
                                    "contains_type": [
                                        "*"
                                    ],
                                    "custom_function": 173,
                                    "description": "",
                                    "id": 561,
                                    "input_type": "list",
                                    "name": "input_1",
                                    "placeholder": ""
                                },
                                {
                                    "_pretty_custom_function": "list_merge_dedup",
                                    "contains_type": [
                                        "*"
                                    ],
                                    "custom_function": 173,
                                    "description": "",
                                    "id": 562,
                                    "input_type": "list",
                                    "name": "input_2",
                                    "placeholder": ""
                                },
                                {
                                    "_pretty_custom_function": "list_merge_dedup",
                                    "contains_type": [
                                        "*"
                                    ],
                                    "custom_function": 173,
                                    "description": "",
                                    "id": 563,
                                    "input_type": "list",
                                    "name": "input_3",
                                    "placeholder": ""
                                },
                                {
                                    "_pretty_custom_function": "list_merge_dedup",
                                    "contains_type": [
                                        "*"
                                    ],
                                    "custom_function": 173,
                                    "description": "",
                                    "id": 564,
                                    "input_type": "list",
                                    "name": "input_4",
                                    "placeholder": ""
                                },
                                {
                                    "_pretty_custom_function": "list_merge_dedup",
                                    "contains_type": [
                                        "*"
                                    ],
                                    "custom_function": 173,
                                    "description": "",
                                    "id": 565,
                                    "input_type": "list",
                                    "name": "input_5",
                                    "placeholder": ""
                                },
                                {
                                    "_pretty_custom_function": "list_merge_dedup",
                                    "contains_type": [
                                        "*"
                                    ],
                                    "custom_function": 173,
                                    "description": "",
                                    "id": 566,
                                    "input_type": "list",
                                    "name": "input_6",
                                    "placeholder": ""
                                },
                                {
                                    "_pretty_custom_function": "list_merge_dedup",
                                    "contains_type": [
                                        "*"
                                    ],
                                    "custom_function": 173,
                                    "description": "",
                                    "id": 567,
                                    "input_type": "list",
                                    "name": "input_7",
                                    "placeholder": ""
                                },
                                {
                                    "_pretty_custom_function": "list_merge_dedup",
                                    "contains_type": [
                                        "*"
                                    ],
                                    "custom_function": 173,
                                    "description": "",
                                    "id": 568,
                                    "input_type": "list",
                                    "name": "input_8",
                                    "placeholder": ""
                                },
                                {
                                    "_pretty_custom_function": "list_merge_dedup",
                                    "contains_type": [
                                        "*"
                                    ],
                                    "custom_function": 173,
                                    "description": "",
                                    "id": 569,
                                    "input_type": "list",
                                    "name": "input_9",
                                    "placeholder": ""
                                },
                                {
                                    "_pretty_custom_function": "list_merge_dedup",
                                    "contains_type": [
                                        "*"
                                    ],
                                    "custom_function": 173,
                                    "description": "",
                                    "id": 570,
                                    "input_type": "list",
                                    "name": "input_10",
                                    "placeholder": ""
                                }
                            ],
                            "name": "list_merge_dedup",
                            "outputs": [
                                {
                                    "_pretty_custom_function": "list_merge_dedup",
                                    "contains_type": [
                                        "*"
                                    ],
                                    "custom_function": 173,
                                    "data_path": "*.item",
                                    "description": "A combined list of all the values from all the input lists",
                                    "id": 216
                                }
                            ],
                            "playbooks": {
                                "draft_playbooks": [],
                                "draft_version_id": null,
                                "playbooks": [
                                    {
                                        "active": false,
                                        "display_path": "enrichment/Analyze user-host activity",
                                        "draft_mode": false,
                                        "id": 4006,
                                        "name": "Analyze user-host activity",
                                        "viewable": true
                                    },
                                    {
                                        "active": false,
                                        "display_path": "enrichment/Analyze user-host activity_py3",
                                        "draft_mode": false,
                                        "id": 4009,
                                        "name": "Analyze user-host activity_py3",
                                        "viewable": true
                                    },
                                    {
                                        "active": false,
                                        "display_path": "enrichment/Associate Host and Account Events",
                                        "draft_mode": false,
                                        "id": 4011,
                                        "name": "Associate Host and Account Events",
                                        "viewable": true
                                    },
                                    {
                                        "active": false,
                                        "display_path": "enrichment/Associate Host and Account Events_py3",
                                        "draft_mode": false,
                                        "id": 4012,
                                        "name": "Associate Host and Account Events_py3",
                                        "viewable": true
                                    }
                                ]
                            },
                            "scmId": 63,
                            "scmName": "enrichment"
                        },
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "repo",
                        "status": "",
                        "title": "custom function",
                        "type": "coa.CustomFunctionBlock",
                        "userGeneratedCode": "    # Write your custom code here...",
                        "warn": false,
                        "z": 1403
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".format": {
                                "text": "common hosts urls"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out-1": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out-1>.port-body": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "format"
                            },
                            "g.code image": {
                                "opacity": 1
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            }
                        },
                        "block_code": "def common_hosts_urls(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('common_hosts_urls() called')\n    \n    template = \"\"\"%%\n/indicator_common_container?tenant_id=0&indicator_ids={0}\n%%\"\"\"\n\n    # parameter list for template variable replacement\n    parameters = [\n        \"get_host_indicators:action_result.data.*.response_body.id\",\n    ]\n\n    phantom.format(container=container, template=template, parameters=parameters, name=\"common_hosts_urls\")\n\n    get_common_hosts(container=container)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": false,
                        "connection_name": "get host indicators",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "common hosts urls",
                        "description": "",
                        "format": "format",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "98898cd6-75ba-40a5-98d3-18e1f2d85fde",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 705,
                        "line_start": 687,
                        "message": "Configuring now",
                        "name": "format",
                        "notes": "Formats the indicator_common_container REST API lookup.",
                        "number": 13,
                        "order": 26,
                        "outPorts": [
                            "out-1"
                        ],
                        "parameters": [
                            {
                                "position": 0,
                                "type": "",
                                "value": "get_host_indicators:action_result.data.*.response_body.id"
                            }
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 1360,
                            "y": 220
                        },
                        "previous_function": "",
                        "previous_name": "common_hosts_urls",
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "format",
                        "status": "",
                        "template": "%%\n/indicator_common_container?tenant_id=0&indicator_ids={0}\n%%",
                        "title": "format",
                        "type": "coa.Format",
                        "warn": false,
                        "z": 1404
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "2291a557-233c-44cb-aba3-32e2f675c2ab",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "0dd983ca-f0f3-4788-8d63-7b7d7898738d",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "e41b7e68-b5f9-4b8e-b90e-be5c384add62",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 1405
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "211ce5a0-c9ac-4436-b84f-a06fa4e84699",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "f3635437-e5a0-41c3-b3b7-937298d942be",
                            "port": "out-1",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "ed68faa4-14ee-465a-9dda-74f53615929c",
                            "selector": ".port-body[type=\"input\"]"
                        },
                        "type": "link",
                        "z": 1407
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "8aa7142a-7247-4d4c-b35a-146ff49ef5fd",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "ed68faa4-14ee-465a-9dda-74f53615929c",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "adf875b4-b05d-4193-8785-d59482543a75",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 1409
                    },
                    {
                        ".scmName/text": "enrichment",
                        "active": false,
                        "active_keys": {},
                        "active_values": {},
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".customFunction": {
                                "text": "merge usernames"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".scmName": {
                                "text": "enrichment"
                            },
                            ".title": {
                                "text": "custom function"
                            },
                            ".title-info": {
                                "text": ""
                            },
                            "g.branch image": {
                                "opacity": 1
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            }
                        },
                        "block_code": "def merge_usernames(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('merge_usernames() called')\n    \n    filtered_artifacts_data_0 = phantom.collect2(container=container, datapath=['filtered-data:user_info_filter:condition_1:artifact:*.cef.destinationUserId', 'filtered-data:user_info_filter:condition_1:artifact:*.cef.destinationUserName', 'filtered-data:user_info_filter:condition_1:artifact:*.cef.duser', 'filtered-data:user_info_filter:condition_1:artifact:*.cef.sourceUserId', 'filtered-data:user_info_filter:condition_1:artifact:*.cef.sourceUserName', 'filtered-data:user_info_filter:condition_1:artifact:*.cef.suser'])\n\n    parameters = []\n\n    filtered_artifacts_data_0_0 = [item[0] for item in filtered_artifacts_data_0]\n    filtered_artifacts_data_0_1 = [item[1] for item in filtered_artifacts_data_0]\n    filtered_artifacts_data_0_2 = [item[2] for item in filtered_artifacts_data_0]\n    filtered_artifacts_data_0_3 = [item[3] for item in filtered_artifacts_data_0]\n    filtered_artifacts_data_0_4 = [item[4] for item in filtered_artifacts_data_0]\n    filtered_artifacts_data_0_5 = [item[5] for item in filtered_artifacts_data_0]\n\n    parameters.append({\n        'input_1': filtered_artifacts_data_0_0,\n        'input_2': filtered_artifacts_data_0_1,\n        'input_3': filtered_artifacts_data_0_2,\n        'input_4': filtered_artifacts_data_0_3,\n        'input_5': filtered_artifacts_data_0_4,\n        'input_6': filtered_artifacts_data_0_5,\n        'input_7': None,\n        'input_8': None,\n        'input_9': None,\n        'input_10': None,\n    })\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n\n    # Write your custom code here...\n\n    ################################################################################\n    ## Custom Code End\n    ################################################################################    \n\n    # call custom function \"enrichment/list_merge_dedup\", returns the custom_function_run_id\n    phantom.custom_function(custom_function='enrichment/list_merge_dedup', parameters=parameters, name='merge_usernames', callback=indicator_userid_url)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": true,
                        "cfDisplayPath": "enrichment/list_merge_dedup",
                        "cfInputs": {
                            "input_1": {
                                "collectionType": "filtered_artifacts_data",
                                "dataPath": "filtered-data:user_info_filter:condition_1:artifact:*.cef.destinationUserId",
                                "paramName": "filtered_artifacts_data_0_0",
                                "type": "list"
                            },
                            "input_10": {
                                "dataPath": "",
                                "type": "list"
                            },
                            "input_2": {
                                "collectionType": "filtered_artifacts_data",
                                "dataPath": "filtered-data:user_info_filter:condition_1:artifact:*.cef.destinationUserName",
                                "paramName": "filtered_artifacts_data_0_1",
                                "type": "list"
                            },
                            "input_3": {
                                "collectionType": "filtered_artifacts_data",
                                "dataPath": "filtered-data:user_info_filter:condition_1:artifact:*.cef.duser",
                                "paramName": "filtered_artifacts_data_0_2",
                                "type": "list"
                            },
                            "input_4": {
                                "collectionType": "filtered_artifacts_data",
                                "dataPath": "filtered-data:user_info_filter:condition_1:artifact:*.cef.sourceUserId",
                                "paramName": "filtered_artifacts_data_0_3",
                                "type": "list"
                            },
                            "input_5": {
                                "collectionType": "filtered_artifacts_data",
                                "dataPath": "filtered-data:user_info_filter:condition_1:artifact:*.cef.sourceUserName",
                                "paramName": "filtered_artifacts_data_0_4",
                                "type": "list"
                            },
                            "input_6": {
                                "collectionType": "filtered_artifacts_data",
                                "dataPath": "filtered-data:user_info_filter:condition_1:artifact:*.cef.suser",
                                "paramName": "filtered_artifacts_data_0_5",
                                "type": "list"
                            },
                            "input_7": {
                                "dataPath": "",
                                "type": "list"
                            },
                            "input_8": {
                                "dataPath": "",
                                "type": "list"
                            },
                            "input_9": {
                                "dataPath": "",
                                "type": "list"
                            }
                        },
                        "color": "",
                        "connected_to_start": true,
                        "connection_name": "get username, get host container info",
                        "connection_type": "action",
                        "currentVersion": true,
                        "customCodeEndLineOffset": 7,
                        "customCodeStartLine": 29,
                        "customFunction": "enrichment/list_merge_dedup",
                        "customFunctionId": null,
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "merge usernames",
                        "delay": 0,
                        "description": "",
                        "draftMode": false,
                        "existingCF": true,
                        "functionBlock": "custom function",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "ed68faa4-14ee-465a-9dda-74f53615929c",
                        "inPorts": [
                            "in"
                        ],
                        "input_1-0": "filtered-data:user_info_filter:condition_1:artifact:*.cef.destinationUserId",
                        "input_2-1": "filtered-data:user_info_filter:condition_1:artifact:*.cef.destinationUserName",
                        "input_3-2": "filtered-data:user_info_filter:condition_1:artifact:*.cef.duser",
                        "input_4-3": "filtered-data:user_info_filter:condition_1:artifact:*.cef.sourceUserId",
                        "input_5-4": "filtered-data:user_info_filter:condition_1:artifact:*.cef.sourceUserName",
                        "input_6-5": "filtered-data:user_info_filter:condition_1:artifact:*.cef.suser",
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 921,
                        "line_start": 880,
                        "message": "Configuring now",
                        "name": "list_merge_dedup",
                        "notes": "Merges usernames regardless of source name:\ndestinationUserID\ndestinationUserName\nduser\nsourceUserId\nsourceUserName\nsuser",
                        "number": 4,
                        "order": 33,
                        "outPorts": [
                            "out"
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 640,
                            "y": 360
                        },
                        "previous_function": "",
                        "previous_name": "merge_usernames",
                        "selectedCustomFunction": {
                            "description": "Merge 2-10 different data paths into a single output data path. For example, if IP addresses are stored in the fields sourceAddress, destinationAddress, and deviceAddress, then those three fields could be merged together to form a single list of IP addresses.",
                            "draftMode": false,
                            "id": 173,
                            "inputs": [
                                {
                                    "_pretty_custom_function": "list_merge_dedup",
                                    "contains_type": [
                                        "*"
                                    ],
                                    "custom_function": 173,
                                    "description": "",
                                    "id": 561,
                                    "input_type": "list",
                                    "name": "input_1",
                                    "placeholder": ""
                                },
                                {
                                    "_pretty_custom_function": "list_merge_dedup",
                                    "contains_type": [
                                        "*"
                                    ],
                                    "custom_function": 173,
                                    "description": "",
                                    "id": 562,
                                    "input_type": "list",
                                    "name": "input_2",
                                    "placeholder": ""
                                },
                                {
                                    "_pretty_custom_function": "list_merge_dedup",
                                    "contains_type": [
                                        "*"
                                    ],
                                    "custom_function": 173,
                                    "description": "",
                                    "id": 563,
                                    "input_type": "list",
                                    "name": "input_3",
                                    "placeholder": ""
                                },
                                {
                                    "_pretty_custom_function": "list_merge_dedup",
                                    "contains_type": [
                                        "*"
                                    ],
                                    "custom_function": 173,
                                    "description": "",
                                    "id": 564,
                                    "input_type": "list",
                                    "name": "input_4",
                                    "placeholder": ""
                                },
                                {
                                    "_pretty_custom_function": "list_merge_dedup",
                                    "contains_type": [
                                        "*"
                                    ],
                                    "custom_function": 173,
                                    "description": "",
                                    "id": 565,
                                    "input_type": "list",
                                    "name": "input_5",
                                    "placeholder": ""
                                },
                                {
                                    "_pretty_custom_function": "list_merge_dedup",
                                    "contains_type": [
                                        "*"
                                    ],
                                    "custom_function": 173,
                                    "description": "",
                                    "id": 566,
                                    "input_type": "list",
                                    "name": "input_6",
                                    "placeholder": ""
                                },
                                {
                                    "_pretty_custom_function": "list_merge_dedup",
                                    "contains_type": [
                                        "*"
                                    ],
                                    "custom_function": 173,
                                    "description": "",
                                    "id": 567,
                                    "input_type": "list",
                                    "name": "input_7",
                                    "placeholder": ""
                                },
                                {
                                    "_pretty_custom_function": "list_merge_dedup",
                                    "contains_type": [
                                        "*"
                                    ],
                                    "custom_function": 173,
                                    "description": "",
                                    "id": 568,
                                    "input_type": "list",
                                    "name": "input_8",
                                    "placeholder": ""
                                },
                                {
                                    "_pretty_custom_function": "list_merge_dedup",
                                    "contains_type": [
                                        "*"
                                    ],
                                    "custom_function": 173,
                                    "description": "",
                                    "id": 569,
                                    "input_type": "list",
                                    "name": "input_9",
                                    "placeholder": ""
                                },
                                {
                                    "_pretty_custom_function": "list_merge_dedup",
                                    "contains_type": [
                                        "*"
                                    ],
                                    "custom_function": 173,
                                    "description": "",
                                    "id": 570,
                                    "input_type": "list",
                                    "name": "input_10",
                                    "placeholder": ""
                                }
                            ],
                            "name": "list_merge_dedup",
                            "outputs": [
                                {
                                    "_pretty_custom_function": "list_merge_dedup",
                                    "contains_type": [
                                        "*"
                                    ],
                                    "custom_function": 173,
                                    "data_path": "*.item",
                                    "description": "A combined list of all the values from all the input lists",
                                    "id": 216
                                }
                            ],
                            "playbooks": {
                                "draft_playbooks": [],
                                "draft_version_id": null,
                                "playbooks": [
                                    {
                                        "active": false,
                                        "display_path": "enrichment/Analyze user-host activity",
                                        "draft_mode": false,
                                        "id": 4006,
                                        "name": "Analyze user-host activity",
                                        "viewable": true
                                    },
                                    {
                                        "active": false,
                                        "display_path": "enrichment/Analyze user-host activity_py3",
                                        "draft_mode": false,
                                        "id": 4009,
                                        "name": "Analyze user-host activity_py3",
                                        "viewable": true
                                    },
                                    {
                                        "active": false,
                                        "display_path": "enrichment/Associate Host and Account Events",
                                        "draft_mode": false,
                                        "id": 4011,
                                        "name": "Associate Host and Account Events",
                                        "viewable": true
                                    },
                                    {
                                        "active": false,
                                        "display_path": "enrichment/Associate Host and Account Events_py3",
                                        "draft_mode": false,
                                        "id": 4012,
                                        "name": "Associate Host and Account Events_py3",
                                        "viewable": true
                                    }
                                ]
                            },
                            "scmId": 63,
                            "scmName": "enrichment"
                        },
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "repo",
                        "status": "",
                        "title": "custom function",
                        "type": "coa.CustomFunctionBlock",
                        "userGeneratedCode": "    # Write your custom code here...",
                        "warn": false,
                        "z": 1410
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#637282",
                                "transform": "rotate(45 30 70)"
                            },
                            ".inPorts>.port-0>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".number": {
                                "text": 3
                            },
                            ".outPorts>.port-0": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                },
                                "ref-x": 83,
                                "ref-y": 40
                            },
                            ".outPorts>.port-0>.port-body": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                }
                            },
                            ".outPorts>.port-1": {
                                "port": {
                                    "id": "out-2",
                                    "type": "out"
                                },
                                "ref-x": 41,
                                "ref-y": 82
                            },
                            ".outPorts>.port-1>.port-body": {
                                "port": {
                                    "id": "out-2",
                                    "type": "out"
                                }
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            }
                        },
                        "block_code": "def check_user_info(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('check_user_info() called')\n\n    # check for 'if' condition 1\n    matched = phantom.decision(\n        container=container,\n        action_results=results,\n        conditions=[\n            [\"artifact:*.cef.destinationUserId\", \"!=\", \"\"],\n            [\"artifact:*.cef.destinationUserName\", \"!=\", \"\"],\n            [\"artifact:*.cef.duser\", \"!=\", \"\"],\n            [\"artifact:*.cef.sourceUserId\", \"!=\", \"\"],\n            [\"artifact:*.cef.sourceUserName\", \"!=\", \"\"],\n            [\"artifact:*.cef.suser\", \"!=\", \"\"],\n        ],\n        logical_operator='or')\n\n    # call connected blocks if condition 1 matched\n    if matched:\n        join_user_info_filter(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function)\n        return\n\n    # call connected blocks for 'else' condition 2\n    join_container_host_info_format(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "get host container info",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "check user info",
                        "description": "",
                        "hasElse": true,
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "5178d75f-4ac4-4337-b9a2-4779d3ad25f7",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 271,
                        "line_start": 244,
                        "name": "decision",
                        "notes": "Checks for user info for additional processing or just continues forward to getting addition events.",
                        "number": 3,
                        "order": 10,
                        "outPorts": [
                            "out-1",
                            "out-2"
                        ],
                        "outputs": [
                            {
                                "conditions": [
                                    {
                                        "comparison": "!=",
                                        "data_type": "",
                                        "param": "artifact:*.cef.destinationUserId",
                                        "value": ""
                                    },
                                    {
                                        "comparison": "!=",
                                        "data_type": "",
                                        "param": "artifact:*.cef.destinationUserName",
                                        "value": ""
                                    },
                                    {
                                        "comparison": "!=",
                                        "data_type": "",
                                        "param": "artifact:*.cef.duser",
                                        "value": ""
                                    },
                                    {
                                        "comparison": "!=",
                                        "data_type": "",
                                        "param": "artifact:*.cef.sourceUserId",
                                        "value": ""
                                    },
                                    {
                                        "comparison": "!=",
                                        "data_type": "",
                                        "param": "artifact:*.cef.sourceUserName",
                                        "value": ""
                                    },
                                    {
                                        "comparison": "!=",
                                        "data_type": "",
                                        "param": "artifact:*.cef.suser",
                                        "value": ""
                                    }
                                ],
                                "display": "If",
                                "logic": "or",
                                "type": "if"
                            },
                            {
                                "conditions": [
                                    {
                                        "comparison": "==",
                                        "data_type": "",
                                        "param": "",
                                        "value": ""
                                    }
                                ],
                                "display": "Else",
                                "logic": "and",
                                "type": "else"
                            }
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 2320,
                            "y": 220
                        },
                        "previous_function": "",
                        "previous_name": "check_user_info",
                        "show_number": true,
                        "size": {
                            "height": 82,
                            "width": 82
                        },
                        "state": "decision",
                        "status": "",
                        "type": "coa.Decision",
                        "warn": "",
                        "z": 1411
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".format": {
                                "text": "indicator host url"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out-1": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out-1>.port-body": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "format"
                            },
                            "g.code image": {
                                "opacity": 1
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            }
                        },
                        "block_code": "def indicator_host_url(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('indicator_host_url() called')\n    \n    template = \"\"\"%%\n/indicator_by_value?tenant_id=0&indicator_value={0}\n%%\"\"\"\n\n    # parameter list for template variable replacement\n    parameters = [\n        \"merge_hostnames:custom_function_result.data.*.item\",\n    ]\n\n    phantom.format(container=container, template=template, parameters=parameters, name=\"indicator_host_url\")\n\n    get_host_indicators(container=container)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "merge hostnames",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "indicator host url",
                        "description": "",
                        "format": "format",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "e41b7e68-b5f9-4b8e-b90e-be5c384add62",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 162,
                        "line_start": 144,
                        "message": "Configuring now",
                        "name": "format",
                        "notes": "creates host url look up",
                        "number": 6,
                        "order": 6,
                        "outPorts": [
                            "out-1"
                        ],
                        "parameters": [
                            {
                                "position": 0,
                                "type": "",
                                "value": "merge_hostnames:custom_function_result.data.*.item"
                            }
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 880,
                            "y": 220
                        },
                        "previous_function": "",
                        "previous_name": "indicator_host_url",
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "format",
                        "status": "",
                        "template": "%%\n/indicator_by_value?tenant_id=0&indicator_value={0}\n%%",
                        "title": "format",
                        "type": "coa.Format",
                        "warn": false,
                        "z": 1412
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".format": {
                                "text": "indicator userid url"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out-1": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out-1>.port-body": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "format"
                            },
                            "g.code image": {
                                "opacity": 1
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            }
                        },
                        "block_code": "def indicator_userid_url(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('indicator_userid_url() called')\n    \n    template = \"\"\"%%\n/indicator_by_value?tenant_id=0&indicator_value={0}\n%%\"\"\"\n\n    # parameter list for template variable replacement\n    parameters = [\n        \"merge_usernames:custom_function_result.data.*.item\",\n    ]\n\n    phantom.format(container=container, template=template, parameters=parameters, name=\"indicator_userid_url\")\n\n    get_userid_indicators(container=container)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "merge usernames",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "indicator userid url",
                        "description": "",
                        "format": "format",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "adf875b4-b05d-4193-8785-d59482543a75",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 180,
                        "line_start": 162,
                        "message": "Configuring now",
                        "name": "format",
                        "notes": "Creates indicator lookup",
                        "number": 7,
                        "order": 7,
                        "outPorts": [
                            "out-1"
                        ],
                        "parameters": [
                            {
                                "position": 0,
                                "type": "",
                                "value": "merge_usernames:custom_function_result.data.*.item"
                            }
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 880,
                            "y": 360
                        },
                        "previous_function": "",
                        "previous_name": "indicator_userid_url",
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "format",
                        "status": "",
                        "template": "%%\n/indicator_by_value?tenant_id=0&indicator_value={0}\n%%",
                        "title": "format",
                        "type": "coa.Format",
                        "warn": false,
                        "z": 1413
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "api": "add comment",
                        "attrs": {
                            ".api": {
                                "text": "sla expiration comment"
                            },
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "API"
                            },
                            "g.code image": {
                                "opacity": 1
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            }
                        },
                        "block_code": "def sla_expiration_comment(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('sla_expiration_comment() called')\n\n    phantom.comment(container=container, comment=\"If SLA expired, just rerun the playbook. If failed notify an adminsitrator.\")\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "color": "",
                        "configured": [
                            {
                                "addCommentComment": "If SLA expired, just rerun the playbook. If failed notify an adminsitrator.",
                                "key": "add-comment"
                            }
                        ],
                        "connected_to_start": true,
                        "connection_name": "review associated events",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "sla expiration comment",
                        "description": "",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "d15e5f29-e53d-4092-bbe9-a0bc6605da55",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 687,
                        "line_start": 680,
                        "message": "Configuring now",
                        "name": "add comment",
                        "notes": "Comment for SLA expiration for prompt failure",
                        "number": 8,
                        "order": 25,
                        "outPorts": [
                            "out"
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 1540,
                            "y": 680
                        },
                        "previous_function": "",
                        "previous_name": "sla_expiration_comment",
                        "show_number": false,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "api",
                        "status": "",
                        "title": "API",
                        "type": "coa.API",
                        "warn": false,
                        "z": 1414
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773",
                                "transform": "rotate(45 30 70)"
                            },
                            ".inPorts>.port-0>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".number": {
                                "text": 1
                            },
                            ".outPorts>.port-0": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                },
                                "ref-x": 83,
                                "ref-y": 40
                            },
                            ".outPorts>.port-0>.port-body": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                }
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            }
                        },
                        "block_code": "def host_user_filter(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('host_user_filter() called')\n\n    # collect filtered artifact ids for 'if' condition 1\n    matched_artifacts_1, matched_results_1 = phantom.condition(\n        container=container,\n        action_results=results,\n        conditions=[\n            [\"artifact:*.cef.dest\", \"in\", \"custom_list:bogon_list\"],\n            [\"artifact:*.cef.dest_ip\", \"in\", \"custom_list:bogon_list\"],\n            [\"artifact:*.cef.destinationHostName\", \"not in\", \"custom_list:bogon_list\"],\n            [\"artifact:*.cef.dhost\", \"not in\", \"custom_list:bogon_list\"],\n            [\"artifact:*.cef.src\", \"in\", \"custom_list:bogon_list\"],\n            [\"artifact:*.cef.src_ip\", \"in\", \"custom_list:bogon_list\"],\n            [\"artifact:*.cef.sourceAddress\", \"not in\", \"custom_list:bogon_list\"],\n            [\"artifact:*.cef.sourceHostName\", \"not in\", \"custom_list:bogon_list\"],\n            [\"artifact:*.cef.shost\", \"not in\", \"custom_list:bogon_list\"],\n            [\"artifact:*.cef.dest_nt_host\", \"not in\", \"custom_list:bogon_list\"],\n            [\"artifact:*.cef.src_nt_host\", \"not in\", \"custom_list:bogon_list\"],\n        ],\n        logical_operator='or',\n        name=\"host_user_filter:condition_1\")\n\n    # call connected blocks if filtered artifacts or results\n    if matched_artifacts_1 or matched_results_1:\n        merge_hostnames(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function, filtered_artifacts=matched_artifacts_1, filtered_results=matched_results_1)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "get username",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "host user filter",
                        "description": "",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "64bcead4-550f-4b61-b513-92592078049f",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 144,
                        "line_start": 115,
                        "name": "filter",
                        "notes": "Filters Host and User values to process",
                        "number": 1,
                        "order": 5,
                        "outPorts": [
                            "out-1"
                        ],
                        "outputs": [
                            {
                                "conditions": [
                                    {
                                        "comparison": "in",
                                        "data_type": "",
                                        "param": "artifact:*.cef.dest",
                                        "value": "custom_list:bogon_list"
                                    },
                                    {
                                        "comparison": "in",
                                        "data_type": "",
                                        "param": "artifact:*.cef.dest_ip",
                                        "value": "custom_list:bogon_list"
                                    },
                                    {
                                        "comparison": "not in",
                                        "data_type": "",
                                        "param": "artifact:*.cef.destinationHostName",
                                        "value": "custom_list:bogon_list"
                                    },
                                    {
                                        "comparison": "not in",
                                        "data_type": "",
                                        "param": "artifact:*.cef.dhost",
                                        "value": "custom_list:bogon_list"
                                    },
                                    {
                                        "comparison": "in",
                                        "data_type": "",
                                        "param": "artifact:*.cef.src",
                                        "value": "custom_list:bogon_list"
                                    },
                                    {
                                        "comparison": "in",
                                        "data_type": "",
                                        "param": "artifact:*.cef.src_ip",
                                        "value": "custom_list:bogon_list"
                                    },
                                    {
                                        "comparison": "not in",
                                        "data_type": "",
                                        "param": "artifact:*.cef.sourceAddress",
                                        "value": "custom_list:bogon_list"
                                    },
                                    {
                                        "comparison": "not in",
                                        "data_type": "",
                                        "param": "artifact:*.cef.sourceHostName",
                                        "value": "custom_list:bogon_list"
                                    },
                                    {
                                        "comparison": "not in",
                                        "data_type": "",
                                        "param": "artifact:*.cef.shost",
                                        "value": "custom_list:bogon_list"
                                    },
                                    {
                                        "comparison": "not in",
                                        "data_type": "",
                                        "param": "artifact:*.cef.dest_nt_host",
                                        "value": "custom_list:bogon_list"
                                    },
                                    {
                                        "comparison": "not in",
                                        "data_type": "",
                                        "param": "artifact:*.cef.src_nt_host",
                                        "value": "custom_list:bogon_list"
                                    }
                                ],
                                "display": "If",
                                "logic": "or",
                                "type": "if"
                            }
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 500,
                            "y": 220
                        },
                        "previous_function": "",
                        "previous_name": "host_user_filter",
                        "show_number": true,
                        "size": {
                            "height": 82,
                            "width": 82
                        },
                        "state": "filter",
                        "status": "",
                        "type": "coa.Filter",
                        "warn": false,
                        "z": 1415
                    }
                ]
            },
            "notes": "INPUT: usernames and hostnames for the alert\nINTERACTIONS: Phantom REST\nACTIONS: get_data, post_data, set owner, get tasks, get phase, get indicators, get container,  prompt merge, promote, set status\nARTIFACTS:\nP1: set task owner from playbook user, make task status inprocessing, get events that match indicator for hostname/user, prompt analyst, create a case with this container and associate other new events to this case, leave this event open.\nP2: same as above except for assigning this event and other events to an existing case, close this event\nP3: Take no action and record playbook execution."
        },
        "python_version": "3",
        "schema": 4,
        "version": "4.10.3.51237"
    },
    "create_time": "2021-05-08T11:32:40.391745+00:00",
    "draft_mode": false,
    "labels": [
        "*"
    ],
    "tags": []
}