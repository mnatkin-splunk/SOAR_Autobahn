{
    "blockly": false,
    "blockly_xml": "<xml></xml>",
    "category": "ESCU",
    "coa": {
        "data": {
            "clean": true,
            "code_block": "import re",
            "description": "This playbook processes usernames and hostnames not in bogon_list and creates a task note for every indicator for review by the analyst",
            "joint": {
                "cells": [
                    {
                        "0": "S",
                        "1": "T",
                        "2": "A",
                        "3": "R",
                        "4": "T",
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "ref-x": 33,
                                "ref-y": 8,
                                "text": "START"
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.icon image": {
                                "ref-x": 13,
                                "xlink:href": "/inc/coa/img/block_icon_start.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            }
                        },
                        "block_code": "def on_start(container):\n    phantom.debug('on_start() called')\n    \n    # call 'check_user_or_host' block\n    check_user_or_host(container=container)\n\n    return",
                        "callback_code": "# read-only block view not available",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "",
                        "connection_type": "",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "",
                        "description": "",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "0d75d904-721f-445e-a6e1-b1d349bb4515",
                        "inPorts": [],
                        "join_code": "# read-only block view not available",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 24,
                        "line_start": 16,
                        "name": "",
                        "notes": "",
                        "number": 0,
                        "order": 1,
                        "outPorts": [
                            "out"
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": -320,
                            "y": -60
                        },
                        "previous_function": "",
                        "previous_name": "",
                        "show_number": true,
                        "size": {
                            "height": 54,
                            "width": 80
                        },
                        "status": "",
                        "title": "START",
                        "type": "coa.StartEnd",
                        "warn": false,
                        "z": 1
                    },
                    {
                        "0": "E",
                        "1": "N",
                        "2": "D",
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".title": {
                                "text": "END"
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.icon image": {
                                "xlink:href": "/inc/coa/img/block_icon_end.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            }
                        },
                        "block_code": "def on_finish(container, summary):\n    phantom.debug('on_finish() called')\n    # This function is called after all actions are completed.\n    # summary of all the action and/or all details of actions\n    # can be collected here.\n\n    # summary_json = phantom.get_summary()\n    # if 'result' in summary_json:\n        # for action_result in summary_json['result']:\n            # if 'action_run_id' in action_result:\n                # action_results = phantom.get_action_results(action_run_id=action_result['action_run_id'], result_data=False, flatten=False)\n                # phantom.debug(action_results)\n\n    return",
                        "callback_code": "# read-only block view not available",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "create customer notes, create system note",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "",
                        "description": "",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "6e953e17-9b70-4c48-b2bd-a13c7a29b009",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "# read-only block view not available",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 731,
                        "line_start": 718,
                        "name": "",
                        "notes": "",
                        "number": 0,
                        "order": 18,
                        "outPorts": [],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 1640,
                            "y": 300
                        },
                        "previous_function": "",
                        "previous_name": "",
                        "show_number": true,
                        "size": {
                            "height": 54,
                            "width": 80
                        },
                        "status": "",
                        "title": "END",
                        "type": "coa.StartEnd",
                        "warn": false,
                        "z": 2
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "73526c24-64aa-4846-b4cf-0a8a478c3c81",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "0d75d904-721f-445e-a6e1-b1d349bb4515",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "5e8c9ae4-35bd-49ad-9ea2-ce4ada576dc2",
                            "selector": ".port-body[type=\"input\"]"
                        },
                        "type": "link",
                        "z": 3
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "9c65e76f-b0e0-4627-8a21-5c2bbe8163ed",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "5e8c9ae4-35bd-49ad-9ea2-ce4ada576dc2",
                            "port": "out-1",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "a8167b06-2400-4a02-8e58-0f7cd574953b",
                            "selector": ".port-body[type=\"input\"]"
                        },
                        "type": "link",
                        "z": 6
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "76b7fac7-397a-49c1-b131-45a2f657b097",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "5e8c9ae4-35bd-49ad-9ea2-ce4ada576dc2",
                            "port": "out-2",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(2) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "7e8a5c86-a3a1-46cb-a45f-df00b5475e2e",
                            "selector": ".port-body[type=\"input\"]"
                        },
                        "type": "link",
                        "z": 492
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "813dded9-ed1d-42e2-b3fc-df6d5dd20748",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "c040f191-9789-4f2b-b4ed-6ed6265ea45e",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "2e08bb76-1525-4612-ac24-f813b75d0e56",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 556
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "9bb99645-6fa2-40c2-b105-00715de442bf",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "0413c9fc-fee8-433f-ab45-9458da4c6133",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "13ddace0-b5e3-4218-92c5-e931ff1d0a8d",
                            "selector": ".port-body[type=\"input\"]"
                        },
                        "type": "link",
                        "z": 642
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "eac3f2db-2e8d-4821-bac2-563df0586e56",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "2e08bb76-1525-4612-ac24-f813b75d0e56",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "4f685a02-8785-4a58-ad50-c60bac226ad2",
                            "selector": ".port-body[type=\"input\"]"
                        },
                        "type": "link",
                        "z": 660
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "a7ed0059-3f54-4d86-b212-13cf121bfab2",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "4f685a02-8785-4a58-ad50-c60bac226ad2",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "92f96bfd-25a5-4031-a0e5-9463c00e3fdf",
                            "selector": ".port-body[type=\"input\"]"
                        },
                        "type": "link",
                        "z": 665
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "793c6419-7536-4a49-b2a8-31dcaf921fd9",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "571ee01f-7cef-4f30-b126-0ab3b76dff25",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "f9dc4405-ff78-4e6e-a8d6-986131e4b52f",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 674
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "dee0323c-d6b1-4116-931b-6384e676191a",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "13ddace0-b5e3-4218-92c5-e931ff1d0a8d",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "97bd2375-d30b-421d-8d72-0b7290ce17e2",
                            "selector": ".port-body[type=\"input\"]"
                        },
                        "type": "link",
                        "z": 731
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "8f057023-932e-4e54-b7d7-7819742d8aae",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "97bd2375-d30b-421d-8d72-0b7290ce17e2",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "571ee01f-7cef-4f30-b126-0ab3b76dff25",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 742
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "95dd08cb-8d8c-4304-bf01-543843947637",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "f9dc4405-ff78-4e6e-a8d6-986131e4b52f",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "2246be0b-fedd-4efd-9140-463544afbc10",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 776
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".format": {
                                "text": "system info format"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out-1": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out-1>.port-body": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "format"
                            },
                            "g.code image": {
                                "opacity": 1
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            }
                        },
                        "block_code": "def system_info_format(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('system_info_format() called')\n    \n    template = \"\"\"%%\n### System Information for {0}: *{1}*\n{2}\n\n| Attribute | Value |\n| ---- | ---- |\n| DNS Host Name | {3} |\n| Country Code | {4} |\n| Object Category | {5} |\n| Primary Group ID | {6} |\n| Distinguished Name | {7} |\n\n----\n\n%%\"\"\"\n\n    # parameter list for template variable replacement\n    parameters = [\n        \"get_system_info:action_result.parameter.hostname\",\n        \"get_system_info:action_result.data.*.operatingsystem\",\n        \"get_system_info:action_result.message\",\n        \"get_system_info:action_result.data.*.dnshostname\",\n        \"get_system_info:action_result.data.*.countrycode\",\n        \"get_system_info:action_result.data.*.objectcategory\",\n        \"get_system_info:action_result.data.*.primarygroupid\",\n        \"get_system_info:action_result.data.*.distinguishedname\",\n        \"get_system_info:action_result.data.*.serviceprincipalname\",\n    ]\n\n    phantom.format(container=container, template=template, parameters=parameters, name=\"system_info_format\")\n\n    generate_system_note(container=container)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "get system info",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "system info format",
                        "description": "",
                        "format": "format",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "2e08bb76-1525-4612-ac24-f813b75d0e56",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 401,
                        "line_start": 363,
                        "message": "Configuring now",
                        "name": "format",
                        "notes": "Create system information format for note",
                        "number": 12,
                        "order": 9,
                        "outPorts": [
                            "out-1"
                        ],
                        "parameters": [
                            {
                                "position": 0,
                                "type": "",
                                "value": "get_system_info:action_result.parameter.hostname"
                            },
                            {
                                "position": 0,
                                "type": "",
                                "value": "get_system_info:action_result.data.*.operatingsystem"
                            },
                            {
                                "position": 2,
                                "type": "",
                                "value": "get_system_info:action_result.message"
                            },
                            {
                                "position": 3,
                                "type": "",
                                "value": "get_system_info:action_result.data.*.dnshostname"
                            },
                            {
                                "position": 3,
                                "type": "",
                                "value": "get_system_info:action_result.data.*.countrycode"
                            },
                            {
                                "position": 4,
                                "type": "",
                                "value": "get_system_info:action_result.data.*.objectcategory"
                            },
                            {
                                "position": 0,
                                "type": "",
                                "value": "get_system_info:action_result.data.*.primarygroupid"
                            },
                            {
                                "position": 1,
                                "type": "",
                                "value": "get_system_info:action_result.data.*.distinguishedname"
                            },
                            {
                                "position": 2,
                                "type": "",
                                "value": "get_system_info:action_result.data.*.serviceprincipalname"
                            }
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 600,
                            "y": 200
                        },
                        "previous_function": "",
                        "previous_name": "system_info_format",
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "format",
                        "status": "",
                        "template": "%%\n### System Information for {0}: *{1}*\n{2}\n\n| Attribute | Value |\n| ---- | ---- |\n| DNS Host Name | {3} |\n| Country Code | {4} |\n| Object Category | {5} |\n| Primary Group ID | {6} |\n| Distinguished Name | {7} |\n\n----\n\n%%",
                        "title": "format",
                        "type": "coa.Format",
                        "warn": false,
                        "z": 784
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "73c701c0-7c41-40b4-b266-2d19740cb2c6",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "2246be0b-fedd-4efd-9140-463544afbc10",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "855a2f05-c7f2-4cde-9010-b840031da779",
                            "selector": ".port-body[type=\"input\"]"
                        },
                        "type": "link",
                        "z": 802
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "2571549c-6b8d-41be-a3f7-130b5f2f07fb",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "92f96bfd-25a5-4031-a0e5-9463c00e3fdf",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "855a2f05-c7f2-4cde-9010-b840031da779",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 805
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "36e557ea-bdd3-418c-b9a6-ab201606be5a",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "855a2f05-c7f2-4cde-9010-b840031da779",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "6e953e17-9b70-4c48-b2bd-a13c7a29b009",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 807
                    },
                    {
                        "action": "get user attributes",
                        "action_type": "investigate",
                        "active": false,
                        "active_keys": {},
                        "active_values": {
                            "attribute": "",
                            "fields": "",
                            "username": "get_customer_info:action_result.data.*.manager"
                        },
                        "angle": 0,
                        "app": "",
                        "appid": "",
                        "approver": "",
                        "assets": [
                            {
                                "action": "get user attributes",
                                "actions": [
                                    "get users",
                                    "reset password",
                                    "set password",
                                    "get system attributes",
                                    "get user attributes",
                                    "set system attribute",
                                    "change system ou",
                                    "list user groups",
                                    "enable user",
                                    "disable user",
                                    "test connectivity",
                                    "get system info",
                                    "run query",
                                    "list services",
                                    "list users"
                                ],
                                "active": true,
                                "app_name": "LDAP",
                                "app_version": "1.2.47",
                                "appid": "84110F27-6602-4DC8-A6F2-0311B1720BF8",
                                "asset_name": "domainctrl1",
                                "config_type": "asset",
                                "count": 0,
                                "fields": {
                                    "attribute": "",
                                    "fields": "",
                                    "username": "get_customer_info:action_result.data.*.manager"
                                },
                                "has_app": true,
                                "id": 7,
                                "loaded": false,
                                "missing": false,
                                "name": "domainctrl1",
                                "output": [
                                    {
                                        "data_path": "action_result.status",
                                        "data_type": "string",
                                        "example_values": [
                                            "success",
                                            "failed"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.parameter.attribute",
                                        "data_type": "string",
                                        "example_values": [
                                            "Displayname"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.parameter.fields",
                                        "data_type": "string",
                                        "example_values": [
                                            "samaccountName"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "user name",
                                            "ldap distinguished name"
                                        ],
                                        "data_path": "action_result.parameter.username",
                                        "data_type": "string",
                                        "example_values": [
                                            "The Administrator",
                                            "test_user3"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.accountexpires",
                                        "data_type": "string",
                                        "example_values": [
                                            "9223370036854775807"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.badpasswordtime",
                                        "data_type": "string",
                                        "example_values": [
                                            "131847005589525500"
                                        ]
                                    },
                                    {
                                        "column_name": "Bad Pwd Count",
                                        "column_order": 7,
                                        "data_path": "action_result.data.*.badpwdcount",
                                        "data_type": "string",
                                        "example_values": [
                                            "0"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.cn",
                                        "data_type": "string",
                                        "example_values": [
                                            "Test User3"
                                        ]
                                    },
                                    {
                                        "column_name": "Country",
                                        "column_order": 14,
                                        "data_path": "action_result.data.*.co",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.codepage",
                                        "data_type": "string",
                                        "example_values": [
                                            "0"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.company",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.countrycode",
                                        "data_type": "string",
                                        "example_values": [
                                            "0"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.department",
                                        "data_type": "string"
                                    },
                                    {
                                        "column_name": "Display Name",
                                        "column_order": 1,
                                        "data_path": "action_result.data.*.displayname",
                                        "data_type": "string",
                                        "example_values": [
                                            "Test User3"
                                        ]
                                    },
                                    {
                                        "column_name": "Distinguished Name",
                                        "column_order": 2,
                                        "contains": [
                                            "ldap distinguished name"
                                        ],
                                        "data_path": "action_result.data.*.distinguishedname",
                                        "data_type": "string",
                                        "example_values": [
                                            "CN=Test User3,CN=Users,DC=corp,DC=contoso,DC=com"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.dscorepropagationdata",
                                        "data_type": "string",
                                        "example_values": [
                                            "20181003111127.0Z;20170110001231.0Z;16010001000416.0Z"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.givenname",
                                        "data_type": "string",
                                        "example_values": [
                                            "Test"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.instancetype",
                                        "data_type": "string",
                                        "example_values": [
                                            "4"
                                        ]
                                    },
                                    {
                                        "column_name": "City",
                                        "column_order": 11,
                                        "data_path": "action_result.data.*.l",
                                        "data_type": "string"
                                    },
                                    {
                                        "column_name": "Last Logoff",
                                        "column_order": 4,
                                        "data_path": "action_result.data.*.lastlogoff",
                                        "data_type": "string",
                                        "example_values": [
                                            "0"
                                        ]
                                    },
                                    {
                                        "column_name": "Last Logon",
                                        "column_order": 3,
                                        "data_path": "action_result.data.*.lastlogon",
                                        "data_type": "string",
                                        "example_values": [
                                            "131847000011239275",
                                            "131847680040779871"
                                        ]
                                    },
                                    {
                                        "column_name": "Logon Count",
                                        "column_order": 5,
                                        "data_path": "action_result.data.*.logoncount",
                                        "data_type": "string",
                                        "example_values": [
                                            "0"
                                        ]
                                    },
                                    {
                                        "column_name": "E-Mail",
                                        "column_order": 8,
                                        "contains": [
                                            "email"
                                        ],
                                        "data_path": "action_result.data.*.mail",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.manager",
                                        "data_type": "string"
                                    },
                                    {
                                        "column_name": "Member Of",
                                        "column_order": 6,
                                        "data_path": "action_result.data.*.memberof",
                                        "data_type": "string",
                                        "example_values": [
                                            "CN=TestUsers,DC=corp,DC=contoso,DC=com;CN=Remote Desktop Users,CN=Builtin,DC=corp,DC=contoso,DC=com"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.name",
                                        "data_type": "string",
                                        "example_values": [
                                            "Test User3"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.objectcategory",
                                        "data_type": "string",
                                        "example_values": [
                                            "CN=Person,CN=Schema,CN=Configuration,DC=corp,DC=contoso,DC=com"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.objectclass",
                                        "data_type": "string",
                                        "example_values": [
                                            "top;person;organizationalPerson;user"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.objectguid",
                                        "data_type": "string",
                                        "example_values": [
                                            "13 ab 7f de 08 b5 32 44 9d e9 07 65 52 5a e4 49"
                                        ]
                                    },
                                    {
                                        "column_name": "Object SID",
                                        "column_order": 19,
                                        "data_path": "action_result.data.*.objectsid",
                                        "data_type": "string",
                                        "example_values": [
                                            "S-1-5-00-3790544232-372029393-2474287633-1114"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.postOfficeBox",
                                        "data_type": "string"
                                    },
                                    {
                                        "column_name": "Zip",
                                        "column_order": 13,
                                        "data_path": "action_result.data.*.postalcode",
                                        "data_type": "string"
                                    },
                                    {
                                        "column_name": "Primary Group ID",
                                        "column_order": 15,
                                        "data_path": "action_result.data.*.primarygroupid",
                                        "data_type": "string",
                                        "example_values": [
                                            "513"
                                        ]
                                    },
                                    {
                                        "column_name": "Pwd Last Set",
                                        "column_order": 16,
                                        "data_path": "action_result.data.*.pwdlastset",
                                        "data_type": "string",
                                        "example_values": [
                                            "131800831957980568",
                                            "131800682325338799"
                                        ]
                                    },
                                    {
                                        "column_name": "Username",
                                        "column_order": 0,
                                        "contains": [
                                            "user name"
                                        ],
                                        "data_path": "action_result.data.*.samaccountname",
                                        "data_type": "string",
                                        "example_values": [
                                            "Administrator",
                                            "test_user3"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.samaccounttype",
                                        "data_type": "string",
                                        "example_values": [
                                            "805006368"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.sn",
                                        "data_type": "string",
                                        "example_values": [
                                            "User3"
                                        ]
                                    },
                                    {
                                        "column_name": "State",
                                        "column_order": 12,
                                        "data_path": "action_result.data.*.st",
                                        "data_type": "string"
                                    },
                                    {
                                        "column_name": "Street",
                                        "column_order": 10,
                                        "data_path": "action_result.data.*.streetaddress",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.telephoneNumber",
                                        "data_type": "string"
                                    },
                                    {
                                        "column_name": "Title",
                                        "column_order": 9,
                                        "data_path": "action_result.data.*.title",
                                        "data_type": "string"
                                    },
                                    {
                                        "column_name": "User Account Control",
                                        "column_order": 17,
                                        "data_path": "action_result.data.*.useraccountcontrol",
                                        "data_type": "string",
                                        "example_values": [
                                            "60000",
                                            "66001"
                                        ]
                                    },
                                    {
                                        "column_name": "User Principal Name",
                                        "column_order": 18,
                                        "contains": [
                                            "email"
                                        ],
                                        "data_path": "action_result.data.*.userprincipalname",
                                        "data_type": "string",
                                        "example_values": [
                                            "test_user3@corp.contoso.com"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.usnchanged",
                                        "data_type": "string",
                                        "example_values": [
                                            "1600815"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.usncreated",
                                        "data_type": "string",
                                        "example_values": [
                                            "16003"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.whenchanged",
                                        "data_type": "string",
                                        "example_values": [
                                            "20180123123940.0Z"
                                        ]
                                    },
                                    {
                                        "column_name": "When Created",
                                        "column_order": 20,
                                        "data_path": "action_result.data.*.whencreated",
                                        "data_type": "string",
                                        "example_values": [
                                            "20141001130729.0Z"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.summary.bad_password_count",
                                        "data_type": "string",
                                        "example_values": [
                                            "0"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.summary.last_logon",
                                        "data_type": "string",
                                        "example_values": [
                                            "10/01/2018 07:51:41 AM UTC"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.summary.password_last_set",
                                        "data_type": "string",
                                        "example_values": [
                                            "10/01/2018 11:59:55 AM UTC"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.summary.state",
                                        "data_type": "string",
                                        "example_values": [
                                            "Disabled",
                                            "Enabled"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.message",
                                        "data_type": "string",
                                        "example_values": [
                                            "State: Disabled, Bad password count: 0, Last logon: 10/23/2018 07:51:41 AM UTC, Password last set: 10/22/2018 11:59:55 AM UTC",
                                            "State: Enabled, Bad password count: 0, Last logon: 10/23/2018 11:43:04 AM UTC, Password last set: 10/23/2018 11:37:12 AM UTC"
                                        ]
                                    },
                                    {
                                        "data_path": "summary.total_objects",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1
                                        ]
                                    },
                                    {
                                        "data_path": "summary.total_objects_successful",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1
                                        ]
                                    }
                                ],
                                "parameters": {
                                    "attribute": {
                                        "data_type": "string",
                                        "default": null,
                                        "description": "Attribute name to match",
                                        "key": "attribute",
                                        "order": 1,
                                        "required": false
                                    },
                                    "fields": {
                                        "data_type": "string",
                                        "default": null,
                                        "description": "Get fields (comma-separated)",
                                        "key": "fields",
                                        "order": 2,
                                        "required": false
                                    },
                                    "username": {
                                        "contains": [
                                            "user name",
                                            "ldap distinguished name"
                                        ],
                                        "data_type": "string",
                                        "default": null,
                                        "description": "Username or Attribute value to match",
                                        "key": "username",
                                        "order": 0,
                                        "primary": true,
                                        "required": true
                                    }
                                },
                                "product_name": "Windows Server",
                                "product_vendor": "Microsoft",
                                "targets": "7",
                                "type": "directory service"
                            }
                        ],
                        "attrs": {
                            ".action": {
                                "text": "get manager"
                            },
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "Investigate"
                            },
                            "g.approver image": {
                                "opacity": 1
                            },
                            "g.code image": {
                                "opacity": 1
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.icon image": {
                                "xlink:href": "/inc/coa/img/block_icon_investigate.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            },
                            "g.timer image": {
                                "opacity": 1
                            }
                        },
                        "block_code": "def get_manager(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('get_manager() called')\n        \n    #phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))\n    \n    # collect data for 'get_manager' call\n    results_data_1 = phantom.collect2(container=container, datapath=['get_customer_info:action_result.data.*.manager', 'get_customer_info:action_result.parameter.context.artifact_id'], action_results=results)\n\n    parameters = []\n    \n    # build parameters list for 'get_manager' call\n    for results_item_1 in results_data_1:\n        if results_item_1[0]:\n            parameters.append({\n                'fields': \"\",\n                'username': results_item_1[0],\n                'attribute': \"\",\n                # context (artifact id) is added to associate results with the artifact\n                'context': {'artifact_id': results_item_1[1]},\n            })\n\n    phantom.act(action=\"get user attributes\", parameters=parameters, assets=['domainctrl1'], callback=manager_format, name=\"get_manager\", parent_action=action)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": true,
                        "color": "",
                        "connected_to_start": true,
                        "connection_name": "get customer info",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "get manager",
                        "delay": 0,
                        "description": "",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "13ddace0-b5e3-4218-92c5-e931ff1d0a8d",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 433,
                        "line_start": 408,
                        "message": "Configuring now",
                        "name": "get user attributes",
                        "notes": "Gets manager information is available",
                        "number": 2,
                        "order": 11,
                        "outPorts": [
                            "out"
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 600,
                            "y": -80
                        },
                        "previous_function": "",
                        "previous_name": "get_manager",
                        "required_params": {
                            "username": true
                        },
                        "reviewer": "",
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "action_assets",
                        "status": "",
                        "title": "Investigate",
                        "type": "coa.Action",
                        "warn": false,
                        "z": 816
                    },
                    {
                        "action": "post data",
                        "action_type": "generic",
                        "active": false,
                        "active_keys": {},
                        "active_values": {
                            "body": "generate_system_note:custom_function:note_params",
                            "headers": "",
                            "location": "/note/",
                            "verify_certificate": "False"
                        },
                        "angle": 0,
                        "app": "",
                        "appid": "",
                        "approver": "",
                        "assets": [
                            {
                                "action": "post data",
                                "actions": [
                                    "post data",
                                    "get data",
                                    "get options",
                                    "get headers",
                                    "delete data",
                                    "patch data",
                                    "put data",
                                    "test connectivity"
                                ],
                                "active": true,
                                "app_name": "HTTP",
                                "app_version": "2.1.15",
                                "appid": "290b7499-0374-4930-9cdc-5e9b05d65827",
                                "asset_name": "phantom_rest_api",
                                "config_type": "asset",
                                "count": 0,
                                "fields": {
                                    "body": "generate_system_note:custom_function:note_params",
                                    "headers": "",
                                    "location": "/note/",
                                    "verify_certificate": "False"
                                },
                                "has_app": true,
                                "id": 215,
                                "loaded": false,
                                "missing": false,
                                "name": "phantom_rest_api",
                                "output": [
                                    {
                                        "data_path": "action_result.status",
                                        "data_type": "string",
                                        "example_values": [
                                            "failed"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.parameter.body",
                                        "data_type": "numeric",
                                        "example_values": [
                                            "{\"name\": \"Bad IP\"}"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.parameter.headers",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.parameter.location",
                                        "data_type": "string",
                                        "example_values": [
                                            "/rest/assets"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.parameter.verify_certificate",
                                        "data_type": "boolean",
                                        "example_values": [
                                            "false"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "url"
                                        ],
                                        "data_path": "action_result.data.*.location",
                                        "data_type": "string",
                                        "example_values": [
                                            "http://192.168.1.26/rest/assets"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.method",
                                        "data_type": "string",
                                        "example_values": [
                                            "POST"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.parsed_response_body",
                                        "data_type": "string",
                                        "example_values": [
                                            "{\"failed\": true, \"message\": \"Requested item not found\"}"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.response_body",
                                        "data_type": "string",
                                        "example_values": [
                                            "{\"failed\": true, \"message\": \"Requested item not found\"}"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.response_headers",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.summary.reason",
                                        "data_type": "string",
                                        "example_values": [
                                            "Not Found"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.summary.status_code",
                                        "data_type": "numeric",
                                        "example_values": [
                                            404
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.message",
                                        "data_type": "string",
                                        "example_values": [
                                            "Can't process response from server. Status Code: 404 Data from server: {\"failed\": true, \"message\": \"Requested item not found\"}"
                                        ]
                                    },
                                    {
                                        "data_path": "summary.total_objects",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1
                                        ]
                                    },
                                    {
                                        "data_path": "summary.total_objects_successful",
                                        "data_type": "numeric",
                                        "example_values": [
                                            0
                                        ]
                                    }
                                ],
                                "parameters": {
                                    "body": {
                                        "data_type": "string",
                                        "default": null,
                                        "description": "POST body (query string, JSON, etc.)",
                                        "key": "body",
                                        "order": 1,
                                        "required": true
                                    },
                                    "headers": {
                                        "data_type": "string",
                                        "default": null,
                                        "description": "Additional headers (JSON object with headers)",
                                        "key": "headers",
                                        "order": 2,
                                        "required": false
                                    },
                                    "location": {
                                        "data_type": "string",
                                        "default": null,
                                        "description": "Location (e.g. path/to/endpoint)",
                                        "key": "location",
                                        "order": 0,
                                        "required": true
                                    },
                                    "verify_certificate": {
                                        "data_type": "boolean",
                                        "default": null,
                                        "description": "Verify certificates (if using HTTPS)",
                                        "key": "verify_certificate",
                                        "order": 2,
                                        "required": true
                                    }
                                },
                                "product_name": "HTTP",
                                "product_vendor": "Generic",
                                "targets": "215",
                                "type": "information"
                            }
                        ],
                        "attrs": {
                            ".action": {
                                "text": "create system note"
                            },
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "Generic"
                            },
                            "g.approver image": {
                                "opacity": 1
                            },
                            "g.code image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_code_dark_on.svg"
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.icon image": {
                                "xlink:href": "/inc/coa/img/block_icon_generic.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            },
                            "g.timer image": {
                                "opacity": 1
                            }
                        },
                        "block_code": "def create_system_note(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('create_system_note() called')\n        \n    #phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))\n    \n    generate_system_note__note_params = json.loads(phantom.get_run_data(key='generate_system_note:note_params'))\n    # collect data for 'create_system_note' call\n\n    parameters = []\n    \n    # build parameters list for 'create_system_note' call\n    parameters.append({\n        'location': \"/note/\",\n        'body': generate_system_note__note_params,\n        'headers': \"\",\n        'verify_certificate': False,\n    })\n\n    phantom.act(action=\"post data\", parameters=parameters, assets=['phantom_rest_api'], name=\"create_system_note\")\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": true,
                        "color": "",
                        "connected_to_start": true,
                        "connection_name": "get system info",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "def create_system_note(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('create_system_note() called')\n        \n    #phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))\n    \n    generate_system_note__note_params = json.loads(phantom.get_run_data(key='generate_system_note:note_params'))\n    # collect data for 'create_system_note' call\n\n    parameters = []\n    \n    # build parameters list for 'create_system_note' call\n    for note_params in generate_system_note__note_params:\n        parameters.append({\n            'location': \"/note/\",\n            'body': json.dumps(note_params),\n            'headers': \"\",\n            'verify_certificate': False,\n        })\n\n    phantom.act(action=\"post data\", parameters=parameters, assets=['phantom_rest_api'], name=\"create_system_note\")\n\n    return",
                        "custom_join": "",
                        "custom_name": "create system note",
                        "delay": 0,
                        "description": "Create for loop for parameters.append() and json.dumps() the note_params.\n\ncustom code needed:\n    # build parameters list for 'create_task_notes' call\n    for note_params in generate_task_notes__note_params:\n        parameters.append({\n            'body': json.dumps(note_params),\n            'headers': \"\",\n            'location': \"/note/\",\n            'verify_certificate': False,\n        })",
                        "has_custom": true,
                        "has_custom_block": true,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "92f96bfd-25a5-4031-a0e5-9463c00e3fdf",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 587,
                        "line_start": 564,
                        "message": "Configuring now",
                        "name": "post data",
                        "notes": "Creates workbook task notes that correspond to the tasks created with the appropriate automated analysis",
                        "number": 3,
                        "order": 13,
                        "outPorts": [
                            "out"
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 1120,
                            "y": 200
                        },
                        "previous_function": "",
                        "previous_name": "create_system_note",
                        "required_params": {
                            "body": true,
                            "location": true,
                            "verify_certificate": true
                        },
                        "reviewer": "",
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "action_assets",
                        "status": "",
                        "title": "Generic",
                        "type": "coa.Action",
                        "warn": false,
                        "z": 825
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "6939bd07-3580-4459-94bb-813917880e82",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "7e8a5c86-a3a1-46cb-a45f-df00b5475e2e",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "6e953e17-9b70-4c48-b2bd-a13c7a29b009",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 826
                    },
                    {
                        "action": "post data",
                        "action_type": "generic",
                        "active": false,
                        "active_keys": {},
                        "active_values": {
                            "body": "generate_task_notes:custom_function:note_params",
                            "headers": "",
                            "location": "/note/",
                            "verify_certificate": "False"
                        },
                        "angle": 0,
                        "app": "",
                        "appid": "",
                        "approver": "",
                        "assets": [
                            {
                                "action": "post data",
                                "actions": [
                                    "post data",
                                    "get data",
                                    "get options",
                                    "get headers",
                                    "delete data",
                                    "patch data",
                                    "put data",
                                    "test connectivity"
                                ],
                                "active": true,
                                "app_name": "HTTP",
                                "app_version": "2.1.15",
                                "appid": "290b7499-0374-4930-9cdc-5e9b05d65827",
                                "asset_name": "phantom_rest_api",
                                "config_type": "asset",
                                "count": 0,
                                "fields": {
                                    "body": "generate_task_notes:custom_function:note_params",
                                    "headers": "",
                                    "location": "/note/",
                                    "verify_certificate": "False"
                                },
                                "has_app": true,
                                "id": 215,
                                "loaded": false,
                                "missing": false,
                                "name": "phantom_rest_api",
                                "output": [
                                    {
                                        "data_path": "action_result.status",
                                        "data_type": "string",
                                        "example_values": [
                                            "failed"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.parameter.body",
                                        "data_type": "numeric",
                                        "example_values": [
                                            "{\"name\": \"Bad IP\"}"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.parameter.headers",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.parameter.location",
                                        "data_type": "string",
                                        "example_values": [
                                            "/rest/assets"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.parameter.verify_certificate",
                                        "data_type": "boolean",
                                        "example_values": [
                                            "false"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "url"
                                        ],
                                        "data_path": "action_result.data.*.location",
                                        "data_type": "string",
                                        "example_values": [
                                            "http://192.168.1.26/rest/assets"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.method",
                                        "data_type": "string",
                                        "example_values": [
                                            "POST"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.parsed_response_body",
                                        "data_type": "string",
                                        "example_values": [
                                            "{\"failed\": true, \"message\": \"Requested item not found\"}"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.response_body",
                                        "data_type": "string",
                                        "example_values": [
                                            "{\"failed\": true, \"message\": \"Requested item not found\"}"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.response_headers",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.summary.reason",
                                        "data_type": "string",
                                        "example_values": [
                                            "Not Found"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.summary.status_code",
                                        "data_type": "numeric",
                                        "example_values": [
                                            404
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.message",
                                        "data_type": "string",
                                        "example_values": [
                                            "Can't process response from server. Status Code: 404 Data from server: {\"failed\": true, \"message\": \"Requested item not found\"}"
                                        ]
                                    },
                                    {
                                        "data_path": "summary.total_objects",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1
                                        ]
                                    },
                                    {
                                        "data_path": "summary.total_objects_successful",
                                        "data_type": "numeric",
                                        "example_values": [
                                            0
                                        ]
                                    }
                                ],
                                "parameters": {
                                    "body": {
                                        "data_type": "string",
                                        "default": null,
                                        "description": "POST body (query string, JSON, etc.)",
                                        "key": "body",
                                        "order": 1,
                                        "required": true
                                    },
                                    "headers": {
                                        "data_type": "string",
                                        "default": null,
                                        "description": "Additional headers (JSON object with headers)",
                                        "key": "headers",
                                        "order": 2,
                                        "required": false
                                    },
                                    "location": {
                                        "data_type": "string",
                                        "default": null,
                                        "description": "Location (e.g. path/to/endpoint)",
                                        "key": "location",
                                        "order": 0,
                                        "required": true
                                    },
                                    "verify_certificate": {
                                        "data_type": "boolean",
                                        "default": null,
                                        "description": "Verify certificates (if using HTTPS)",
                                        "key": "verify_certificate",
                                        "order": 2,
                                        "required": true
                                    }
                                },
                                "product_name": "HTTP",
                                "product_vendor": "Generic",
                                "targets": "215",
                                "type": "information"
                            }
                        ],
                        "attrs": {
                            ".action": {
                                "text": "create customer notes"
                            },
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "Generic"
                            },
                            "g.approver image": {
                                "opacity": 1
                            },
                            "g.code image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_code_dark_on.svg"
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.icon image": {
                                "xlink:href": "/inc/coa/img/block_icon_generic.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            },
                            "g.timer image": {
                                "opacity": 1
                            }
                        },
                        "block_code": "def create_customer_notes(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('create_customer_notes() called')\n        \n    #phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))\n    \n    generate_task_notes__note_params = json.loads(phantom.get_run_data(key='generate_task_notes:note_params'))\n    # collect data for 'create_customer_notes' call\n\n    parameters = []\n    \n    # build parameters list for 'create_customer_notes' call\n    parameters.append({\n        'location': \"/note/\",\n        'body': generate_task_notes__note_params,\n        'headers': \"\",\n        'verify_certificate': False,\n    })\n\n    phantom.act(action=\"post data\", parameters=parameters, assets=['phantom_rest_api'], name=\"create_customer_notes\")\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": true,
                        "color": "",
                        "connected_to_start": true,
                        "connection_name": "get manager",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "def create_customer_notes(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('create_customer_notes() called')\n        \n    #phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))\n    \n    generate_task_notes__note_params = json.loads(phantom.get_run_data(key='generate_task_notes:note_params'))\n    # collect data for 'create_customer_notes' call\n\n    parameters = []\n    \n    # build parameters list for 'create_customer_notes' call\n    for note_params in generate_task_notes__note_params:\n        parameters.append({\n            'location': \"/note/\",\n            'body': json.dumps(note_params),\n            'headers': \"\",\n            'verify_certificate': False,\n        })\n\n    phantom.act(action=\"post data\", parameters=parameters, assets=['phantom_rest_api'], name=\"create_customer_notes\")\n\n    return",
                        "custom_join": "",
                        "custom_name": "create customer notes",
                        "delay": 0,
                        "description": "Create for loop for parameters.append() and json.dumps() the note_params.\n\ncustom code needed:\n    # build parameters list for 'create_task_notes' call\n    for note_params in generate_task_notes__note_params:\n        parameters.append({\n            'body': json.dumps(note_params),\n            'headers': \"\",\n            'location': \"/note/\",\n            'verify_certificate': False,\n        })",
                        "has_custom": true,
                        "has_custom_block": true,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "2246be0b-fedd-4efd-9140-463544afbc10",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 292,
                        "line_start": 269,
                        "message": "Configuring now",
                        "name": "post data",
                        "notes": "Creates workbook task notes that correspond to the tasks created with the appropriate automated analysis",
                        "number": 2,
                        "order": 6,
                        "outPorts": [
                            "out"
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 1120,
                            "y": -80
                        },
                        "previous_function": "",
                        "previous_name": "create_customer_notes",
                        "required_params": {
                            "body": true,
                            "location": true,
                            "verify_certificate": true
                        },
                        "reviewer": "",
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "action_assets",
                        "status": "",
                        "title": "Generic",
                        "type": "coa.Action",
                        "warn": false,
                        "z": 829
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773",
                                "transform": "rotate(45 30 70)"
                            },
                            ".inPorts>.port-0>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".number": {
                                "text": 1
                            },
                            ".outPorts>.port-0": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                },
                                "ref-x": 83,
                                "ref-y": 40
                            },
                            ".outPorts>.port-0>.port-body": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                }
                            },
                            ".outPorts>.port-1": {
                                "port": {
                                    "id": "out-2",
                                    "type": "out"
                                },
                                "ref-x": 41,
                                "ref-y": 82
                            },
                            ".outPorts>.port-1>.port-body": {
                                "port": {
                                    "id": "out-2",
                                    "type": "out"
                                }
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            }
                        },
                        "block_code": "def user_system_filter(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('user_system_filter() called')\n\n    # collect filtered artifact ids for 'if' condition 1\n    matched_artifacts_1, matched_results_1 = phantom.condition(\n        container=container,\n        conditions=[\n            [\"artifact:*.cef.destinationUserId\", \"not in\", \"custom_list:bogon_list\"],\n            [\"artifact:*.cef.destinationUserName\", \"not in\", \"custom_list:bogon_list\"],\n            [\"artifact:*.cef.duser\", \"not in\", \"custom_list:bogon_list\"],\n            [\"artifact:*.cef.sourceUserId\", \"not in\", \"custom_list:bogon_list\"],\n            [\"artifact:*.cef.sourceUserName\", \"not in\", \"custom_list:bogon_list\"],\n            [\"artifact:*.cef.suser\", \"not in\", \"custom_list:bogon_list\"],\n            [\"artifact:*.cef.user\", \"==\", \"custom_list:bogon_list\"],\n        ],\n        logical_operator='or',\n        name=\"user_system_filter:condition_1\")\n\n    # call connected blocks if filtered artifacts or results\n    if matched_artifacts_1 or matched_results_1:\n        merge_usernames(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function, filtered_artifacts=matched_artifacts_1, filtered_results=matched_results_1)\n\n    # collect filtered artifact ids for 'if' condition 2\n    matched_artifacts_2, matched_results_2 = phantom.condition(\n        container=container,\n        conditions=[\n            [\"artifact:*.cef.destinationHostName\", \"not in\", \"custom_list:bogon_list\"],\n            [\"artifact:*.cef.dhost\", \"not in\", \"custom_list:bogon_list\"],\n            [\"artifact:*.cef.shost\", \"not in\", \"custom_list:bogon_list\"],\n            [\"artifact:*.cef.sourceHostName\", \"not in\", \"custom_list:bogon_list\"],\n            [\"artifact:*.cef.dest\", \"not in\", \"custom_list:bogon_list\"],\n            [\"artifact:*.cef.dest_nt_host\", \"not in\", \"custom_list:bogon_list\"],\n        ],\n        logical_operator='or',\n        name=\"user_system_filter:condition_2\")\n\n    # call connected blocks if filtered artifacts or results\n    if matched_artifacts_2 or matched_results_2:\n        merge_hostnames(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function, filtered_artifacts=matched_artifacts_2, filtered_results=matched_results_2)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "",
                        "connection_type": "",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "user system filter",
                        "description": "",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "a8167b06-2400-4a02-8e58-0f7cd574953b",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 98,
                        "line_start": 56,
                        "name": "filter",
                        "notes": "Filters for usernames or hostnames and  removes allowed list objects from custom_list:bogon_list\n\nGREEN: if username exists otherwise exit and return to main code block\n\nPURPLE:  if hostname exists otherwise exit and return to main code block",
                        "number": 1,
                        "order": 3,
                        "outPorts": [
                            "out-1",
                            "out-2"
                        ],
                        "outputs": [
                            {
                                "conditions": [
                                    {
                                        "comparison": "not in",
                                        "data_type": "",
                                        "param": "artifact:*.cef.destinationUserId",
                                        "value": "custom_list:bogon_list"
                                    },
                                    {
                                        "comparison": "not in",
                                        "data_type": "",
                                        "param": "artifact:*.cef.destinationUserName",
                                        "value": "custom_list:bogon_list"
                                    },
                                    {
                                        "comparison": "not in",
                                        "data_type": "",
                                        "param": "artifact:*.cef.duser",
                                        "value": "custom_list:bogon_list"
                                    },
                                    {
                                        "comparison": "not in",
                                        "data_type": "",
                                        "param": "artifact:*.cef.sourceUserId",
                                        "value": "custom_list:bogon_list"
                                    },
                                    {
                                        "comparison": "not in",
                                        "data_type": "",
                                        "param": "artifact:*.cef.sourceUserName",
                                        "value": "custom_list:bogon_list"
                                    },
                                    {
                                        "comparison": "not in",
                                        "data_type": "",
                                        "param": "artifact:*.cef.suser",
                                        "value": "custom_list:bogon_list"
                                    },
                                    {
                                        "comparison": "==",
                                        "data_type": "",
                                        "param": "artifact:*.cef.user",
                                        "value": "custom_list:bogon_list"
                                    }
                                ],
                                "display": "If",
                                "logic": "or",
                                "type": "if"
                            },
                            {
                                "conditions": [
                                    {
                                        "comparison": "not in",
                                        "data_type": "",
                                        "param": "artifact:*.cef.destinationHostName",
                                        "value": "custom_list:bogon_list"
                                    },
                                    {
                                        "comparison": "not in",
                                        "data_type": "",
                                        "param": "artifact:*.cef.dhost",
                                        "value": "custom_list:bogon_list"
                                    },
                                    {
                                        "comparison": "not in",
                                        "data_type": "",
                                        "param": "artifact:*.cef.shost",
                                        "value": "custom_list:bogon_list"
                                    },
                                    {
                                        "comparison": "not in",
                                        "data_type": "",
                                        "param": "artifact:*.cef.sourceHostName",
                                        "value": "custom_list:bogon_list"
                                    },
                                    {
                                        "comparison": "not in",
                                        "data_type": "",
                                        "param": "artifact:*.cef.dest",
                                        "value": "custom_list:bogon_list"
                                    },
                                    {
                                        "comparison": "not in",
                                        "data_type": "",
                                        "param": "artifact:*.cef.dest_nt_host",
                                        "value": "custom_list:bogon_list"
                                    }
                                ],
                                "display": "If",
                                "logic": "or",
                                "type": "if"
                            }
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": -40,
                            "y": -80
                        },
                        "previous_function": "",
                        "previous_name": "user_system_filter",
                        "show_number": true,
                        "size": {
                            "height": 82,
                            "width": 82
                        },
                        "state": "filter",
                        "status": "",
                        "type": "coa.Filter",
                        "warn": false,
                        "z": 841
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "api": "set status",
                        "attrs": {
                            ".api": {
                                "text": "set status to new"
                            },
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "API"
                            },
                            "g.code image": {
                                "opacity": 1
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            }
                        },
                        "block_code": "def set_status_to_new(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('set_status_to_new() called')\n\n    phantom.set_status(container=container, status=\"New\")\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "color": "",
                        "configured": [
                            {
                                "key": "set-status",
                                "setStatusStatus": "New",
                                "setStatusStatus_display": "New"
                            }
                        ],
                        "connected_to_start": true,
                        "connection_name": "create customer notes, create system note",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "set status to new",
                        "description": "",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "855a2f05-c7f2-4cde-9010-b840031da779",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "def join_set_status_to_new(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None):\n    phantom.debug('join_set_status_to_new() called')\n    \n    # if the joined function has already been called, do nothing\n    if phantom.get_run_data(key='join_set_status_to_new_called'):\n        return\n\n    # no callbacks to check, call connected block \"set_status_to_new\"\n    phantom.save_run_data(key='join_set_status_to_new_called', value='set_status_to_new', auto=True)\n\n    set_status_to_new(container=container, handle=handle)\n    \n    return",
                        "join_optional": [
                            "create_system_note",
                            "create_customer_notes"
                        ],
                        "join_start": 620,
                        "line_end": 634,
                        "line_start": 613,
                        "message": "Configuring now",
                        "name": "set status",
                        "notes": "Sets status to new for signaling to team that the container is ready for review.",
                        "number": 4,
                        "order": 15,
                        "outPorts": [
                            "out"
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 1380,
                            "y": -80
                        },
                        "previous_function": "",
                        "previous_name": "set_status_to_new",
                        "show_number": false,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "api",
                        "status": "",
                        "title": "API",
                        "type": "coa.API",
                        "warn": false,
                        "z": 845
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#637282",
                                "transform": "rotate(45 30 70)"
                            },
                            ".inPorts>.port-0>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".number": {
                                "text": 1
                            },
                            ".outPorts>.port-0": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                },
                                "ref-x": 83,
                                "ref-y": 40
                            },
                            ".outPorts>.port-0>.port-body": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                }
                            },
                            ".outPorts>.port-1": {
                                "port": {
                                    "id": "out-2",
                                    "type": "out"
                                },
                                "ref-x": 41,
                                "ref-y": 82
                            },
                            ".outPorts>.port-1>.port-body": {
                                "port": {
                                    "id": "out-2",
                                    "type": "out"
                                }
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            }
                        },
                        "block_code": "def check_user_or_host(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('check_user_or_host() called')\n\n    # check for 'if' condition 1\n    matched = phantom.decision(\n        container=container,\n        conditions=[\n            [\"artifact:*.cef.destinationUserName\", \"!=\", \"\"],\n            [\"artifact:*.cef.destinationUserId\", \"!=\", \"\"],\n            [\"artifact:*.cef.sourceUserId\", \"!=\", \"\"],\n            [\"artifact:*.cef.sourceUserName\", \"!=\", \"\"],\n            [\"artifact:*.cef.duser\", \"!=\", \"\"],\n            [\"artifact:*.cef.suser\", \"!=\", \"\"],\n            [\"artifact:*.cef.user\", \"!=\", \"\"],\n            [\"artifact:*.cef.destinationHostName\", \"!=\", \"\"],\n            [\"artifact:*.cef.sourceHostName\", \"!=\", \"\"],\n            [\"artifact:*.cef.dhost\", \"!=\", \"\"],\n            [\"artifact:*.cef.shost\", \"!=\", \"\"],\n            [\"artifact:*.cef.hostname\", \"!=\", \"\"],\n        ],\n        logical_operator='or')\n\n    # call connected blocks if condition 1 matched\n    if matched:\n        user_system_filter(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function)\n        return\n\n    # call connected blocks for 'else' condition 2\n    missing_data_comment(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "",
                        "connection_type": "",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "check user or host",
                        "description": "",
                        "hasElse": true,
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "5e8c9ae4-35bd-49ad-9ea2-ce4ada576dc2",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 56,
                        "line_start": 24,
                        "name": "decision",
                        "notes": "Check for fileHash and if missing provide a comment that no hashes were found.\n\nGREEN: if user data or host data exists\n\nPURPLE: if missing add a comment of missing artifact",
                        "number": 1,
                        "order": 2,
                        "outPorts": [
                            "out-1",
                            "out-2"
                        ],
                        "outputs": [
                            {
                                "conditions": [
                                    {
                                        "comparison": "!=",
                                        "data_type": "",
                                        "param": "artifact:*.cef.destinationUserName",
                                        "value": ""
                                    },
                                    {
                                        "comparison": "!=",
                                        "data_type": "",
                                        "param": "artifact:*.cef.destinationUserId",
                                        "value": ""
                                    },
                                    {
                                        "comparison": "!=",
                                        "data_type": "",
                                        "param": "artifact:*.cef.sourceUserId",
                                        "value": ""
                                    },
                                    {
                                        "comparison": "!=",
                                        "data_type": "",
                                        "param": "artifact:*.cef.sourceUserName",
                                        "value": ""
                                    },
                                    {
                                        "comparison": "!=",
                                        "data_type": "",
                                        "param": "artifact:*.cef.duser",
                                        "value": ""
                                    },
                                    {
                                        "comparison": "!=",
                                        "data_type": "",
                                        "param": "artifact:*.cef.suser",
                                        "value": ""
                                    },
                                    {
                                        "comparison": "!=",
                                        "data_type": "",
                                        "param": "artifact:*.cef.user",
                                        "value": ""
                                    },
                                    {
                                        "comparison": "!=",
                                        "data_type": "",
                                        "param": "artifact:*.cef.destinationHostName",
                                        "value": ""
                                    },
                                    {
                                        "comparison": "!=",
                                        "data_type": "",
                                        "param": "artifact:*.cef.sourceHostName",
                                        "value": ""
                                    },
                                    {
                                        "comparison": "!=",
                                        "data_type": "",
                                        "param": "artifact:*.cef.dhost",
                                        "value": ""
                                    },
                                    {
                                        "comparison": "!=",
                                        "data_type": "",
                                        "param": "artifact:*.cef.shost",
                                        "value": ""
                                    },
                                    {
                                        "comparison": "!=",
                                        "data_type": "",
                                        "param": "artifact:*.cef.hostname",
                                        "value": ""
                                    }
                                ],
                                "display": "If",
                                "logic": "or",
                                "type": "if"
                            },
                            {
                                "conditions": [
                                    {
                                        "comparison": "==",
                                        "data_type": "",
                                        "param": "",
                                        "value": ""
                                    }
                                ],
                                "display": "Else",
                                "logic": "and",
                                "type": "else"
                            }
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": -180,
                            "y": -80
                        },
                        "previous_function": "",
                        "previous_name": "check_user_or_host",
                        "show_number": true,
                        "size": {
                            "height": 82,
                            "width": 82
                        },
                        "state": "decision",
                        "status": "",
                        "type": "coa.Decision",
                        "warn": "",
                        "z": 846
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".format": {
                                "text": "customer info format"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out-1": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out-1>.port-body": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "format"
                            },
                            "g.code image": {
                                "opacity": 1
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            }
                        },
                        "block_code": "def customer_info_format(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('customer_info_format() called')\n    \n    template = \"\"\"%%\n### User Infromation for {0}: *{1}, {2}*\n### {3}\n\nMinimum information should be:\n\n| Attribute | Value |\n| ---- | ---- |\n| Company | {4} |\n| Business Unit | {5} |\n| Phone # | {6} |\n| Country Code | {7} |\n| Primary Group ID | {8} |\n| Object SID Type | {9} |\n| Object Category | {10} |\n| User Account Control | {11} |\n| Distinguished Name | {12} |\nMember of:  {13}  \nmanager_id: \n%%\"\"\"\n\n    # parameter list for template variable replacement\n    parameters = [\n        \"get_customer_info:action_result.parameter.username\",\n        \"get_customer_info:action_result.data.*.displayname\",\n        \"get_customer_info:action_result.data.*.mail\",\n        \"get_customer_info:action_result.message\",\n        \"get_customer_info:action_result.data.*.company\",\n        \"get_customer_info:action_result.data.*.department\",\n        \"get_customer_info:action_result.data.*.telephoneNumber\",\n        \"get_customer_info:action_result.data.*.countrycode\",\n        \"get_customer_info:action_result.data.*.primarygroupid\",\n        \"get_customer_info:action_result.data.*.company\",\n        \"get_customer_info:action_result.data.*.objectcategory\",\n        \"get_customer_info:action_result.data.*.useraccountcontrol\",\n        \"get_customer_info:action_result.data.*.distinguishedname\",\n        \"get_customer_info:action_result.data.*.memberof\",\n        \"get_customer_info:action_result.data.*.manager\",\n    ]\n\n    phantom.format(container=container, template=template, parameters=parameters, name=\"customer_info_format\")\n\n    generate_task_notes(container=container)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "get manager",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "customer info format",
                        "description": "",
                        "format": "format",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "571ee01f-7cef-4f30-b126-0ab3b76dff25",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 341,
                        "line_start": 292,
                        "message": "Configuring now",
                        "name": "format",
                        "notes": "Create customer information format for note",
                        "number": 10,
                        "order": 7,
                        "outPorts": [
                            "out-1"
                        ],
                        "parameters": [
                            {
                                "position": 0,
                                "type": "",
                                "value": "get_customer_info:action_result.parameter.username"
                            },
                            {
                                "position": 1,
                                "type": "",
                                "value": "get_customer_info:action_result.data.*.displayname"
                            },
                            {
                                "position": 1,
                                "type": "",
                                "value": "get_customer_info:action_result.data.*.mail"
                            },
                            {
                                "position": 4,
                                "type": "",
                                "value": "get_customer_info:action_result.message"
                            },
                            {
                                "position": 3,
                                "type": "",
                                "value": "get_customer_info:action_result.data.*.company"
                            },
                            {
                                "position": 5,
                                "type": "",
                                "value": "get_customer_info:action_result.data.*.department"
                            },
                            {
                                "position": 7,
                                "type": "",
                                "value": "get_customer_info:action_result.data.*.telephoneNumber"
                            },
                            {
                                "position": 10,
                                "type": "",
                                "value": "get_customer_info:action_result.data.*.countrycode"
                            },
                            {
                                "position": 9,
                                "type": "",
                                "value": "get_customer_info:action_result.data.*.primarygroupid"
                            },
                            {
                                "position": 9,
                                "type": "",
                                "value": "get_customer_info:action_result.data.*.company"
                            },
                            {
                                "position": 11,
                                "type": "",
                                "value": "get_customer_info:action_result.data.*.objectcategory"
                            },
                            {
                                "position": 12,
                                "type": "",
                                "value": "get_customer_info:action_result.data.*.useraccountcontrol"
                            },
                            {
                                "position": 13,
                                "type": "",
                                "value": "get_customer_info:action_result.data.*.distinguishedname"
                            },
                            {
                                "position": 14,
                                "type": "",
                                "value": "get_customer_info:action_result.data.*.memberof"
                            },
                            {
                                "position": 14,
                                "type": "",
                                "value": "get_customer_info:action_result.data.*.manager"
                            }
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 600,
                            "y": 60
                        },
                        "previous_function": "",
                        "previous_name": "customer_info_format",
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "format",
                        "status": "",
                        "template": "%%\n### User Infromation for {0}: *{1}, {2}*\n### {3}\n\nMinimum information should be:\n\n| Attribute | Value |\n| ---- | ---- |\n| Company | {4} |\n| Business Unit | {5} |\n| Phone # | {6} |\n| Country Code | {7} |\n| Primary Group ID | {8} |\n| Object SID Type | {9} |\n| Object Category | {10} |\n| User Account Control | {11} |\n| Distinguished Name | {12} |\nMember of:  {13}  \nmanager_id: \n%%",
                        "title": "format",
                        "type": "coa.Format",
                        "warn": false,
                        "z": 847
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".format": {
                                "text": "manager format"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out-1": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out-1>.port-body": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "format"
                            },
                            "g.code image": {
                                "opacity": 1
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1
                            }
                        },
                        "block_code": "def manager_format(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('manager_format() called')\n    \n    template = \"\"\"%%\n| Attribute | Value |\n| ---- | ---- |\n| Manager | {0} |\n| Manager Email | {1} |\n| Manager Phone | {2} |\nmanager_id: {3}\n%%\"\"\"\n\n    # parameter list for template variable replacement\n    parameters = [\n        \"get_manager:action_result.data.*.displayname\",\n        \"get_manager:action_result.data.*.mail\",\n        \"get_manager:action_result.data.*.telephoneNumber\",\n        \"get_manager:action_result.parameter.username\",\n    ]\n\n    phantom.format(container=container, template=template, parameters=parameters, name=\"manager_format\")\n\n    customer_info_format(container=container)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "get manager",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "manager format",
                        "description": "",
                        "format": "format",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "97bd2375-d30b-421d-8d72-0b7290ce17e2",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [
                            "get_manager"
                        ],
                        "join_start": 700,
                        "line_end": 613,
                        "line_start": 587,
                        "message": "Configuring now",
                        "name": "format",
                        "notes": "",
                        "number": 13,
                        "order": 14,
                        "outPorts": [
                            "out-1"
                        ],
                        "parameters": [
                            {
                                "position": 0,
                                "type": "",
                                "value": "get_manager:action_result.data.*.displayname"
                            },
                            {
                                "position": 1,
                                "type": "",
                                "value": "get_manager:action_result.data.*.mail"
                            },
                            {
                                "position": 2,
                                "type": "",
                                "value": "get_manager:action_result.data.*.telephoneNumber"
                            },
                            {
                                "position": 3,
                                "type": "",
                                "value": "get_manager:action_result.parameter.username"
                            }
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 360,
                            "y": 60
                        },
                        "previous_function": "",
                        "previous_name": "manager_format",
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "format",
                        "status": "",
                        "template": "%%\n| Attribute | Value |\n| ---- | ---- |\n| Manager | {0} |\n| Manager Email | {1} |\n| Manager Phone | {2} |\nmanager_id: {3}\n%%",
                        "title": "format",
                        "type": "coa.Format",
                        "warn": false,
                        "z": 848
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "api": "add comment",
                        "attrs": {
                            ".api": {
                                "text": "missing data comment"
                            },
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "API"
                            },
                            "g.code image": {
                                "opacity": 1
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            }
                        },
                        "block_code": "def missing_data_comment(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('missing_data_comment() called')\n\n    phantom.comment(container=container, comment=\"Missing data to execute playbook.  Check logic and playbook parameters\")\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "color": "",
                        "configured": [
                            {
                                "addCommentComment": "Missing data to execute playbook.  Check logic and playbook parameters",
                                "key": "add-comment"
                            }
                        ],
                        "connected_to_start": true,
                        "connection_name": "",
                        "connection_type": "",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "missing data comment",
                        "description": "",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "7e8a5c86-a3a1-46cb-a45f-df00b5475e2e",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 408,
                        "line_start": 401,
                        "message": "Configuring now",
                        "name": "add comment",
                        "notes": "Adds a missing data comment, assigned to administrators and opens event",
                        "number": 3,
                        "order": 10,
                        "outPorts": [
                            "out"
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": -100,
                            "y": 280
                        },
                        "previous_function": "",
                        "previous_name": "missing_data_comment",
                        "show_number": false,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "api",
                        "status": "",
                        "title": "API",
                        "type": "coa.API",
                        "warn": false,
                        "z": 856
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "0255a2e2-e37b-4f8f-94b9-5d1a78664b44",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "a8167b06-2400-4a02-8e58-0f7cd574953b",
                            "port": "out-1",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "0003b9d9-a828-4f21-a4f1-595826ac8c50",
                            "selector": ".port-body[type=\"input\"]"
                        },
                        "type": "link",
                        "z": 858
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "9f0a60e6-234e-4b3e-b133-776c41c8f12c",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "0003b9d9-a828-4f21-a4f1-595826ac8c50",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "0413c9fc-fee8-433f-ab45-9458da4c6133",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 863
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "7292ebae-624f-4b56-85b8-816268f59c8e",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "a8167b06-2400-4a02-8e58-0f7cd574953b",
                            "port": "out-2",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(2) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "0e940fa0-ecda-4847-9b1a-13d1d1db2541",
                            "selector": ".port-body[type=\"input\"]"
                        },
                        "type": "link",
                        "z": 864
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "636cef3c-14f9-4bd7-8f8c-806bbc31c67d",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "0e940fa0-ecda-4847-9b1a-13d1d1db2541",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "c040f191-9789-4f2b-b4ed-6ed6265ea45e",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 866
                    },
                    {
                        "action": "get system attributes",
                        "action_type": "investigate",
                        "active": false,
                        "active_keys": {},
                        "active_values": {
                            "fields": "",
                            "hash": "merge_list:custom_function_result.data.*.item",
                            "hostname": "merge_hostnames:custom_function_result.data.*.item",
                            "ip": "filtered-data:user_system_filter:condition_1:artifact:*.cef.sourceAddress"
                        },
                        "angle": 0,
                        "app": "",
                        "appid": "",
                        "approver": "",
                        "assets": [
                            {
                                "action": "get system attributes",
                                "actions": [
                                    "get users",
                                    "reset password",
                                    "set password",
                                    "get system attributes",
                                    "get user attributes",
                                    "set system attribute",
                                    "change system ou",
                                    "list user groups",
                                    "enable user",
                                    "disable user",
                                    "test connectivity",
                                    "get system info",
                                    "run query",
                                    "list services",
                                    "list users"
                                ],
                                "active": true,
                                "app_name": "LDAP",
                                "app_version": "1.2.47",
                                "appid": "84110F27-6602-4DC8-A6F2-0311B1720BF8",
                                "asset_name": "domainctrl1",
                                "config_type": "asset",
                                "count": 0,
                                "fields": {
                                    "fields": "",
                                    "hostname": "merge_hostnames:custom_function_result.data.*.item"
                                },
                                "has_app": true,
                                "id": 7,
                                "loaded": false,
                                "missing": false,
                                "name": "domainctrl1",
                                "output": [
                                    {
                                        "data_path": "action_result.status",
                                        "data_type": "string",
                                        "example_values": [
                                            "success",
                                            "failed"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.parameter.fields",
                                        "data_type": "string",
                                        "example_values": [
                                            "samaccountname,displayname",
                                            "all"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "host name",
                                            "ldap distinguished name"
                                        ],
                                        "data_path": "action_result.parameter.hostname",
                                        "data_type": "string",
                                        "example_values": [
                                            "test_hostname1"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.accountexpires",
                                        "data_type": "string",
                                        "example_values": [
                                            "9223370036854775807"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.badpasswordtime",
                                        "data_type": "string",
                                        "example_values": [
                                            "0"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.badpwdcount",
                                        "data_type": "string",
                                        "example_values": [
                                            "0"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.cn",
                                        "data_type": "string",
                                        "example_values": [
                                            "test_hostname"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.codepage",
                                        "data_type": "string",
                                        "example_values": [
                                            "0"
                                        ]
                                    },
                                    {
                                        "column_name": "Country Code",
                                        "column_order": 6,
                                        "data_path": "action_result.data.*.countrycode",
                                        "data_type": "string",
                                        "example_values": [
                                            "0"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.displayname",
                                        "data_type": "string"
                                    },
                                    {
                                        "column_name": "Distinguished Name",
                                        "column_order": 2,
                                        "contains": [
                                            "ldap distinguished name"
                                        ],
                                        "data_path": "action_result.data.*.distinguishedname",
                                        "data_type": "string",
                                        "example_values": [
                                            "CN=testhostname,OU=Test123,OU=ShawOU,DC=corp,DC=contoso,DC=com"
                                        ]
                                    },
                                    {
                                        "column_name": "DNS Hostname",
                                        "column_order": 1,
                                        "contains": [
                                            "host name"
                                        ],
                                        "data_path": "action_result.data.*.dnshostname",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.dscorepropagationdata",
                                        "data_type": "string",
                                        "example_values": [
                                            "20181000074916.0Z;16010100000000.0Z"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.instancetype",
                                        "data_type": "string",
                                        "example_values": [
                                            "4"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.iscriticalsystemobject",
                                        "data_type": "string",
                                        "example_values": [
                                            "FALSE"
                                        ]
                                    },
                                    {
                                        "column_name": "Last Logoff",
                                        "column_order": 7,
                                        "data_path": "action_result.data.*.lastlogoff",
                                        "data_type": "string",
                                        "example_values": [
                                            "0"
                                        ]
                                    },
                                    {
                                        "column_name": "Last Logon",
                                        "column_order": 8,
                                        "data_path": "action_result.data.*.lastlogon",
                                        "data_type": "string",
                                        "example_values": [
                                            "0"
                                        ]
                                    },
                                    {
                                        "column_name": "Last Logon Timestamp",
                                        "column_order": 9,
                                        "data_path": "action_result.data.*.lastlogontimestamp",
                                        "data_type": "string"
                                    },
                                    {
                                        "column_name": "Local Policy Flags",
                                        "column_order": 10,
                                        "data_path": "action_result.data.*.localpolicyflags",
                                        "data_type": "string",
                                        "example_values": [
                                            "0"
                                        ]
                                    },
                                    {
                                        "column_name": "Logon Count",
                                        "column_order": 11,
                                        "data_path": "action_result.data.*.logoncount",
                                        "data_type": "string",
                                        "example_values": [
                                            "0"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.ms-ds-creatorsid",
                                        "data_type": "string"
                                    },
                                    {
                                        "column_name": "Host Name",
                                        "column_order": 0,
                                        "contains": [
                                            "host name"
                                        ],
                                        "data_path": "action_result.data.*.name",
                                        "data_type": "string",
                                        "example_values": [
                                            "test_hostname"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.netbootguid",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.netbootmirrordatafile",
                                        "data_type": "string"
                                    },
                                    {
                                        "column_name": "Object Category",
                                        "column_order": 3,
                                        "data_path": "action_result.data.*.objectcategory",
                                        "data_type": "string",
                                        "example_values": [
                                            "CN=Computer,CN=Schema,CN=Configuration,DC=corp,DC=contoso,DC=com"
                                        ]
                                    },
                                    {
                                        "column_name": "Object Class",
                                        "column_order": 4,
                                        "data_path": "action_result.data.*.objectclass",
                                        "data_type": "string",
                                        "example_values": [
                                            "top;person;organizationalPerson;user;computer"
                                        ]
                                    },
                                    {
                                        "column_name": "Object GUID",
                                        "column_order": 5,
                                        "data_path": "action_result.data.*.objectguid",
                                        "data_type": "string",
                                        "example_values": [
                                            "76 40 ab 86 69 e7 d9 48 95 67 3f 3b a5 1c 73 6b"
                                        ]
                                    },
                                    {
                                        "column_name": "Object SID",
                                        "column_order": 12,
                                        "data_path": "action_result.data.*.objectsid",
                                        "data_type": "string",
                                        "example_values": [
                                            "01 00 00 00 00 00 00 05 15 00 00 00 68 1d ef e1 d1 b7 2c 16 11 a2 7a 93 84 2f 00 00"
                                        ]
                                    },
                                    {
                                        "column_name": "OS",
                                        "column_order": 13,
                                        "data_path": "action_result.data.*.operatingsystem",
                                        "data_type": "string"
                                    },
                                    {
                                        "column_name": "Service Pack",
                                        "column_order": 14,
                                        "data_path": "action_result.data.*.operatingsystemservicepack",
                                        "data_type": "string"
                                    },
                                    {
                                        "column_name": "OS Version",
                                        "column_order": 15,
                                        "data_path": "action_result.data.*.operatingsystemversion",
                                        "data_type": "string"
                                    },
                                    {
                                        "column_name": "Primary Group ID",
                                        "column_order": 16,
                                        "data_path": "action_result.data.*.primarygroupid",
                                        "data_type": "string",
                                        "example_values": [
                                            "515"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.pwdlastset",
                                        "data_type": "string",
                                        "example_values": [
                                            "131846800401723900"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.samaccountname",
                                        "data_type": "string",
                                        "example_values": [
                                            "test_hostname1"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.samaccounttype",
                                        "data_type": "string",
                                        "example_values": [
                                            "805006369"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.serviceprincipalname",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.useraccountcontrol",
                                        "data_type": "string",
                                        "example_values": [
                                            "4100"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.usnchanged",
                                        "data_type": "string",
                                        "example_values": [
                                            "1691800"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.usncreated",
                                        "data_type": "string",
                                        "example_values": [
                                            "1689700"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.whenchanged",
                                        "data_type": "string",
                                        "example_values": [
                                            "20181023125053.0Z"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.whencreated",
                                        "data_type": "string",
                                        "example_values": [
                                            "20181022122540.0Z"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.summary.bad_password_count",
                                        "data_type": "string",
                                        "example_values": [
                                            "0"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.summary.last_logon",
                                        "data_type": "string",
                                        "example_values": [
                                            "Never"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.summary.os",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.summary.password_last_set",
                                        "data_type": "string",
                                        "example_values": [
                                            "10/01/2018 12:25:40 PM UTC"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.summary.state",
                                        "data_type": "string",
                                        "example_values": [
                                            "Enabled"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.message",
                                        "data_type": "string",
                                        "example_values": [
                                            "State: Enabled, Bad password count: 0, Last logon: Never, Password last set: 10/22/2018 12:25:40 PM UTC"
                                        ]
                                    },
                                    {
                                        "data_path": "summary.total_objects",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1
                                        ]
                                    },
                                    {
                                        "data_path": "summary.total_objects_successful",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1
                                        ]
                                    }
                                ],
                                "parameters": {
                                    "fields": {
                                        "data_type": "string",
                                        "default": null,
                                        "description": "Get fields (comma-separated)",
                                        "key": "fields",
                                        "order": 1,
                                        "required": false
                                    },
                                    "hostname": {
                                        "contains": [
                                            "host name",
                                            "ldap distinguished name"
                                        ],
                                        "data_type": "string",
                                        "default": null,
                                        "description": "Hostname to query the attributes of",
                                        "key": "hostname",
                                        "order": 0,
                                        "primary": true,
                                        "required": true
                                    }
                                },
                                "product_name": "Windows Server",
                                "product_vendor": "Microsoft",
                                "targets": "7",
                                "type": "directory service"
                            }
                        ],
                        "attrs": {
                            ".action": {
                                "text": "get system info"
                            },
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "Investigate"
                            },
                            "g.approver image": {
                                "opacity": 1
                            },
                            "g.code image": {
                                "opacity": 1
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.icon image": {
                                "xlink:href": "/inc/coa/img/block_icon_investigate.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            },
                            "g.timer image": {
                                "opacity": 1
                            }
                        },
                        "block_code": "def get_system_info(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('get_system_info() called')\n        \n    #phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))\n    \n    # collect data for 'get_system_info' call\n    custom_function_results_data_1 = phantom.collect2(container=container, datapath=['merge_hostnames:custom_function_result.data.*.item'], action_results=results)\n\n    parameters = []\n    \n    # build parameters list for 'get_system_info' call\n    for custom_function_results_item_1 in custom_function_results_data_1:\n        if custom_function_results_item_1[0]:\n            parameters.append({\n                'fields': \"\",\n                'hostname': custom_function_results_item_1[0],\n            })\n\n    phantom.act(action=\"get system attributes\", parameters=parameters, assets=['domainctrl1'], callback=system_info_format, name=\"get_system_info\")\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": true,
                        "color": "",
                        "connected_to_start": true,
                        "connection_name": "merge hostnames",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "get system info",
                        "delay": 0,
                        "description": "",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "c040f191-9789-4f2b-b4ed-6ed6265ea45e",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 363,
                        "line_start": 341,
                        "message": "Configuring now",
                        "name": "get system attributes",
                        "notes": "Gets system attributes from LDAP with hostname",
                        "number": 1,
                        "order": 8,
                        "outPorts": [
                            "out"
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 360,
                            "y": 200
                        },
                        "previous_function": "",
                        "previous_name": "get_system_info",
                        "required_params": {
                            "hostname": true
                        },
                        "reviewer": "",
                        "show_number": false,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "action_assets",
                        "status": "",
                        "title": "Investigate",
                        "type": "coa.Action",
                        "warn": false,
                        "z": 867
                    },
                    {
                        "action": "get user attributes",
                        "action_type": "investigate",
                        "active": false,
                        "active_keys": {},
                        "active_values": {
                            "attribute": "",
                            "fields": "",
                            "hash": "merge_usernames:custom_function_result.data.*.item",
                            "ip": "filtered-data:user_system_filter:condition_1:artifact:*.cef.sourceAddress",
                            "username": "merge_usernames:custom_function_result.data.*.item"
                        },
                        "angle": 0,
                        "app": "",
                        "appid": "",
                        "approver": "",
                        "assets": [
                            {
                                "action": "get user attributes",
                                "actions": [
                                    "get users",
                                    "reset password",
                                    "set password",
                                    "get system attributes",
                                    "get user attributes",
                                    "set system attribute",
                                    "change system ou",
                                    "list user groups",
                                    "enable user",
                                    "disable user",
                                    "test connectivity",
                                    "get system info",
                                    "run query",
                                    "list services",
                                    "list users"
                                ],
                                "active": true,
                                "app_name": "LDAP",
                                "app_version": "1.2.47",
                                "appid": "84110F27-6602-4DC8-A6F2-0311B1720BF8",
                                "asset_name": "domainctrl1",
                                "config_type": "asset",
                                "count": 0,
                                "fields": {
                                    "attribute": "",
                                    "fields": "",
                                    "username": "merge_usernames:custom_function_result.data.*.item"
                                },
                                "has_app": true,
                                "id": 7,
                                "loaded": false,
                                "missing": false,
                                "name": "domainctrl1",
                                "output": [
                                    {
                                        "data_path": "action_result.status",
                                        "data_type": "string",
                                        "example_values": [
                                            "success",
                                            "failed"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.parameter.attribute",
                                        "data_type": "string",
                                        "example_values": [
                                            "Displayname"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.parameter.fields",
                                        "data_type": "string",
                                        "example_values": [
                                            "samaccountName"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "user name",
                                            "ldap distinguished name"
                                        ],
                                        "data_path": "action_result.parameter.username",
                                        "data_type": "string",
                                        "example_values": [
                                            "The Administrator",
                                            "test_user3"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.accountexpires",
                                        "data_type": "string",
                                        "example_values": [
                                            "9223370036854775807"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.badpasswordtime",
                                        "data_type": "string",
                                        "example_values": [
                                            "131847005589525500"
                                        ]
                                    },
                                    {
                                        "column_name": "Bad Pwd Count",
                                        "column_order": 7,
                                        "data_path": "action_result.data.*.badpwdcount",
                                        "data_type": "string",
                                        "example_values": [
                                            "0"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.cn",
                                        "data_type": "string",
                                        "example_values": [
                                            "Test User3"
                                        ]
                                    },
                                    {
                                        "column_name": "Country",
                                        "column_order": 14,
                                        "data_path": "action_result.data.*.co",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.codepage",
                                        "data_type": "string",
                                        "example_values": [
                                            "0"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.company",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.countrycode",
                                        "data_type": "string",
                                        "example_values": [
                                            "0"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.department",
                                        "data_type": "string"
                                    },
                                    {
                                        "column_name": "Display Name",
                                        "column_order": 1,
                                        "data_path": "action_result.data.*.displayname",
                                        "data_type": "string",
                                        "example_values": [
                                            "Test User3"
                                        ]
                                    },
                                    {
                                        "column_name": "Distinguished Name",
                                        "column_order": 2,
                                        "contains": [
                                            "ldap distinguished name"
                                        ],
                                        "data_path": "action_result.data.*.distinguishedname",
                                        "data_type": "string",
                                        "example_values": [
                                            "CN=Test User3,CN=Users,DC=corp,DC=contoso,DC=com"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.dscorepropagationdata",
                                        "data_type": "string",
                                        "example_values": [
                                            "20181003111127.0Z;20170110001231.0Z;16010001000416.0Z"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.givenname",
                                        "data_type": "string",
                                        "example_values": [
                                            "Test"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.instancetype",
                                        "data_type": "string",
                                        "example_values": [
                                            "4"
                                        ]
                                    },
                                    {
                                        "column_name": "City",
                                        "column_order": 11,
                                        "data_path": "action_result.data.*.l",
                                        "data_type": "string"
                                    },
                                    {
                                        "column_name": "Last Logoff",
                                        "column_order": 4,
                                        "data_path": "action_result.data.*.lastlogoff",
                                        "data_type": "string",
                                        "example_values": [
                                            "0"
                                        ]
                                    },
                                    {
                                        "column_name": "Last Logon",
                                        "column_order": 3,
                                        "data_path": "action_result.data.*.lastlogon",
                                        "data_type": "string",
                                        "example_values": [
                                            "131847000011239275",
                                            "131847680040779871"
                                        ]
                                    },
                                    {
                                        "column_name": "Logon Count",
                                        "column_order": 5,
                                        "data_path": "action_result.data.*.logoncount",
                                        "data_type": "string",
                                        "example_values": [
                                            "0"
                                        ]
                                    },
                                    {
                                        "column_name": "E-Mail",
                                        "column_order": 8,
                                        "contains": [
                                            "email"
                                        ],
                                        "data_path": "action_result.data.*.mail",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.manager",
                                        "data_type": "string"
                                    },
                                    {
                                        "column_name": "Member Of",
                                        "column_order": 6,
                                        "data_path": "action_result.data.*.memberof",
                                        "data_type": "string",
                                        "example_values": [
                                            "CN=TestUsers,DC=corp,DC=contoso,DC=com;CN=Remote Desktop Users,CN=Builtin,DC=corp,DC=contoso,DC=com"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.name",
                                        "data_type": "string",
                                        "example_values": [
                                            "Test User3"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.objectcategory",
                                        "data_type": "string",
                                        "example_values": [
                                            "CN=Person,CN=Schema,CN=Configuration,DC=corp,DC=contoso,DC=com"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.objectclass",
                                        "data_type": "string",
                                        "example_values": [
                                            "top;person;organizationalPerson;user"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.objectguid",
                                        "data_type": "string",
                                        "example_values": [
                                            "13 ab 7f de 08 b5 32 44 9d e9 07 65 52 5a e4 49"
                                        ]
                                    },
                                    {
                                        "column_name": "Object SID",
                                        "column_order": 19,
                                        "data_path": "action_result.data.*.objectsid",
                                        "data_type": "string",
                                        "example_values": [
                                            "S-1-5-00-3790544232-372029393-2474287633-1114"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.postOfficeBox",
                                        "data_type": "string"
                                    },
                                    {
                                        "column_name": "Zip",
                                        "column_order": 13,
                                        "data_path": "action_result.data.*.postalcode",
                                        "data_type": "string"
                                    },
                                    {
                                        "column_name": "Primary Group ID",
                                        "column_order": 15,
                                        "data_path": "action_result.data.*.primarygroupid",
                                        "data_type": "string",
                                        "example_values": [
                                            "513"
                                        ]
                                    },
                                    {
                                        "column_name": "Pwd Last Set",
                                        "column_order": 16,
                                        "data_path": "action_result.data.*.pwdlastset",
                                        "data_type": "string",
                                        "example_values": [
                                            "131800831957980568",
                                            "131800682325338799"
                                        ]
                                    },
                                    {
                                        "column_name": "Username",
                                        "column_order": 0,
                                        "contains": [
                                            "user name"
                                        ],
                                        "data_path": "action_result.data.*.samaccountname",
                                        "data_type": "string",
                                        "example_values": [
                                            "Administrator",
                                            "test_user3"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.samaccounttype",
                                        "data_type": "string",
                                        "example_values": [
                                            "805006368"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.sn",
                                        "data_type": "string",
                                        "example_values": [
                                            "User3"
                                        ]
                                    },
                                    {
                                        "column_name": "State",
                                        "column_order": 12,
                                        "data_path": "action_result.data.*.st",
                                        "data_type": "string"
                                    },
                                    {
                                        "column_name": "Street",
                                        "column_order": 10,
                                        "data_path": "action_result.data.*.streetaddress",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.telephoneNumber",
                                        "data_type": "string"
                                    },
                                    {
                                        "column_name": "Title",
                                        "column_order": 9,
                                        "data_path": "action_result.data.*.title",
                                        "data_type": "string"
                                    },
                                    {
                                        "column_name": "User Account Control",
                                        "column_order": 17,
                                        "data_path": "action_result.data.*.useraccountcontrol",
                                        "data_type": "string",
                                        "example_values": [
                                            "60000",
                                            "66001"
                                        ]
                                    },
                                    {
                                        "column_name": "User Principal Name",
                                        "column_order": 18,
                                        "contains": [
                                            "email"
                                        ],
                                        "data_path": "action_result.data.*.userprincipalname",
                                        "data_type": "string",
                                        "example_values": [
                                            "test_user3@corp.contoso.com"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.usnchanged",
                                        "data_type": "string",
                                        "example_values": [
                                            "1600815"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.usncreated",
                                        "data_type": "string",
                                        "example_values": [
                                            "16003"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.whenchanged",
                                        "data_type": "string",
                                        "example_values": [
                                            "20180123123940.0Z"
                                        ]
                                    },
                                    {
                                        "column_name": "When Created",
                                        "column_order": 20,
                                        "data_path": "action_result.data.*.whencreated",
                                        "data_type": "string",
                                        "example_values": [
                                            "20141001130729.0Z"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.summary.bad_password_count",
                                        "data_type": "string",
                                        "example_values": [
                                            "0"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.summary.last_logon",
                                        "data_type": "string",
                                        "example_values": [
                                            "10/01/2018 07:51:41 AM UTC"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.summary.password_last_set",
                                        "data_type": "string",
                                        "example_values": [
                                            "10/01/2018 11:59:55 AM UTC"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.summary.state",
                                        "data_type": "string",
                                        "example_values": [
                                            "Disabled",
                                            "Enabled"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.message",
                                        "data_type": "string",
                                        "example_values": [
                                            "State: Disabled, Bad password count: 0, Last logon: 10/23/2018 07:51:41 AM UTC, Password last set: 10/22/2018 11:59:55 AM UTC",
                                            "State: Enabled, Bad password count: 0, Last logon: 10/23/2018 11:43:04 AM UTC, Password last set: 10/23/2018 11:37:12 AM UTC"
                                        ]
                                    },
                                    {
                                        "data_path": "summary.total_objects",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1
                                        ]
                                    },
                                    {
                                        "data_path": "summary.total_objects_successful",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1
                                        ]
                                    }
                                ],
                                "parameters": {
                                    "attribute": {
                                        "data_type": "string",
                                        "default": null,
                                        "description": "Attribute name to match",
                                        "key": "attribute",
                                        "order": 1,
                                        "required": false
                                    },
                                    "fields": {
                                        "data_type": "string",
                                        "default": null,
                                        "description": "Get fields (comma-separated)",
                                        "key": "fields",
                                        "order": 2,
                                        "required": false
                                    },
                                    "username": {
                                        "contains": [
                                            "user name",
                                            "ldap distinguished name"
                                        ],
                                        "data_type": "string",
                                        "default": null,
                                        "description": "Username or Attribute value to match",
                                        "key": "username",
                                        "order": 0,
                                        "primary": true,
                                        "required": true
                                    }
                                },
                                "product_name": "Windows Server",
                                "product_vendor": "Microsoft",
                                "targets": "7",
                                "type": "directory service"
                            }
                        ],
                        "attrs": {
                            ".action": {
                                "text": "get customer info"
                            },
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "Investigate"
                            },
                            "g.approver image": {
                                "opacity": 1
                            },
                            "g.code image": {
                                "opacity": 1
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.icon image": {
                                "xlink:href": "/inc/coa/img/block_icon_investigate.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            },
                            "g.timer image": {
                                "opacity": 1
                            }
                        },
                        "block_code": "def get_customer_info(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('get_customer_info() called')\n        \n    #phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))\n    \n    # collect data for 'get_customer_info' call\n    custom_function_results_data_1 = phantom.collect2(container=container, datapath=['merge_usernames:custom_function_result.data.*.item'], action_results=results)\n\n    parameters = []\n    \n    # build parameters list for 'get_customer_info' call\n    for custom_function_results_item_1 in custom_function_results_data_1:\n        if custom_function_results_item_1[0]:\n            parameters.append({\n                'fields': \"\",\n                'username': custom_function_results_item_1[0],\n                'attribute': \"\",\n            })\n\n    phantom.act(action=\"get user attributes\", parameters=parameters, assets=['domainctrl1'], callback=get_manager, name=\"get_customer_info\")\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": true,
                        "color": "",
                        "connected_to_start": true,
                        "connection_name": "merge usernames",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "get customer info",
                        "delay": 0,
                        "description": "",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "0413c9fc-fee8-433f-ab45-9458da4c6133",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 121,
                        "line_start": 98,
                        "message": "Configuring now",
                        "name": "get user attributes",
                        "notes": "Gets IP reputation for the destinationAddress  provided from VirusTotal",
                        "number": 1,
                        "order": 4,
                        "outPorts": [
                            "out"
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 360,
                            "y": -80
                        },
                        "previous_function": "",
                        "previous_name": "get_customer_info",
                        "required_params": {
                            "username": true
                        },
                        "reviewer": "",
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "action_assets",
                        "status": "",
                        "title": "Investigate",
                        "type": "coa.Action",
                        "warn": false,
                        "z": 870
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".functionBlock": {
                                "text": "generate task notes"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "custom function"
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 1
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn_grey.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            }
                        },
                        "block_code": "def generate_task_notes(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('generate_task_notes() called')\n    \n    input_parameter_0 = \"Validate customer and endpoint Information\"\n    results_data_1 = phantom.collect2(container=container, datapath=['get_customer_info:action_result.parameter.username', 'get_customer_info:action_result.data.*.manager'], action_results=results)\n    formatted_data_1 = phantom.get_format_data(name='customer_info_format__as_list')\n    formatted_data_2 = phantom.get_format_data(name='manager_format__as_list')\n    results_item_1_0 = [item[0] for item in results_data_1]\n    results_item_1_1 = [item[1] for item in results_data_1]\n\n    generate_task_notes__note_params = None\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n\n    \"\"\" Maps inputs to processing values and adds debugs for task default template \"\"\"\n    note_params = []\n    \n    \"\"\" Modify for # of notes created per # of indicators example below of 5 means \n        more than 5 indicators found will produce 1 note vs 5 notes. For a maximum of 20 indicators (ip, domain, url, filehash) \"\"\"\n    note_limit = 5\n    \n    # Debug input data\n    phantom.debug(\"Customer data\")\n    #phantom.debug(formatted_data_1)\n    customer_data = formatted_data_1\n    \n    # Debug input data\n    phantom.debug(\"Mnaager data\")\n    #phantom.debug(formatted_data_2)\n    manager_data = formatted_data_2\n\n    phantom.debug(\"Indicator Processed\")\n    #phantom.debug(results_data_1)\n    indicators = results_data_1\n    \n    no_manager = \"### No Manager found\"\n    # Organize IOCs by value with correct data for note insertion\n    for indicator in indicators:\n        if not indicator[1]:\n            indicator[1] = \"empty\"\n        for customer in customer_data:\n            if indicator[0] in customer:\n                customer = re.sub('(manager_id:.*)', '', customer)\n                indicator.append(customer)\n        for manager in manager_data:\n            if indicator[1] == \"empty\":\n                indicator.append(no_manager)\n            elif indicator[1] in manager:\n                manager = re.sub('(manager_id:.*)', '', manager)\n                indicator.append(manager)\n    \n    phantom.debug(\"Reorganzied note data to indicator.\")\n    #phantom.debug(indicators)\n    \n    # Get workbook phase id\n    phantom.debug('Getting current phase')\n\n    success, message, phase_id, phase_name = phantom.get_phase()\n\n    phantom.debug(\n        'phantom.get_phase results: success: {}, message: {}, phase_id: {}, phase_name: {}'.format(success, message, phase_id, phase_name)\n    )\n    \n    # Task data for adding task notes\n    task_data = {}\n    \n    # Get the tasks for start of the workbook\n    for task in phantom.get_tasks(container=container):\n        ## gets the current phase and 1st task\n        if phase_id == task['data']['phase'] and task['data']['name'] == input_parameter_0:\n            task_data.update(task['data'])\n            phantom.debug('phantom.get_tasks found the task: task_id: {}, task_name: {}'.format(task_data['id'],task_data['name']))\n\n    \"\"\" Create multiple single indicator note or multiple notes (cusotmer defined)\n        Change the indicators length to greater than 5 artifacts if you want more notes created\n        The maximum number of notes you want created is related to the number of indicators present.\"\"\"\n    \n    title = \"Customer Information Report\"\n    if len(indicators) <= note_limit:\n        # Create loop for creating multiple notes under the same task\n        phantom.debug(\"Found {} indicators.\".format(len(indicators)))\n        phantom.debug(\"Creating Multiple indicator notes.\")\n        for indicator in indicators: \n            # Define Note content build here\n            note_content = \"{}{}\".format(indicator[2],indicator[3])\n            #phantom.debug(\"Multi-Note content: \\n {}\".format(note_content))\n        \n            # Build note parameters\n            note_params.append({\n                \"note_type\": \"task\",\n                \"task_id\": task_data['id'],\n                \"container_id\": container['id'],\n                \"title\": title + \" for {}\".format(indicator[0]),\n                \"content\": note_content,\n                \"note_format\": \"markdown\",\n                \"phase_id\": phase_id\n            })\n    else:\n        phantom.debug(\"Found {} indicators.\".format(len(indicators)))\n        phantom.debug(\"Creating Single indicator notes.\")\n        note_content = \"\"\n        for indicator in indicators: \n            # Define Note content build here\n            note_content += \"## Customer Information for {}\\n {}{}\".format(indicator[0],indicator[2],indicator[3])\n            #phantom.debug(\"Single Note content: \\n {}\".format(note_content))\n\n        # Build note parameters\n        note_params.append({\n            \"note_type\": \"task\",\n            \"task_id\": task_data['id'],\n            \"container_id\": container['id'],\n            \"title\": title,\n            \"content\": note_content,\n            \"note_format\": \"markdown\",\n            \"phase_id\": phase_id\n        })    \n        \n    # Save parameters for REST calls to update\n    #phantom.debug(\"Debug Parameters:\")\n    generate_task_notes__note_params = note_params\n\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n\n    phantom.save_run_data(key='generate_task_notes:note_params', value=json.dumps(generate_task_notes__note_params))\n    create_customer_notes(container=container)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "get manager",
                        "connection_type": "action",
                        "customCodeEndLineOffset": 7,
                        "customCodeStartLine": 15,
                        "custom_callback": "",
                        "custom_code": "def generate_task_notes(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('generate_task_notes() called')\n    \n    input_parameter_0 = \"Get customer and host information\"\n    results_data_1 = phantom.collect2(container=container, datapath=['get_customer_info:action_result.parameter.username', 'get_customer_info:action_result.data.*.manager'], action_results=results)\n    formatted_data_1 = phantom.get_format_data(name='customer_info_format__as_list')\n    formatted_data_2 = phantom.get_format_data(name='manager_format__as_list')\n    results_item_1_0 = [item[0] for item in results_data_1]\n    results_item_1_1 = [item[1] for item in results_data_1]\n\n    generate_task_notes__note_params = None\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n\n    \"\"\" Maps inputs to processing values and adds debugs for task default template \"\"\"\n    note_params = []\n    \n    \"\"\" Modify for # of notes created per # of indicators example below of 5 means \n        more than 5 indicators found will produce 1 note vs 5 notes. For a maximum of 20 indicators (ip, domain, url, filehash) \"\"\"\n    note_limit = 5\n    \n    # Debug input data\n    phantom.debug(\"Customer data\")\n    #phantom.debug(formatted_data_1)\n    customer_data = formatted_data_1\n    \n    # Debug input data\n    phantom.debug(\"Mnaager data\")\n    #phantom.debug(formatted_data_2)\n    manager_data = formatted_data_2\n\n    phantom.debug(\"Indicator Processed\")\n    #phantom.debug(results_data_1)\n    indicators = results_data_1\n    \n    no_manager = \"### No Manager found\"\n    # Organize IOCs by value with correct data for note insertion\n    for indicator in indicators:\n        if not indicator[1]:\n            indicator[1] = \"empty\"\n        for customer in customer_data:\n            if indicator[0] in customer:\n                customer = re.sub('(manager_id:.*)', '', customer)\n                indicator.append(customer)\n        for manager in manager_data:\n            if indicator[1] == \"empty\":\n                indicator.append(no_manager)\n            elif indicator[1] in manager:\n                manager = re.sub('(manager_id:.*)', '', manager)\n                indicator.append(manager)\n    \n    phantom.debug(\"Reorganzied note data to indicator.\")\n    #phantom.debug(indicators)\n    \n    # Get workbook phase id\n    phantom.debug('Getting current phase')\n\n    success, message, phase_id, phase_name = phantom.get_phase()\n\n    phantom.debug(\n        'phantom.get_phase results: success: {}, message: {}, phase_id: {}, phase_name: {}'.format(success, message, phase_id, phase_name)\n    )\n    \n    # Task data for adding task notes\n    task_data = {}\n    \n    # Get the tasks for start of the workbook\n    for task in phantom.get_tasks(container=container):\n        ## gets the current phase and 1st task\n        if phase_id == task['data']['phase'] and task['data']['name'] == input_parameter_0:\n            task_data.update(task['data'])\n            phantom.debug('phantom.get_tasks found the task: task_id: {}, task_name: {}'.format(task_data['id'],task_data['name']))\n\n    \"\"\" Create multiple single indicator note or multiple notes (cusotmer defined)\n        Change the indicators length to greater than 5 artifacts if you want more notes created\n        The maximum number of notes you want created is related to the number of indicators present.\"\"\"\n    \n    title = \"Customer Information Report\"\n    if len(indicators) <= note_limit:\n        # Create loop for creating multiple notes under the same task\n        phantom.debug(\"Found {} indicators.\".format(len(indicators)))\n        phantom.debug(\"Creating Multiple indicator notes.\")\n        for indicator in indicators: \n            # Define Note content build here\n            note_content = \"{}{}\".format(indicator[2],indicator[3])\n            #phantom.debug(\"Multi-Note content: \\n {}\".format(note_content))\n        \n            # Build note parameters\n            note_params.append({\n                \"note_type\": \"task\",\n                \"task_id\": task_data['id'],\n                \"container_id\": container['id'],\n                \"title\": title + \" for {}\".format(indicator[0]),\n                \"content\": note_content,\n                \"note_format\": \"markdown\",\n                \"phase_id\": phase_id\n            })\n    else:\n        phantom.debug(\"Found {} indicators.\".format(len(indicators)))\n        phantom.debug(\"Creating Single indicator notes.\")\n        note_content = \"\"\n        for indicator in indicators: \n            # Define Note content build here\n            note_content += \"## Customer Information for {}\\n {}{}\".format(indicator[0],indicator[2],indicator[3])\n            #phantom.debug(\"Single Note content: \\n {}\".format(note_content))\n\n        # Build note parameters\n        note_params.append({\n            \"note_type\": \"task\",\n            \"task_id\": task_data['id'],\n            \"container_id\": container['id'],\n            \"title\": title,\n            \"content\": note_content,\n            \"note_format\": \"markdown\",\n            \"phase_id\": phase_id\n        })    \n        \n    # Save parameters for REST calls to update\n    #phantom.debug(\"Debug Parameters:\")\n    generate_task_notes__note_params = note_params\n\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n\n    phantom.save_run_data(key='generate_task_notes:note_params', value=json.dumps(generate_task_notes__note_params))\n    create_customer_notes(container=container)\n\n    return",
                        "custom_join": "",
                        "custom_name": "generate task notes",
                        "description": "Input 0 = Workbook Task to update with notes",
                        "functionBlock": "custom function",
                        "has_custom": true,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "f9dc4405-ff78-4e6e-a8d6-986131e4b52f",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 157,
                        "legacy": true,
                        "line_end": 256,
                        "line_start": 124,
                        "message": "Configuring now",
                        "name": "custom function",
                        "notes": "Create task notes:\n\nGets the phase, loops thru all the username and creates the notes in task for parameter 0 for each indicator found.",
                        "number": 1,
                        "order": 5,
                        "outPorts": [
                            "out"
                        ],
                        "outputVariables": [
                            {
                                "position": 1,
                                "type": "",
                                "value": "note_params"
                            }
                        ],
                        "parameters": [
                            {
                                "position": 0,
                                "type": "",
                                "value": "Validate customer and endpoint Information"
                            },
                            {
                                "position": 1,
                                "type": "",
                                "value": "customer_info_format:formatted_data.*"
                            },
                            {
                                "position": 1,
                                "type": "",
                                "value": "manager_format:formatted_data.*"
                            },
                            {
                                "position": 4,
                                "type": "",
                                "value": "get_customer_info:action_result.parameter.username"
                            },
                            {
                                "position": 3,
                                "type": "",
                                "value": "get_customer_info:action_result.data.*.manager"
                            }
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 880,
                            "y": -80
                        },
                        "previous_function": "",
                        "previous_name": "generate_task_notes",
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "custom function",
                        "status": "deprecating",
                        "title": "custom function",
                        "type": "coa.FunctionBlock",
                        "userGeneratedCode": "\n    \"\"\" Maps inputs to processing values and adds debugs for task default template \"\"\"\n    note_params = []\n    \n    \"\"\" Modify for # of notes created per # of indicators example below of 5 means \n        more than 5 indicators found will produce 1 note vs 5 notes. For a maximum of 20 indicators (ip, domain, url, filehash) \"\"\"\n    note_limit = 5\n    \n    # Debug input data\n    phantom.debug(\"Customer data\")\n    #phantom.debug(formatted_data_1)\n    customer_data = formatted_data_1\n    \n    # Debug input data\n    phantom.debug(\"Mnaager data\")\n    #phantom.debug(formatted_data_2)\n    manager_data = formatted_data_2\n\n    phantom.debug(\"Indicator Processed\")\n    #phantom.debug(results_data_1)\n    indicators = results_data_1\n    \n    no_manager = \"### No Manager found\"\n    # Organize IOCs by value with correct data for note insertion\n    for indicator in indicators:\n        if not indicator[1]:\n            indicator[1] = \"empty\"\n        for customer in customer_data:\n            if indicator[0] in customer:\n                customer = re.sub('(manager_id:.*)', '', customer)\n                indicator.append(customer)\n        for manager in manager_data:\n            if indicator[1] == \"empty\":\n                indicator.append(no_manager)\n            elif indicator[1] in manager:\n                manager = re.sub('(manager_id:.*)', '', manager)\n                indicator.append(manager)\n    \n    phantom.debug(\"Reorganzied note data to indicator.\")\n    #phantom.debug(indicators)\n    \n    # Get workbook phase id\n    phantom.debug('Getting current phase')\n\n    success, message, phase_id, phase_name = phantom.get_phase()\n\n    phantom.debug(\n        'phantom.get_phase results: success: {}, message: {}, phase_id: {}, phase_name: {}'.format(success, message, phase_id, phase_name)\n    )\n    \n    # Task data for adding task notes\n    task_data = {}\n    \n    # Get the tasks for start of the workbook\n    for task in phantom.get_tasks(container=container):\n        ## gets the current phase and 1st task\n        if phase_id == task['data']['phase'] and task['data']['name'] == input_parameter_0:\n            task_data.update(task['data'])\n            phantom.debug('phantom.get_tasks found the task: task_id: {}, task_name: {}'.format(task_data['id'],task_data['name']))\n\n    \"\"\" Create multiple single indicator note or multiple notes (cusotmer defined)\n        Change the indicators length to greater than 5 artifacts if you want more notes created\n        The maximum number of notes you want created is related to the number of indicators present.\"\"\"\n    \n    title = \"Customer Information Report\"\n    if len(indicators) <= note_limit:\n        # Create loop for creating multiple notes under the same task\n        phantom.debug(\"Found {} indicators.\".format(len(indicators)))\n        phantom.debug(\"Creating Multiple indicator notes.\")\n        for indicator in indicators: \n            # Define Note content build here\n            note_content = \"{}{}\".format(indicator[2],indicator[3])\n            #phantom.debug(\"Multi-Note content: \\n {}\".format(note_content))\n        \n            # Build note parameters\n            note_params.append({\n                \"note_type\": \"task\",\n                \"task_id\": task_data['id'],\n                \"container_id\": container['id'],\n                \"title\": title + \" for {}\".format(indicator[0]),\n                \"content\": note_content,\n                \"note_format\": \"markdown\",\n                \"phase_id\": phase_id\n            })\n    else:\n        phantom.debug(\"Found {} indicators.\".format(len(indicators)))\n        phantom.debug(\"Creating Single indicator notes.\")\n        note_content = \"\"\n        for indicator in indicators: \n            # Define Note content build here\n            note_content += \"## Customer Information for {}\\n {}{}\".format(indicator[0],indicator[2],indicator[3])\n            #phantom.debug(\"Single Note content: \\n {}\".format(note_content))\n\n        # Build note parameters\n        note_params.append({\n            \"note_type\": \"task\",\n            \"task_id\": task_data['id'],\n            \"container_id\": container['id'],\n            \"title\": title,\n            \"content\": note_content,\n            \"note_format\": \"markdown\",\n            \"phase_id\": phase_id\n        })    \n        \n    # Save parameters for REST calls to update\n    #phantom.debug(\"Debug Parameters:\")\n    generate_task_notes__note_params = note_params\n\n",
                        "warn": false,
                        "z": 872
                    },
                    {
                        ".scmName/text": "enrichment",
                        "active": false,
                        "active_keys": {},
                        "active_values": {},
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".customFunction": {
                                "text": "merge hostnames"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".scmName": {
                                "text": "enrichment"
                            },
                            ".title": {
                                "text": "custom function"
                            },
                            ".title-info": {
                                "text": ""
                            },
                            "g.branch image": {
                                "opacity": 1
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            }
                        },
                        "block_code": "def merge_hostnames(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('merge_hostnames() called')\n    \n    filtered_artifacts_data_0 = phantom.collect2(container=container, datapath=['filtered-data:user_system_filter:condition_2:artifact:*.cef.destinationAddress', 'filtered-data:user_system_filter:condition_2:artifact:*.cef.dest_ip', 'filtered-data:user_system_filter:condition_2:artifact:*.cef.destinationHostName', 'filtered-data:user_system_filter:condition_2:artifact:*.cef.dhost', 'filtered-data:user_system_filter:condition_2:artifact:*.cef.sourceAddress', 'filtered-data:user_system_filter:condition_2:artifact:*.cef.src_ip', 'filtered-data:user_system_filter:condition_2:artifact:*.cef.sourceHostName', 'filtered-data:user_system_filter:condition_2:artifact:*.cef.shost'])\n\n    parameters = []\n\n    filtered_artifacts_data_0_0 = [item[0] for item in filtered_artifacts_data_0]\n    filtered_artifacts_data_0_1 = [item[1] for item in filtered_artifacts_data_0]\n    filtered_artifacts_data_0_2 = [item[2] for item in filtered_artifacts_data_0]\n    filtered_artifacts_data_0_3 = [item[3] for item in filtered_artifacts_data_0]\n    filtered_artifacts_data_0_4 = [item[4] for item in filtered_artifacts_data_0]\n    filtered_artifacts_data_0_5 = [item[5] for item in filtered_artifacts_data_0]\n    filtered_artifacts_data_0_6 = [item[6] for item in filtered_artifacts_data_0]\n    filtered_artifacts_data_0_7 = [item[7] for item in filtered_artifacts_data_0]\n\n    parameters.append({\n        'input_1': filtered_artifacts_data_0_0,\n        'input_2': filtered_artifacts_data_0_1,\n        'input_3': filtered_artifacts_data_0_2,\n        'input_4': filtered_artifacts_data_0_3,\n        'input_5': filtered_artifacts_data_0_4,\n        'input_6': filtered_artifacts_data_0_5,\n        'input_7': filtered_artifacts_data_0_6,\n        'input_8': filtered_artifacts_data_0_7,\n        'input_9': None,\n        'input_10': None,\n    })\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n\n    # Write your custom code here...\n\n    ################################################################################\n    ## Custom Code End\n    ################################################################################    \n\n    # call custom function \"enrichment/list_merge_dedup\", returns the custom_function_run_id\n    phantom.custom_function(custom_function='enrichment/list_merge_dedup', parameters=parameters, name='merge_hostnames', callback=get_system_info)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": true,
                        "cfDisplayPath": "enrichment/list_merge_dedup",
                        "cfInputs": {
                            "input_1": {
                                "collectionType": "filtered_artifacts_data",
                                "dataPath": "filtered-data:user_system_filter:condition_2:artifact:*.cef.destinationAddress",
                                "paramName": "filtered_artifacts_data_0_0",
                                "type": "list"
                            },
                            "input_10": {
                                "dataPath": "",
                                "type": "list"
                            },
                            "input_2": {
                                "collectionType": "filtered_artifacts_data",
                                "dataPath": "filtered-data:user_system_filter:condition_2:artifact:*.cef.dest_ip",
                                "paramName": "filtered_artifacts_data_0_1",
                                "type": "list"
                            },
                            "input_3": {
                                "collectionType": "filtered_artifacts_data",
                                "dataPath": "filtered-data:user_system_filter:condition_2:artifact:*.cef.destinationHostName",
                                "paramName": "filtered_artifacts_data_0_2",
                                "type": "list"
                            },
                            "input_4": {
                                "collectionType": "filtered_artifacts_data",
                                "dataPath": "filtered-data:user_system_filter:condition_2:artifact:*.cef.dhost",
                                "paramName": "filtered_artifacts_data_0_3",
                                "type": "list"
                            },
                            "input_5": {
                                "collectionType": "filtered_artifacts_data",
                                "dataPath": "filtered-data:user_system_filter:condition_2:artifact:*.cef.sourceAddress",
                                "paramName": "filtered_artifacts_data_0_4",
                                "type": "list"
                            },
                            "input_6": {
                                "collectionType": "filtered_artifacts_data",
                                "dataPath": "filtered-data:user_system_filter:condition_2:artifact:*.cef.src_ip",
                                "paramName": "filtered_artifacts_data_0_5",
                                "type": "list"
                            },
                            "input_7": {
                                "collectionType": "filtered_artifacts_data",
                                "dataPath": "filtered-data:user_system_filter:condition_2:artifact:*.cef.sourceHostName",
                                "paramName": "filtered_artifacts_data_0_6",
                                "type": "list"
                            },
                            "input_8": {
                                "collectionType": "filtered_artifacts_data",
                                "dataPath": "filtered-data:user_system_filter:condition_2:artifact:*.cef.shost",
                                "paramName": "filtered_artifacts_data_0_7",
                                "type": "list"
                            },
                            "input_9": {
                                "dataPath": "",
                                "type": "list"
                            }
                        },
                        "color": "",
                        "connected_to_start": true,
                        "connection_name": "",
                        "connection_type": "",
                        "currentVersion": true,
                        "customCodeEndLineOffset": 7,
                        "customCodeStartLine": 31,
                        "customFunction": "enrichment/list_merge_dedup",
                        "customFunctionId": null,
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "merge hostnames",
                        "delay": 0,
                        "description": "",
                        "draftMode": false,
                        "existingCF": true,
                        "functionBlock": "custom function",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "0e940fa0-ecda-4847-9b1a-13d1d1db2541",
                        "inPorts": [
                            "in"
                        ],
                        "input_1-0": "filtered-data:user_system_filter:condition_2:artifact:*.cef.destinationAddress",
                        "input_2-1": "filtered-data:user_system_filter:condition_2:artifact:*.cef.dest_ip",
                        "input_3-2": "filtered-data:user_system_filter:condition_2:artifact:*.cef.destinationHostName",
                        "input_4-3": "filtered-data:user_system_filter:condition_2:artifact:*.cef.dhost",
                        "input_5-4": "filtered-data:user_system_filter:condition_2:artifact:*.cef.sourceAddress",
                        "input_6-5": "filtered-data:user_system_filter:condition_2:artifact:*.cef.src_ip",
                        "input_7-6": "filtered-data:user_system_filter:condition_2:artifact:*.cef.sourceHostName",
                        "input_8-7": "filtered-data:user_system_filter:condition_2:artifact:*.cef.shost",
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 718,
                        "line_start": 675,
                        "message": "Configuring now",
                        "name": "list_merge_dedup",
                        "notes": "Merges ip and hostnames into a single source:\ndestinationAddress\ndest_ip\ndestinationHostName\ndhost\nsourceAddress\nsrc_ip\nsourceHostName\nshost",
                        "number": 4,
                        "order": 17,
                        "outPorts": [
                            "out"
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 120,
                            "y": 200
                        },
                        "previous_function": "",
                        "previous_name": "merge_hostnames",
                        "selectedCustomFunction": {
                            "description": "Merge 2-10 different data paths into a single output data path. For example, if IP addresses are stored in the fields sourceAddress, destinationAddress, and deviceAddress, then those three fields could be merged together to form a single list of IP addresses.",
                            "draftMode": false,
                            "id": 173,
                            "inputs": [
                                {
                                    "_pretty_custom_function": "list_merge_dedup",
                                    "contains_type": [
                                        "*"
                                    ],
                                    "custom_function": 173,
                                    "description": "",
                                    "id": 561,
                                    "input_type": "list",
                                    "name": "input_1",
                                    "placeholder": ""
                                },
                                {
                                    "_pretty_custom_function": "list_merge_dedup",
                                    "contains_type": [
                                        "*"
                                    ],
                                    "custom_function": 173,
                                    "description": "",
                                    "id": 562,
                                    "input_type": "list",
                                    "name": "input_2",
                                    "placeholder": ""
                                },
                                {
                                    "_pretty_custom_function": "list_merge_dedup",
                                    "contains_type": [
                                        "*"
                                    ],
                                    "custom_function": 173,
                                    "description": "",
                                    "id": 563,
                                    "input_type": "list",
                                    "name": "input_3",
                                    "placeholder": ""
                                },
                                {
                                    "_pretty_custom_function": "list_merge_dedup",
                                    "contains_type": [
                                        "*"
                                    ],
                                    "custom_function": 173,
                                    "description": "",
                                    "id": 564,
                                    "input_type": "list",
                                    "name": "input_4",
                                    "placeholder": ""
                                },
                                {
                                    "_pretty_custom_function": "list_merge_dedup",
                                    "contains_type": [
                                        "*"
                                    ],
                                    "custom_function": 173,
                                    "description": "",
                                    "id": 565,
                                    "input_type": "list",
                                    "name": "input_5",
                                    "placeholder": ""
                                },
                                {
                                    "_pretty_custom_function": "list_merge_dedup",
                                    "contains_type": [
                                        "*"
                                    ],
                                    "custom_function": 173,
                                    "description": "",
                                    "id": 566,
                                    "input_type": "list",
                                    "name": "input_6",
                                    "placeholder": ""
                                },
                                {
                                    "_pretty_custom_function": "list_merge_dedup",
                                    "contains_type": [
                                        "*"
                                    ],
                                    "custom_function": 173,
                                    "description": "",
                                    "id": 567,
                                    "input_type": "list",
                                    "name": "input_7",
                                    "placeholder": ""
                                },
                                {
                                    "_pretty_custom_function": "list_merge_dedup",
                                    "contains_type": [
                                        "*"
                                    ],
                                    "custom_function": 173,
                                    "description": "",
                                    "id": 568,
                                    "input_type": "list",
                                    "name": "input_8",
                                    "placeholder": ""
                                },
                                {
                                    "_pretty_custom_function": "list_merge_dedup",
                                    "contains_type": [
                                        "*"
                                    ],
                                    "custom_function": 173,
                                    "description": "",
                                    "id": 569,
                                    "input_type": "list",
                                    "name": "input_9",
                                    "placeholder": ""
                                },
                                {
                                    "_pretty_custom_function": "list_merge_dedup",
                                    "contains_type": [
                                        "*"
                                    ],
                                    "custom_function": 173,
                                    "description": "",
                                    "id": 570,
                                    "input_type": "list",
                                    "name": "input_10",
                                    "placeholder": ""
                                }
                            ],
                            "name": "list_merge_dedup",
                            "outputs": [
                                {
                                    "_pretty_custom_function": "list_merge_dedup",
                                    "contains_type": [
                                        "*"
                                    ],
                                    "custom_function": 173,
                                    "data_path": "*.item",
                                    "description": "A combined list of all the values from all the input lists",
                                    "id": 216
                                }
                            ],
                            "playbooks": {
                                "draft_playbooks": [],
                                "draft_version_id": null,
                                "playbooks": [
                                    {
                                        "active": false,
                                        "display_path": "enrichment/Analyze user-host activity",
                                        "draft_mode": false,
                                        "id": 4006,
                                        "name": "Analyze user-host activity",
                                        "viewable": true
                                    },
                                    {
                                        "active": false,
                                        "display_path": "enrichment/Analyze user-host activity_py3",
                                        "draft_mode": false,
                                        "id": 4009,
                                        "name": "Analyze user-host activity_py3",
                                        "viewable": true
                                    },
                                    {
                                        "active": false,
                                        "display_path": "enrichment/Associate Host and Account Events",
                                        "draft_mode": false,
                                        "id": 4011,
                                        "name": "Associate Host and Account Events",
                                        "viewable": true
                                    },
                                    {
                                        "active": false,
                                        "display_path": "enrichment/Associate Host and Account Events_py3",
                                        "draft_mode": false,
                                        "id": 4014,
                                        "name": "Associate Host and Account Events_py3",
                                        "viewable": true
                                    },
                                    {
                                        "active": false,
                                        "display_path": "enrichment/Indicator Analysis - Host-Account",
                                        "draft_mode": false,
                                        "id": 4015,
                                        "name": "Indicator Analysis - Host-Account",
                                        "viewable": true
                                    },
                                    {
                                        "active": false,
                                        "display_path": "enrichment/Indicator Analysis - Host-Account_py3",
                                        "draft_mode": false,
                                        "id": 4016,
                                        "name": "Indicator Analysis - Host-Account_py3",
                                        "viewable": true
                                    }
                                ]
                            },
                            "scmId": 63,
                            "scmName": "enrichment"
                        },
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "repo",
                        "status": "",
                        "title": "custom function",
                        "type": "coa.CustomFunctionBlock",
                        "userGeneratedCode": "    # Write your custom code here...",
                        "warn": false,
                        "z": 875
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".functionBlock": {
                                "text": "generate system note"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "custom function"
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 1
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn_grey.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            }
                        },
                        "block_code": "def generate_system_note(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('generate_system_note() called')\n    \n    input_parameter_0 = \"Validate customer and endpoint Information\"\n    results_data_1 = phantom.collect2(container=container, datapath=['get_system_info:action_result.parameter.hostname'], action_results=results)\n    formatted_data_1 = phantom.get_format_data(name='system_info_format__as_list')\n    results_item_1_0 = [item[0] for item in results_data_1]\n\n    generate_system_note__note_params = None\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n\n    #\"\"\" Maps inputs to processing values and adds debugs for task default template \"\"\"\n    note_params = []\n    \n    \"\"\" Modify for # of notes created per # of indicators example below of 5 means \n        more than 5 indicators found will produce 1 note vs 5 notes. For a maximum of 20 indicators (ip, domain, url, filehash) \"\"\"\n    note_limit = 5\n    \n    # Debug input data\n    phantom.debug(\"System data:\")\n    #phantom.debug(formatted_data_1)\n    system_data = formatted_data_1\n    \n    phantom.debug(\"Indicator Processed\")\n    #phantom.debug(custom_function_results_data_1)\n    indicators = results_item_1_0\n    \n    for indicator in indicators:\n        for system in system_data:\n            if indicator[0] in system:\n                indicator.append(system)\n    \n    phantom.debug(\"Reorganzied note data to indicator.\")\n    #phantom.debug(indicators)\n\n    # Get workbook phase id\n    phantom.debug('Getting current phase')\n\n    success, message, phase_id, phase_name = phantom.get_phase()\n\n    phantom.debug(\n        'phantom.get_phase results: success: {}, message: {}, phase_id: {}, phase_name: {}'.format(success, message, phase_id, phase_name)\n    )\n    \n    # Task data for adding task notes\n    task_data = {}\n    \n    # Get the tasks for start of the workbook\n    for task in phantom.get_tasks(container=container):\n        ## gets the current phase and 1st task\n        if phase_id == task['data']['phase'] and task['data']['name'] == input_parameter_0:\n            task_data.update(task['data'])\n            phantom.debug('phantom.get_tasks found the task: task_id: {}, task_name: {}'.format(task_data['id'],task_data['name']))\n\n    \"\"\" Create multiple single indicator note or multiple notes (cusotmer defined)\n        Change the indicators length to greater than 5 artifacts if you want more notes created\n        The maximum number of notes you want created is related to the number of indicators present.\"\"\"\n    \n    title = \"System Information Report\"\n    if len(indicators) <= note_limit:\n        # Create loop for creating multiple notes under the same task\n        phantom.debug(\"Found {} indicators.\".format(len(indicators)))\n        phantom.debug(\"Creating Multiple indicator notes.\")\n        for indicator in indicators:\n            # Define Note content build here\n            note_content = \"{}\\n\".format(indicator[1])\n            #phantom.debug(\"Multi-Note content: \\n {}\".format(note_content))\n        \n            # Build note parameters\n            note_params.append({\n                \"note_type\": \"task\",\n                \"task_id\": task_data['id'],\n                \"container_id\": container['id'],\n                \"title\": title + \" for {}\".format(indicator[0]),\n                \"content\": note_content,\n                \"note_format\": \"markdown\",\n                \"phase_id\": phase_id\n            })\n    else:\n        # Creates one note for all system information presented\n        phantom.debug(\"Found {} indicators.\".format(len(indicators)))\n        phantom.debug(\"Creating Single indicator notes.\")\n        note_content = \"\"\n        for indicator in indicators: \n            # Define Note content build here\n            note_content += \"## System Information for {}\\n {}\\n \".format(indicator[0],indicator[1])\n            #phantom.debug(\"Single Note content: \\n {}\".format(note_content))\n\n        # Build note parameters\n        note_params.append({\n            \"note_type\": \"task\",\n            \"task_id\": task_data['id'],\n            \"container_id\": container['id'],\n            \"title\": title,\n            \"content\": note_content,\n            \"note_format\": \"markdown\",\n            \"phase_id\": phase_id\n        })    \n        \n    # Save parameters for REST calls to update\n    phantom.debug(\"Created Note Parameters:\")\n    generate_system_note__note_params = note_params\n\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n\n    phantom.save_run_data(key='generate_system_note:note_params', value=json.dumps(generate_system_note__note_params))\n    create_system_note(container=container)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "get system info",
                        "connection_type": "action",
                        "customCodeEndLineOffset": 7,
                        "customCodeStartLine": 13,
                        "custom_callback": "",
                        "custom_code": "def generate_system_note(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('generate_system_note() called')\n    \n    input_parameter_0 = \"Validate customer and endpoint Information\"\n    results_data_1 = phantom.collect2(container=container, datapath=['get_system_info:action_result.parameter.hostname'], action_results=results)\n    formatted_data_1 = phantom.get_format_data(name='system_info_format__as_list')\n    results_item_1_0 = [item[0] for item in results_data_1]\n\n    generate_system_note__note_params = None\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n\n    #\"\"\" Maps inputs to processing values and adds debugs for task default template \"\"\"\n    note_params = []\n    \n    \"\"\" Modify for # of notes created per # of indicators example below of 5 means \n        more than 5 indicators found will produce 1 note vs 5 notes. For a maximum of 20 indicators (ip, domain, url, filehash) \"\"\"\n    note_limit = 5\n    \n    # Debug input data\n    phantom.debug(\"System data:\")\n    #phantom.debug(formatted_data_1)\n    system_data = formatted_data_1\n    \n    phantom.debug(\"Indicator Processed\")\n    #phantom.debug(custom_function_results_data_1)\n    indicators = results_item_1_0\n    \n    for indicator in indicators:\n        for system in system_data:\n            if indicator[0] in system:\n                indicator.append(system)\n    \n    phantom.debug(\"Reorganzied note data to indicator.\")\n    #phantom.debug(indicators)\n\n    # Get workbook phase id\n    phantom.debug('Getting current phase')\n\n    success, message, phase_id, phase_name = phantom.get_phase()\n\n    phantom.debug(\n        'phantom.get_phase results: success: {}, message: {}, phase_id: {}, phase_name: {}'.format(success, message, phase_id, phase_name)\n    )\n    \n    # Task data for adding task notes\n    task_data = {}\n    \n    # Get the tasks for start of the workbook\n    for task in phantom.get_tasks(container=container):\n        ## gets the current phase and 1st task\n        if phase_id == task['data']['phase'] and task['data']['name'] == input_parameter_0:\n            task_data.update(task['data'])\n            phantom.debug('phantom.get_tasks found the task: task_id: {}, task_name: {}'.format(task_data['id'],task_data['name']))\n\n    \"\"\" Create multiple single indicator note or multiple notes (cusotmer defined)\n        Change the indicators length to greater than 5 artifacts if you want more notes created\n        The maximum number of notes you want created is related to the number of indicators present.\"\"\"\n    \n    title = \"System Information Report\"\n    if len(indicators) <= note_limit:\n        # Create loop for creating multiple notes under the same task\n        phantom.debug(\"Found {} indicators.\".format(len(indicators)))\n        phantom.debug(\"Creating Multiple indicator notes.\")\n        for indicator in indicators:\n            # Define Note content build here\n            note_content = \"{}\\n\".format(indicator[1])\n            #phantom.debug(\"Multi-Note content: \\n {}\".format(note_content))\n        \n            # Build note parameters\n            note_params.append({\n                \"note_type\": \"task\",\n                \"task_id\": task_data['id'],\n                \"container_id\": container['id'],\n                \"title\": title + \" for {}\".format(indicator[0]),\n                \"content\": note_content,\n                \"note_format\": \"markdown\",\n                \"phase_id\": phase_id\n            })\n    else:\n        # Creates one note for all system information presented\n        phantom.debug(\"Found {} indicators.\".format(len(indicators)))\n        phantom.debug(\"Creating Single indicator notes.\")\n        note_content = \"\"\n        for indicator in indicators: \n            # Define Note content build here\n            note_content += \"## System Information for {}\\n {}\\n \".format(indicator[0],indicator[1])\n            #phantom.debug(\"Single Note content: \\n {}\".format(note_content))\n\n        # Build note parameters\n        note_params.append({\n            \"note_type\": \"task\",\n            \"task_id\": task_data['id'],\n            \"container_id\": container['id'],\n            \"title\": title,\n            \"content\": note_content,\n            \"note_format\": \"markdown\",\n            \"phase_id\": phase_id\n        })    \n        \n    # Save parameters for REST calls to update\n    phantom.debug(\"Created Note Parameters:\")\n    generate_system_note__note_params = note_params\n\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n\n    phantom.save_run_data(key='generate_system_note:note_params', value=json.dumps(generate_system_note__note_params))\n    create_system_note(container=container)\n\n    return",
                        "custom_join": "",
                        "custom_name": "generate system note",
                        "description": "Input 0 = Workbook Task to update with notes",
                        "functionBlock": "custom function",
                        "has_custom": true,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "4f685a02-8785-4a58-ad50-c60bac226ad2",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "legacy": true,
                        "line_end": 551,
                        "line_start": 436,
                        "message": "Configuring now",
                        "name": "custom function",
                        "notes": "Create task notes:\n\nGets the phase, loops thru all the systems and creates the notes in task for parameter 0 for each indicator found.",
                        "number": 3,
                        "order": 12,
                        "outPorts": [
                            "out"
                        ],
                        "outputVariables": [
                            {
                                "position": 0,
                                "type": "",
                                "value": "note_params"
                            }
                        ],
                        "parameters": [
                            {
                                "position": 0,
                                "type": "",
                                "value": "Validate customer and endpoint Information"
                            },
                            {
                                "position": 0,
                                "type": "",
                                "value": "system_info_format:formatted_data.*"
                            },
                            {
                                "position": 1,
                                "type": "",
                                "value": "get_system_info:action_result.parameter.hostname"
                            }
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 880,
                            "y": 200
                        },
                        "previous_function": "",
                        "previous_name": "generate_system_note",
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "custom function",
                        "status": "deprecating",
                        "title": "custom function",
                        "type": "coa.FunctionBlock",
                        "userGeneratedCode": "\n    #\"\"\" Maps inputs to processing values and adds debugs for task default template \"\"\"\n    note_params = []\n    \n    \"\"\" Modify for # of notes created per # of indicators example below of 5 means \n        more than 5 indicators found will produce 1 note vs 5 notes. For a maximum of 20 indicators (ip, domain, url, filehash) \"\"\"\n    note_limit = 5\n    \n    # Debug input data\n    phantom.debug(\"System data:\")\n    #phantom.debug(formatted_data_1)\n    system_data = formatted_data_1\n    \n    phantom.debug(\"Indicator Processed\")\n    #phantom.debug(custom_function_results_data_1)\n    indicators = results_item_1_0\n    \n    for indicator in indicators:\n        for system in system_data:\n            if indicator[0] in system:\n                indicator.append(system)\n    \n    phantom.debug(\"Reorganzied note data to indicator.\")\n    #phantom.debug(indicators)\n\n    # Get workbook phase id\n    phantom.debug('Getting current phase')\n\n    success, message, phase_id, phase_name = phantom.get_phase()\n\n    phantom.debug(\n        'phantom.get_phase results: success: {}, message: {}, phase_id: {}, phase_name: {}'.format(success, message, phase_id, phase_name)\n    )\n    \n    # Task data for adding task notes\n    task_data = {}\n    \n    # Get the tasks for start of the workbook\n    for task in phantom.get_tasks(container=container):\n        ## gets the current phase and 1st task\n        if phase_id == task['data']['phase'] and task['data']['name'] == input_parameter_0:\n            task_data.update(task['data'])\n            phantom.debug('phantom.get_tasks found the task: task_id: {}, task_name: {}'.format(task_data['id'],task_data['name']))\n\n    \"\"\" Create multiple single indicator note or multiple notes (cusotmer defined)\n        Change the indicators length to greater than 5 artifacts if you want more notes created\n        The maximum number of notes you want created is related to the number of indicators present.\"\"\"\n    \n    title = \"System Information Report\"\n    if len(indicators) <= note_limit:\n        # Create loop for creating multiple notes under the same task\n        phantom.debug(\"Found {} indicators.\".format(len(indicators)))\n        phantom.debug(\"Creating Multiple indicator notes.\")\n        for indicator in indicators:\n            # Define Note content build here\n            note_content = \"{}\\n\".format(indicator[1])\n            #phantom.debug(\"Multi-Note content: \\n {}\".format(note_content))\n        \n            # Build note parameters\n            note_params.append({\n                \"note_type\": \"task\",\n                \"task_id\": task_data['id'],\n                \"container_id\": container['id'],\n                \"title\": title + \" for {}\".format(indicator[0]),\n                \"content\": note_content,\n                \"note_format\": \"markdown\",\n                \"phase_id\": phase_id\n            })\n    else:\n        # Creates one note for all system information presented\n        phantom.debug(\"Found {} indicators.\".format(len(indicators)))\n        phantom.debug(\"Creating Single indicator notes.\")\n        note_content = \"\"\n        for indicator in indicators: \n            # Define Note content build here\n            note_content += \"## System Information for {}\\n {}\\n \".format(indicator[0],indicator[1])\n            #phantom.debug(\"Single Note content: \\n {}\".format(note_content))\n\n        # Build note parameters\n        note_params.append({\n            \"note_type\": \"task\",\n            \"task_id\": task_data['id'],\n            \"container_id\": container['id'],\n            \"title\": title,\n            \"content\": note_content,\n            \"note_format\": \"markdown\",\n            \"phase_id\": phase_id\n        })    \n        \n    # Save parameters for REST calls to update\n    phantom.debug(\"Created Note Parameters:\")\n    generate_system_note__note_params = note_params\n\n",
                        "warn": false,
                        "z": 876
                    },
                    {
                        ".scmName/text": "enrichment",
                        "active": false,
                        "active_keys": {},
                        "active_values": {},
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#0083FF"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".customFunction": {
                                "text": "merge usernames"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".scmName": {
                                "text": "enrichment"
                            },
                            ".title": {
                                "text": "custom function"
                            },
                            ".title-info": {
                                "text": ""
                            },
                            "g.branch image": {
                                "opacity": 1
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            }
                        },
                        "block_code": "def merge_usernames(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('merge_usernames() called')\n    \n    filtered_artifacts_data_0 = phantom.collect2(container=container, datapath=['filtered-data:user_system_filter:condition_1:artifact:*.cef.destinationUserId', 'filtered-data:user_system_filter:condition_1:artifact:*.cef.destinationUserName', 'filtered-data:user_system_filter:condition_1:artifact:*.cef.duser', 'filtered-data:user_system_filter:condition_1:artifact:*.cef.sourceUserId', 'filtered-data:user_system_filter:condition_1:artifact:*.cef.sourceUserName', 'filtered-data:user_system_filter:condition_1:artifact:*.cef.suser'])\n\n    parameters = []\n\n    filtered_artifacts_data_0_0 = [item[0] for item in filtered_artifacts_data_0]\n    filtered_artifacts_data_0_1 = [item[1] for item in filtered_artifacts_data_0]\n    filtered_artifacts_data_0_2 = [item[2] for item in filtered_artifacts_data_0]\n    filtered_artifacts_data_0_3 = [item[3] for item in filtered_artifacts_data_0]\n    filtered_artifacts_data_0_4 = [item[4] for item in filtered_artifacts_data_0]\n    filtered_artifacts_data_0_5 = [item[5] for item in filtered_artifacts_data_0]\n\n    parameters.append({\n        'input_1': filtered_artifacts_data_0_0,\n        'input_2': filtered_artifacts_data_0_1,\n        'input_3': filtered_artifacts_data_0_2,\n        'input_4': filtered_artifacts_data_0_3,\n        'input_5': filtered_artifacts_data_0_4,\n        'input_6': filtered_artifacts_data_0_5,\n        'input_7': None,\n        'input_8': None,\n        'input_9': None,\n        'input_10': None,\n    })\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n\n    # Write your custom code here...\n\n    ################################################################################\n    ## Custom Code End\n    ################################################################################    \n\n    # call custom function \"enrichment/list_merge_dedup\", returns the custom_function_run_id\n    phantom.custom_function(custom_function='enrichment/list_merge_dedup', parameters=parameters, name='merge_usernames', callback=get_customer_info)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": true,
                        "cfDisplayPath": "enrichment/list_merge_dedup",
                        "cfInputs": {
                            "input_1": {
                                "collectionType": "filtered_artifacts_data",
                                "dataPath": "filtered-data:user_system_filter:condition_1:artifact:*.cef.destinationUserId",
                                "paramName": "filtered_artifacts_data_0_0",
                                "type": "list"
                            },
                            "input_10": {
                                "dataPath": "",
                                "type": "list"
                            },
                            "input_2": {
                                "collectionType": "filtered_artifacts_data",
                                "dataPath": "filtered-data:user_system_filter:condition_1:artifact:*.cef.destinationUserName",
                                "paramName": "filtered_artifacts_data_0_1",
                                "type": "list"
                            },
                            "input_3": {
                                "collectionType": "filtered_artifacts_data",
                                "dataPath": "filtered-data:user_system_filter:condition_1:artifact:*.cef.duser",
                                "paramName": "filtered_artifacts_data_0_2",
                                "type": "list"
                            },
                            "input_4": {
                                "collectionType": "filtered_artifacts_data",
                                "dataPath": "filtered-data:user_system_filter:condition_1:artifact:*.cef.sourceUserId",
                                "paramName": "filtered_artifacts_data_0_3",
                                "type": "list"
                            },
                            "input_5": {
                                "collectionType": "filtered_artifacts_data",
                                "dataPath": "filtered-data:user_system_filter:condition_1:artifact:*.cef.sourceUserName",
                                "paramName": "filtered_artifacts_data_0_4",
                                "type": "list"
                            },
                            "input_6": {
                                "collectionType": "filtered_artifacts_data",
                                "dataPath": "filtered-data:user_system_filter:condition_1:artifact:*.cef.suser",
                                "paramName": "filtered_artifacts_data_0_5",
                                "type": "list"
                            },
                            "input_7": {
                                "collectionType": "filtered_artifacts_data",
                                "dataPath": "",
                                "paramName": "filtered_artifacts_data_0_6",
                                "type": "list"
                            },
                            "input_8": {
                                "dataPath": "",
                                "type": "list"
                            },
                            "input_9": {
                                "dataPath": "",
                                "type": "list"
                            }
                        },
                        "color": "",
                        "connected_to_start": true,
                        "connection_name": "",
                        "connection_type": "",
                        "currentVersion": true,
                        "customCodeEndLineOffset": 7,
                        "customCodeStartLine": 29,
                        "customFunction": "enrichment/list_merge_dedup",
                        "customFunctionId": null,
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "merge usernames",
                        "delay": 0,
                        "description": "",
                        "draftMode": false,
                        "existingCF": true,
                        "functionBlock": "custom function",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "0003b9d9-a828-4f21-a4f1-595826ac8c50",
                        "inPorts": [
                            "in"
                        ],
                        "input_1-0": "filtered-data:user_system_filter:condition_1:artifact:*.cef.destinationUserId",
                        "input_2-1": "filtered-data:user_system_filter:condition_1:artifact:*.cef.destinationUserName",
                        "input_3-2": "filtered-data:user_system_filter:condition_1:artifact:*.cef.duser",
                        "input_4-3": "filtered-data:user_system_filter:condition_1:artifact:*.cef.sourceUserId",
                        "input_5-4": "filtered-data:user_system_filter:condition_1:artifact:*.cef.sourceUserName",
                        "input_6-5": "filtered-data:user_system_filter:condition_1:artifact:*.cef.suser",
                        "input_7-6": "",
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 675,
                        "line_start": 634,
                        "message": "Configuring now",
                        "name": "list_merge_dedup",
                        "notes": "Merges usernames regardless of source name:\ndestinationUserID\ndestinationUserName\nduser\nsourceUserId\nsourceUserName\nsuser",
                        "number": 3,
                        "order": 16,
                        "outPorts": [
                            "out"
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 120,
                            "y": -80
                        },
                        "previous_function": "",
                        "previous_name": "merge_usernames",
                        "selectedCustomFunction": {
                            "description": "Merge 2-10 different data paths into a single output data path. For example, if IP addresses are stored in the fields sourceAddress, destinationAddress, and deviceAddress, then those three fields could be merged together to form a single list of IP addresses.",
                            "draftMode": false,
                            "id": 173,
                            "inputs": [
                                {
                                    "_pretty_custom_function": "list_merge_dedup",
                                    "contains_type": [
                                        "*"
                                    ],
                                    "custom_function": 173,
                                    "description": "",
                                    "id": 561,
                                    "input_type": "list",
                                    "name": "input_1",
                                    "placeholder": ""
                                },
                                {
                                    "_pretty_custom_function": "list_merge_dedup",
                                    "contains_type": [
                                        "*"
                                    ],
                                    "custom_function": 173,
                                    "description": "",
                                    "id": 562,
                                    "input_type": "list",
                                    "name": "input_2",
                                    "placeholder": ""
                                },
                                {
                                    "_pretty_custom_function": "list_merge_dedup",
                                    "contains_type": [
                                        "*"
                                    ],
                                    "custom_function": 173,
                                    "description": "",
                                    "id": 563,
                                    "input_type": "list",
                                    "name": "input_3",
                                    "placeholder": ""
                                },
                                {
                                    "_pretty_custom_function": "list_merge_dedup",
                                    "contains_type": [
                                        "*"
                                    ],
                                    "custom_function": 173,
                                    "description": "",
                                    "id": 564,
                                    "input_type": "list",
                                    "name": "input_4",
                                    "placeholder": ""
                                },
                                {
                                    "_pretty_custom_function": "list_merge_dedup",
                                    "contains_type": [
                                        "*"
                                    ],
                                    "custom_function": 173,
                                    "description": "",
                                    "id": 565,
                                    "input_type": "list",
                                    "name": "input_5",
                                    "placeholder": ""
                                },
                                {
                                    "_pretty_custom_function": "list_merge_dedup",
                                    "contains_type": [
                                        "*"
                                    ],
                                    "custom_function": 173,
                                    "description": "",
                                    "id": 566,
                                    "input_type": "list",
                                    "name": "input_6",
                                    "placeholder": ""
                                },
                                {
                                    "_pretty_custom_function": "list_merge_dedup",
                                    "contains_type": [
                                        "*"
                                    ],
                                    "custom_function": 173,
                                    "description": "",
                                    "id": 567,
                                    "input_type": "list",
                                    "name": "input_7",
                                    "placeholder": ""
                                },
                                {
                                    "_pretty_custom_function": "list_merge_dedup",
                                    "contains_type": [
                                        "*"
                                    ],
                                    "custom_function": 173,
                                    "description": "",
                                    "id": 568,
                                    "input_type": "list",
                                    "name": "input_8",
                                    "placeholder": ""
                                },
                                {
                                    "_pretty_custom_function": "list_merge_dedup",
                                    "contains_type": [
                                        "*"
                                    ],
                                    "custom_function": 173,
                                    "description": "",
                                    "id": 569,
                                    "input_type": "list",
                                    "name": "input_9",
                                    "placeholder": ""
                                },
                                {
                                    "_pretty_custom_function": "list_merge_dedup",
                                    "contains_type": [
                                        "*"
                                    ],
                                    "custom_function": 173,
                                    "description": "",
                                    "id": 570,
                                    "input_type": "list",
                                    "name": "input_10",
                                    "placeholder": ""
                                }
                            ],
                            "name": "list_merge_dedup",
                            "outputs": [
                                {
                                    "_pretty_custom_function": "list_merge_dedup",
                                    "contains_type": [
                                        "*"
                                    ],
                                    "custom_function": 173,
                                    "data_path": "*.item",
                                    "description": "A combined list of all the values from all the input lists",
                                    "id": 216
                                }
                            ],
                            "playbooks": {
                                "draft_playbooks": [],
                                "draft_version_id": null,
                                "playbooks": [
                                    {
                                        "active": false,
                                        "display_path": "enrichment/Analyze user-host activity",
                                        "draft_mode": false,
                                        "id": 4006,
                                        "name": "Analyze user-host activity",
                                        "viewable": true
                                    },
                                    {
                                        "active": false,
                                        "display_path": "enrichment/Analyze user-host activity_py3",
                                        "draft_mode": false,
                                        "id": 4009,
                                        "name": "Analyze user-host activity_py3",
                                        "viewable": true
                                    },
                                    {
                                        "active": false,
                                        "display_path": "enrichment/Associate Host and Account Events",
                                        "draft_mode": false,
                                        "id": 4011,
                                        "name": "Associate Host and Account Events",
                                        "viewable": true
                                    },
                                    {
                                        "active": false,
                                        "display_path": "enrichment/Associate Host and Account Events_py3",
                                        "draft_mode": false,
                                        "id": 4014,
                                        "name": "Associate Host and Account Events_py3",
                                        "viewable": true
                                    },
                                    {
                                        "active": false,
                                        "display_path": "enrichment/Indicator Analysis - Host-Account",
                                        "draft_mode": false,
                                        "id": 4015,
                                        "name": "Indicator Analysis - Host-Account",
                                        "viewable": true
                                    },
                                    {
                                        "active": false,
                                        "display_path": "enrichment/Indicator Analysis - Host-Account_py3",
                                        "draft_mode": false,
                                        "id": 4016,
                                        "name": "Indicator Analysis - Host-Account_py3",
                                        "viewable": true
                                    }
                                ]
                            },
                            "scmId": 63,
                            "scmName": "enrichment"
                        },
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "repo",
                        "status": "active",
                        "title": "custom function",
                        "type": "coa.CustomFunctionBlock",
                        "userGeneratedCode": "    # Write your custom code here...",
                        "warn": false,
                        "z": 877
                    }
                ]
            },
            "notes": "INPUT: user or hostname\nINTERACTION: LDAP, Splunk, CMDB\nACTION: get user attributes, get system attributes, run query\nARTIFACTS:\nP1: get user attributes and add a note with the summarized information\nP2: get system attributes and add a note with the summarized information"
        },
        "python_version": "3",
        "schema": 4,
        "version": "4.10.3.51237"
    },
    "create_time": "2021-05-08T12:16:23.616273+00:00",
    "draft_mode": false,
    "labels": [
        "*"
    ],
    "tags": []
}